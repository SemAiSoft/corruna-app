{"version":3,"file":"main.js","mappings":";;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,sBAAsB;AACrD,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,qBAAqB,mBAAO,CAAC,6BAAkB;AAC/C,qBAAqB,mBAAO,CAAC,6BAAkB;AAC/C,eAAe,mBAAO,CAAC,cAAc;AACrC,sBAAsB,mBAAO,CAAC,8BAAmB;AACjD,sBAAsB,mBAAO,CAAC,8BAAmB;AACjD,qBAAqB,mBAAO,CAAC,6BAAkB;AAC/C,sBAAsB,mBAAO,CAAC,8BAAmB;AACjD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,8BAA8B,mBAAO,CAAC,0DAA+C;AACrF,0BAA0B,mBAAO,CAAC,+DAAoD;AACtF,qBAAqB,mBAAO,CAAC,6BAAkB;AAC/C,sBAAsB,mBAAO,CAAC,8BAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,iBAAiB;;;;;;;;AC9DJ;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,6BAA6B,mBAAO,CAAC,0DAAkC;AACvE,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,0DAA0D;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AC9Cd;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,6BAA6B,mBAAO,CAAC,0DAAkC;AACvE,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AC/Dd;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,gCAAgC,mBAAO,CAAC,gEAAqC;AAC7E,gCAAgC,mBAAO,CAAC,gEAAqC;AAC7E,6BAA6B,mBAAO,CAAC,0DAA+B;AACpE,6BAA6B,mBAAO,CAAC,0DAA+B;AACpE,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,sBAAsB,mBAAO,CAAC,0CAAe;AAC7C,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,kBAAkB;;;;;;;;ACtCL;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,GAAG,kBAAkB;AAC7C,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC,IAAI,kBAAkB;AACvB,wBAAwB;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;;;;;;;;AChCV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC,wBAAwB,2BAA2B;AACnD;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA,0JAA0J;AAC1J;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;AC/QX;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,YAAY;AACzC,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;ACtEX;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAoH,0DAA0D;AAC9K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACxClB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;AClElB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,uBAAuB,mBAAO,CAAC,kDAAyC;AACxE,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B,mBAAO,CAAC,kDAAmB;AACrD,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,sBAAsB;;;;;;;;ACvCT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B,GAAG,iCAAiC,GAAG,yBAAyB;AAC7F,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD,iCAAiC;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;AACD,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;AC9DY;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,kCAAkC;AACjE;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,gBAAgB;AAC7C,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mCAAmC,eAAe;AAClD,qCAAqC,qBAAqB;AAC1D,sCAAsC,SAAS,gCAAgC;AAC/E,uCAAuC,SAAS,sCAAsC;AACtF,uCAAuC,oCAAoC;AAC3E,uCAAuC,oCAAoC;AAC3E,6CAA6C,0CAA0C;AACvF,4CAA4C,yCAAyC;AACrF,sCAAsC,mCAAmC;AACzE,qCAAqC,kCAAkC;AACvE,qCAAqC,kCAAkC;AACvE;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,kCAAkC;AACvE,mCAAmC,gCAAgC;AACnE,sCAAsC,mCAAmC;AACzE,uCAAuC,8CAA8C;AACrF,uCAAuC,oCAAoC;AAC3E,uCAAuC,oCAAoC;AAC3E,6CAA6C,0CAA0C;AACvF,4CAA4C,yCAAyC;AACrF,sCAAsC,mCAAmC;AACzE,qCAAqC,kCAAkC;AACvE,qCAAqC,kCAAkC;AACvE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG;AAChG;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA,0JAA0J;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;AC7Wf;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;AC7Ef;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,2EAA2E,2BAA2B;AACtG;AACA;AACA;AACA;AACA;AACA,gFAAgF,2BAA2B;AAC3G;AACA;AACA,yEAAyE,2BAA2B;AACpG;AACA;AACA,6EAA6E,2BAA2B;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACtElB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzlB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA,qCAAqC;AACrC,qBAAqB;AACrB;AACA,qCAAqC;AACrC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,sCAAsC,kBAAkB;AACxD;AACA;AACA,8CAA8C,0BAA0B,kBAAkB;AAC1F,8CAA8C,+BAA+B;AAC7E;AACA,qCAAqC;AACrC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oDAAoD;AAChG,6BAA6B;AAC7B,8BAA8B,oDAAoD;AAClF;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,4CAA4C,oDAAoD;AAChG,6BAA6B;AAC7B;AACA;AACA,sCAAsC,oDAAoD;AAC1F;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yCAAyC,kCAAkC;AAC3E,yCAAyC,kCAAkC;AAC3E;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,qDAAqD;AACrD,qCAAqC;AACrC;AACA;AACA,qDAAqD;AACrD,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,8BAA8B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,4CAA4C;AACrF;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,wCAAwC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,kCAAkC;AAC3E;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,4CAA4C;AACrF;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,wCAAwC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,kCAAkC;AAC3E;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,4CAA4C;AACrF;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,sCAAsC,0CAA0C;AAChF;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;AC3+Bf;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G,WAAW;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;ACrGf;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B,mBAAO,CAAC,kDAAmB;AACrD,uBAAuB,mBAAO,CAAC,kDAAyC;AACxE,yBAAyB,mBAAO,CAAC,qDAAgC;AACjE,wBAAwB,mBAAO,CAAC,8CAAyB;AACzD,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D,sBAAsB,mBAAO,CAAC,0CAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB;;;;;;;;ACnFT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,kBAAkB,GAAG,yBAAyB,GAAG,0BAA0B;AACpG,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;AACD,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;AACvB,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;AACvB,sBAAsB;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,IAAI,kBAAkB;;;;;;;;AC1EV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,+BAA+B,mBAAO,CAAC,8DAAoC;AAC3E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,kGAAkG,0DAA0D;AAC5J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,0DAA0D;AACjK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;;;;;;;ACzGhB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,+BAA+B,mBAAO,CAAC,8DAAoC;AAC3E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;;;;;;;AChEhB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,uBAAuB,kBAAkB;AACvE,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,2BAA2B;AAC3D;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B,gCAAgC,8BAA8B;AAC9D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B,gCAAgC,8BAA8B;AAC9D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qJAAqJ;AACrJ,yKAAyK;AACzK,qJAAqJ;AACrJ,oKAAoK;AACpK,+JAA+J;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yCAAyC,SAAS,eAAe;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2CAA2C,QAAQ,YAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,qCAAqC,6BAA6B;AAClE,wCAAwC,gCAAgC;AACxE,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,qCAAqC,qCAAqC;AAC1E,wCAAwC,wCAAwC;AAChF,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qCAAqC,UAAU,qBAAqB;AACpE;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,wCAAwC,mBAAmB;AAC3D,yCAAyC,qBAAqB;AAC9D,0CAA0C,sBAAsB;AAChE,6CAA6C,yBAAyB;AACtE,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,oCAAoC;AACpC,oCAAoC,gFAAgF;AACpH,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,0CAA0C,kCAAkC;AAC5E,yCAAyC,iCAAiC;AAC1E,6CAA6C,wBAAwB;AACrE,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D,mCAAmC,eAAe;AAClD,oCAAoC,8BAA8B;AAClE,kCAAkC,4BAA4B;AAC9D,oCAAoC,8BAA8B;AAClE,qCAAqC,+BAA+B;AACpE,yCAAyC,mCAAmC;AAC5E,4CAA4C,sCAAsC;AAClF,kCAAkC,4BAA4B;AAC9D;AACA;AACA,yBAAyB;AACzB,qCAAqC,qBAAqB;AAC1D;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,kCAAkC;AACvE,mCAAmC,gCAAgC;AACnE,oCAAoC,iCAAiC;AACrE,kCAAkC,+BAA+B;AACjE,oCAAoC,iCAAiC;AACrE,yCAAyC,sCAAsC;AAC/E,4CAA4C,yCAAyC;AACrF,kCAAkC,+BAA+B;AACjE,qCAAqC,kCAAkC;AACvE,uCAAuC,iBAAiB,oCAAoC,OAAO;AACnG,qCAAqC,kCAAkC;AACvE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAAkH;AAClH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;AC5zBb;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,mBAAmB,mBAAO,CAAC,UAAU;AACrC,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,qBAAqB,mBAAO,CAAC,YAAY;AACzC,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,oCAAoC,6BAA6B;AACjE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,sCAAsC,uCAAuC;AAC7E;AACA;AACA;AACA,iBAAiB;AACjB;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6EAA6E,WAAW;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C,oCAAoC,qBAAqB;AACzD,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC,wBAAwB;AAC5D,oCAAoC,mBAAmB;AACvD,qCAAqC,yBAAyB;AAC9D,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gCAAgC,4EAA4E;AAC5G;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI,WAAW;AACpC;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa,GAAG,UAAU;AAChE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;AC5Qb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,kCAAkC,mBAAO,CAAC,oEAAuC;AACjF,kCAAkC,mBAAO,CAAC,oEAAuC;AACjF,+BAA+B,mBAAO,CAAC,8DAAiC;AACxE,+BAA+B,mBAAO,CAAC,8DAAiC;AACxE,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,wBAAwB,mBAAO,CAAC,8CAAiB;AACjD,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D,sBAAsB,mBAAO,CAAC,0CAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,oBAAoB;;;;;;;;AC5DP;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,2BAA2B,GAAG,sBAAsB,GAAG,uBAAuB;AACxG,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,uBAAuB;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD,sBAAsB;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;AACD,2BAA2B;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,IAAI,kBAAkB;AACvB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;AChFY;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,mBAAmB,mBAAO,CAAC,UAAU;AACrC,qBAAqB;AACrB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;AC3BY;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC;AAClC,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,qCAAqC,mBAAO,CAAC,0EAAwC;AACrF,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;;;;;;;ACtCrB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC;AAClC,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,qCAAqC,mBAAO,CAAC,0EAAwC;AACrF,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;;;;;;;ACxCrB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa,IAAI,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gEAAgE,IAAI,sBAAsB;AAC1F;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACjDlB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,IAAI,sBAAsB;AAClG;AACA,wDAAwD,IAAI,sBAAsB;AAClF;AACA;AACA;AACA;AACA;AACA,wEAAwE,IAAI,sBAAsB;AAClG;AACA;AACA,uDAAuD,GAAG,qBAAqB;AAC/E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,IAAI,sBAAsB;AAC9E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACtDlB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,wCAAwC,mBAAO,CAAC,gFAA6C;AAC7F,wCAAwC,mBAAO,CAAC,gFAA6C;AAC7F,qCAAqC,mBAAO,CAAC,0EAAuC;AACpF,qCAAqC,mBAAO,CAAC,0EAAuC;AACpF,uBAAuB,mBAAO,CAAC,kDAAyC;AACxE,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,yBAAyB,mBAAO,CAAC,qDAAkB;AACnD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,yBAAyB;;;;;;;;AC3BZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C,oBAAoB,KAAK;;;;;;;;ACnBvD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,8BAA8B,mBAAO,CAAC,0DAA2C;AACjF,wBAAwB,mBAAO,CAAC,8CAA+B;AAC/D,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,sBAAsB,mBAAO,CAAC,0CAA2B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB;;;;;;;;ACvBJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,qBAAqB,mBAAO,CAAC,6BAAc;AAC3C,8BAA8B,mBAAO,CAAC,0DAA2C;AACjF,wBAAwB,mBAAO,CAAC,8CAA+B;AAC/D,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,sBAAsB,mBAAO,CAAC,0CAA2B;AACzD,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mCAAmC,mBAAO,CAAC,sEAAwC;AACnF,mCAAmC,mBAAO,CAAC,sEAAwC;AACnF,gCAAgC,mBAAO,CAAC,gEAAkC;AAC1E,gCAAgC,mBAAO,CAAC,gEAAkC;AAC1E,yBAAyB,mBAAO,CAAC,gDAAkB;AACnD,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,yBAAyB;;;;;;;;AChCZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,qBAAqB;AACrB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,cAAc;AACd;AACA,CAAC;;;;;;;;ACpCY;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,gCAAgC,mBAAO,CAAC,gEAAqC;AAC7E,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;ACtCjB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,gCAAgC,mBAAO,CAAC,gEAAqC;AAC7E,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;ACxCjB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,YAAY;AACzC,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa,IAAI,sBAAsB;AACvC;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gEAAgE,IAAI,sBAAsB;AAC1F;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AC9Dd;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,oCAAoC;AACxG;AACA;AACA;AACA;AACA,wDAAwD,IAAI,sBAAsB;AAClF;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,IAAI,sBAAsB;AAClF;AACA;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,WAAW;AAClG;AACA,oDAAoD,IAAI,sBAAsB;AAC9E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AClEd;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,2BAA2B;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACtClB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACzElB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,oEAAoE,oBAAoB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;ACtEf;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,gCAAgC;AACpG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA,aAAa;AACb,+EAA+E;AAC/E;AACA;AACA;AACA,aAAa;AACb,qEAAqE;AACrE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kEAAkE,WAAW;AAC7E;AACA;AACA,wEAAwE,WAAW;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;AC7Ef;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B,mBAAO,CAAC,kDAAmB;AACrD,uBAAuB,mBAAO,CAAC,kDAAyC;AACxE,2BAA2B,mBAAO,CAAC,kDAAuC;AAC1E,4BAA4B,mBAAO,CAAC,oDAAyC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB;;;;;;;;ACjDT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B,GAAG,wBAAwB;AACxD,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,wBAAwB;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD,6BAA6B;AAC7B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;;;;;;;;ACtCV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC;AACjC,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,mCAAmC,mBAAO,CAAC,oEAAsC;AACjF,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;;;;;;;ACvCpB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC;AACjC,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,mCAAmC,mBAAO,CAAC,oEAAsC;AACjF,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;;;;;;;ACzCpB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,sCAAsC,mBAAO,CAAC,0EAA2C;AACzF,sCAAsC,mBAAO,CAAC,0EAA2C;AACzF,mCAAmC,mBAAO,CAAC,oEAAqC;AAChF,mCAAmC,mBAAO,CAAC,oEAAqC;AAChF,2BAA2B,mBAAO,CAAC,kDAA+B;AAClE,4BAA4B,mBAAO,CAAC,oDAAqB;AACzD,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B,mBAAO,CAAC,kDAAuC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA,wBAAwB;;;;;;;;ACxCX;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB,GAAG,sBAAsB;AAC3C,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,sBAAsB;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;AACD,kBAAkB;AAClB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;;;;;;;;ACpDV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,oBAAoB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oEAAoE,oBAAoB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;ACnKjB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mBAAmB,mBAAO,CAAC,UAAU;AACrC,qBAAqB,mBAAO,CAAC,YAAY;AACzC,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C,sCAAsC,kBAAkB;AACxD,oCAAoC,qBAAqB;AACzD,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC,wBAAwB;AAC5D,oCAAoC,mBAAmB;AACvD,qCAAqC,yBAAyB;AAC9D,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI,WAAW;AAChC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;AC3KjB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,4BAA4B,mBAAO,CAAC,4DAA+B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,2BAA2B;AAClG;AACA;AACA,6EAA6E,2BAA2B;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;ACnDd;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,8BAA8B,mBAAO,CAAC,8DAAiC;AACvE,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;ACxEf;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,8BAA8B,mBAAO,CAAC,8DAAiC;AACvE,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;ACvCf;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,iCAAiC,mBAAO,CAAC,oEAAsC;AAC/E,iCAAiC,mBAAO,CAAC,oEAAsC;AAC/E,8BAA8B,mBAAO,CAAC,8DAAgC;AACtE,8BAA8B,mBAAO,CAAC,8DAAgC;AACtE,2BAA2B,mBAAO,CAAC,kDAAoB;AACvD,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,4BAA4B,mBAAO,CAAC,oDAAiC;AACrE,+BAA+B,mBAAO,CAAC,kEAAoC;AAC3E,4BAA4B,mBAAO,CAAC,4DAA8B;AAClE,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B,mBAAO,CAAC,kDAAuC;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA,uBAAuB;;;;;;;;ACpDV;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B,GAAG,uBAAuB;AACrD,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,uBAAuB;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;AACvB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,IAAI,kBAAkB;;;;;;;;ACjDV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD;AACjD;AACA,8BAA8B,uBAAuB,kBAAkB;AACvE,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD;AACjD;AACA,8BAA8B,uBAAuB,kBAAkB;AACvE,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iCAAiC;AAC3E;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,0CAA0C,iCAAiC;AAC3E;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD;AACjD;AACA,8BAA8B,uBAAuB,kBAAkB;AACvE,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,0CAA0C,iCAAiC;AAC3E;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,0CAA0C,iCAAiC;AAC3E;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD;AACjD;AACA,8BAA8B,uBAAuB,kBAAkB;AACvE,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qDAAqD;AACrD;AACA,kCAAkC,uBAAuB,kBAAkB;AAC3E,kCAAkC,4BAA4B;AAC9D;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qDAAqD;AACrD;AACA,kCAAkC,uBAAuB,kBAAkB;AAC3E,kCAAkC,4BAA4B;AAC9D;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA,wCAAwC,SAAS,yBAAyB;AAC1E,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA,mCAAmC,kDAAkD;AACrF,0CAA0C;AAC1C;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qDAAqD;AACrD;AACA,kCAAkC,uBAAuB,kBAAkB;AAC3E,kCAAkC,4BAA4B;AAC9D;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA,yCAAyC,UAAU,yBAAyB;AAC5E,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA,mCAAmC,oDAAoD;AACvF,0CAA0C;AAC1C;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;ACnrBX;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,YAAY,iCAAiC;AAC7C,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,qBAAqB,mBAAO,CAAC,YAAY;AACzC,YAAY,eAAe;AAC3B,mBAAmB,mBAAO,CAAC,UAAU;AACrC,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS,eAAe;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,oBAAoB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,6BAA6B;AAC7B,wCAAwC,6BAA6B;AACrE,2CAA2C,gCAAgC;AAC3E,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qCAAqC,+BAA+B;AACpE,wCAAwC,kCAAkC;AAC1E,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qCAAqC,qCAAqC;AAC1E,wCAAwC,wCAAwC;AAChF,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,oBAAoB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,wCAAwC;AACxC;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yCAAyC,UAAU,qBAAqB;AACxE;AACA;AACA;AACA;AACA,gCAAgC,kBAAkB;AAClD;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,4CAA4C,mBAAmB;AAC/D,6CAA6C,qBAAqB;AAClE,8CAA8C,sBAAsB;AACpE,iDAAiD,yBAAyB;AAC1E,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,wCAAwC;AACxC,wCAAwC,gFAAgF;AACxH,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA,8CAA8C,kCAAkC;AAChF,6CAA6C,iCAAiC;AAC9E,iDAAiD,wBAAwB;AACzE,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qCAAqC,UAAU,qBAAqB;AACpE;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,wCAAwC,mBAAmB;AAC3D,yCAAyC,qBAAqB;AAC9D,0CAA0C,sBAAsB;AAChE,6CAA6C,yBAAyB;AACtE,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,oCAAoC;AACpC,oCAAoC,gFAAgF;AACpH,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,0CAA0C,kCAAkC;AAC5E,yCAAyC,iCAAiC;AAC1E,6CAA6C,wBAAwB;AACrE,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;;ACrcZ;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,qBAAqB,mBAAO,CAAC,YAAY;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,iCAAiC;AACrG;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6BAA6B;AACjE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,sCAAsC,sCAAsC;AAC5E;AACA;AACA;AACA,oBAAoB;AACpB;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oCAAoC;AACtE;AACA;AACA;AACA;AACA,yHAAyH;AACzH;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB;AACrD,sBAAsB;AACtB;AACA;AACA;AACA;AACA,kCAAkC,mBAAmB;AACrD,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oEAAoE,6BAA6B;AACjG;AACA,wDAAwD,6GAA6G;AACrK;AACA;AACA;AACA,iBAAiB,IAAI,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;;AClNZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C,oBAAoB,KAAK;;;;;;;;ACZvD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,yBAAyB,mBAAO,CAAC,gDAAiC;AAClE,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,4BAA4B,mBAAO,CAAC,oDAAqC;AACzE,2BAA2B,mBAAO,CAAC,kDAAmC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB;;;;;;;;ACrBJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,qBAAqB,mBAAO,CAAC,6BAAc;AAC3C,yBAAyB,mBAAO,CAAC,gDAAiC;AAClE,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,4BAA4B,mBAAO,CAAC,oDAAqC;AACzE,2BAA2B,mBAAO,CAAC,kDAAmC;AACtE,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChCa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,6BAA6B,mBAAO,CAAC,gEAAgC;AACrE,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;ACjDd;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,gCAAgC,mBAAO,CAAC,sEAAqC;AAC7E,6BAA6B,mBAAO,CAAC,gEAA+B;AACpE,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,4BAA4B,mBAAO,CAAC,sDAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,uBAAuB;;;;;;;;AC1BV;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,GAAG,uCAAuC,GAAG,oCAAoC;AACzG,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uCAAuC;AACvC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD,wBAAwB;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;AACvB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;AChFa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF,WAAW;AACpG;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;ACjEX;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,0BAA0B,mBAAO,CAAC,+DAA+B;AACjE,iBAAiB,mBAAO,CAAC,gBAAgB;AACzpHhB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,YAAY,0DAA0D;AACtE,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,uBAAuB;AAC5F;AACA;AACA;AACA,qEAAqE;AACrE,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,0EAA0E,6BAA6B;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,4BAA4B;AACrG,8EAA8E,qFAAqF;AACnK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,+CAA+C,cAAc,IAAI,uCAAuC;AACxG;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA,6DAA6D,WAAW;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,qDAAqD,WAAW;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;ACjLb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,6BAA6B,mBAAO,CAAC,qEAAkC;AACvE,0BAA0B,mBAAO,CAAC,+DAA4B;AAC9D,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,8BAA8B,mBAAO,CAAC,0DAAuB;AAC7D,yBAAyB,mBAAO,CAAC,8CAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA,yBAAyB;;;;;;;;ACxCZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,GAAG,yBAAyB,GAAG,6BAA6B;AAC7E,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;AACvB,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,CAAC,IAAI,kBAAkB;AACvB,iBAAiB;AACjB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;;;;;;;;AC1FV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,4BAA4B,mBAAO,CAAC,4DAA+B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AC3Bd;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,4BAA4B,mBAAO,CAAC,4DAA8B;AAClE,+BAA+B,mBAAO,CAAC,kEAAoC;AAC3E,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,4BAA4B,mBAAO,CAAC,sDAA2C;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA,uBAAuB;;;;;;;;ACzBV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mBAAmB,mBAAO,CAAC,UAAU;AACrC,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAA0D;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,8BAA8B,cAAc,8HAA8H;AAC1K;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc,8HAA8H;AAC9K;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,+BAA+B;AACzE;AACA;AACA,iCAAiC;AACjC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mBAAmB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,yGAAyG,QAAQ,4IAA4I;AAC7P;AACA;AACA;AACA;AACA,uHAAuH,sBAAsB;AAC7I;AACA;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,gCAAgC,iBAAiB;AACjD,sCAAsC;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,iCAAiC,gBAAgB;AACjD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,+BAA+B,qDAAqD;AACpF,oCAAoC,8BAA8B;AAClE;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,yGAAyG,QAAQ,4IAA4I;AAC7P;AACA;AACA;AACA;AACA,uHAAuH,sBAAsB;AAC7I;AACA;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;AC7lBX;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,gCAAgC,mBAAO,CAAC,mEAAoC;AAC5E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;AC/CjB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mCAAmC,mBAAO,CAAC,0EAAwC;AACnF,gCAAgC,mBAAO,CAAC,mEAAiC;AACzE,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,+BAA+B,mBAAO,CAAC,0DAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,0BAA0B;;;;;;;;ACxBb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;;;;;;;;AC1CV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,WAAW;AAC9F;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,kBAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AC7Cd;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,0BAA0B,mBAAO,CAAC,uDAA8B;AAChE,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;AChDX;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,4BAA4B,mBAAO,CAAC,6DAAiC;AACrE,0BAA0B,mBAAO,CAAC,uDAA2B;AAC7D,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,yBAAyB,mBAAO,CAAC,8CAAkB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,qBAAqB;;;;;;;;ACxBR;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB,GAAG,cAAc;AACtC,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,mBAAmB,mBAAO,CAAC,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,cAAc;AACd,qBAAqB;;;;;;;;AC3BR;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,WAAW;AACxF;AACA;AACA;AACA,wCAAwC;AACxC,0CAA0C,aAAa,YAAY;AACnE;AACA;AACA,yDAAyD,WAAW;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;;;;;;;AC9BT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C,oBAAoB,KAAK;;;;;;;;ACXvD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,8BAA8B,mBAAO,CAAC,0DAA2C;AACjF,yBAAyB,mBAAO,CAAC,8CAA+B;AAChE,+BAA+B,mBAAO,CAAC,0DAA2C;AAClF,4BAA4B,mBAAO,CAAC,sDAAuC;AAC3E,2BAA2B,mBAAO,CAAC,kDAAmC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB;;;;;;;;ACvBJ;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,qBAAqB,mBAAO,CAAC,6BAAc;AAC3C,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,8BAA8B,mBAAO,CAAC,0DAA2C;AACjF,yBAAyB,mBAAO,CAAC,8CAA+B;AAChE,+BAA+B,mBAAO,CAAC,0DAA2C;AAClF,4BAA4B,mBAAO,CAAC,sDAAuC;AAC3E,2BAA2B,mBAAO,CAAC,kDAAmC;AACtE,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;;;;;;;ACtCa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,6BAA6B,mBAAO,CAAC,0DAAkC;AACvE,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG,0DAA0D;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AC9Cd;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,6BAA6B,mBAAO,CAAC,0DAAkC;AACvE,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;AC/Dd;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,gCAAgC,mBAAO,CAAC,gEAAqC;AAC7E,gCAAgC,mBAAO,CAAC,gEAAqC;AAC7E,6BAA6B,mBAAO,CAAC,0DAA+B;AACpE,6BAA6B,mBAAO,CAAC,0DAA+B;AACpE,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,sBAAsB,mBAAO,CAAC,0CAAe;AAC7C,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,kBAAkB;;;;;;;;ACtCL;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,GAAG,kBAAkB;AAC7C,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC,IAAI,kBAAkB;AACvB,wBAAwB;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;;;;;;;;AChCV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC,wBAAwB,2BAA2B;AACnD;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA;AACA,0JAA0J;AAC1J;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;AC/QX;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,YAAY;AACzC,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;ACtEX;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAoH,0DAA0D;AAC9K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACxClB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;AClElB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,uBAAuB,mBAAO,CAAC,kDAAyC;AACxE,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B,mBAAO,CAAC,kDAAmB;AACrD,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,sBAAsB;;;;;;;;ACvCT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B,GAAG,iCAAiC,GAAG,yBAAyB;AAC7F,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD,iCAAiC;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;AACD,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;AC9DY;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,+BAA+B,kCAAkC;AACjE;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,gBAAgB;AAC7C,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,mCAAmC,eAAe;AAClD,qCAAqC,qBAAqB;AAC1D,sCAAsC,SAAS,gCAAgC;AAC/E,uCAAuC,SAAS,sCAAsC;AACtF,uCAAuC,oCAAoC;AAC3E,uCAAuC,oCAAoC;AAC3E,6CAA6C,0CAA0C;AACvF,4CAA4C,yCAAyC;AACrF,sCAAsC,mCAAmC;AACzE,qCAAqC,kCAAkC;AACvE,qCAAqC,kCAAkC;AACvE;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,kCAAkC;AACvE,mCAAmC,gCAAgC;AACnE,sCAAsC,mCAAmC;AACzE,uCAAuC,8CAA8C;AACrF,uCAAuC,oCAAoC;AAC3E,uCAAuC,oCAAoC;AAC3E,6CAA6C,0CAA0C;AACvF,4CAA4C,yCAAyC;AACrF,sCAAsC,mCAAmC;AACzE,qCAAqC,kCAAkC;AACvE,qCAAqC,kCAAkC;AACvE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG;AAChG;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA,0JAA0J;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;AC7Wf;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;AC9Ef;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,2EAA2E,2BAA2B;AACtG;AACA;AACA;AACA;AACA;AACA,gFAAgF,2BAA2B;AAC3G;AACA;AACA,yEAAyE,2BAA2B;AACpG;AACA;AACA,6EAA6E,2BAA2B;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACtElB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,iCAAiC,mBAAO,CAAC,kEAAsC;AAC/E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzlB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,kCAAkC;AAC7D;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA,qCAAqC;AACrC,qBAAqB;AACrB;AACA,qCAAqC;AACrC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,sCAAsC,kBAAkB;AACxD;AACA;AACA,8CAA8C,0BAA0B,kBAAkB;AAC1F,8CAA8C,+BAA+B;AAC7E;AACA,qCAAqC;AACrC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,iCAAiC;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oDAAoD;AAChG,6BAA6B;AAC7B,8BAA8B,oDAAoD;AAClF;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA,4CAA4C,oDAAoD;AAChG,6BAA6B;AAC7B;AACA;AACA,sCAAsC,oDAAoD;AAC1F;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yCAAyC,kCAAkC;AAC3E,yCAAyC,kCAAkC;AAC3E;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,qDAAqD;AACrD,qCAAqC;AACrC;AACA;AACA,qDAAqD;AACrD,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,8BAA8B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,4CAA4C;AACrF;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,wCAAwC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,kCAAkC;AAC3E;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,4CAA4C;AACrF;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,wCAAwC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,kCAAkC;AAC3E;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kCAAkC;AAC9E;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA,yCAAyC,4CAA4C;AACrF;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,sCAAsC,0CAA0C;AAChF;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;AC3+Bf;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G,WAAW;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;;;;;;;;ACrGf;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,iCAAiC,mBAAO,CAAC,kEAAmC;AAC5E,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,oCAAoC,mBAAO,CAAC,wEAAyC;AACrF,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B,mBAAO,CAAC,kDAAmB;AACrD,uBAAuB,mBAAO,CAAC,kDAAyC;AACxE,yBAAyB,mBAAO,CAAC,qDAAgC;AACjE,wBAAwB,mBAAO,CAAC,8CAAyB;AACzD,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D,sBAAsB,mBAAO,CAAC,0CAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,sBAAsB;;;;;;;;ACnFT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,kBAAkB,GAAG,yBAAyB,GAAG,0BAA0B;AACpG,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,0BAA0B;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;AACD,yBAAyB;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;AACvB,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC,IAAI,kBAAkB;AACvB,sBAAsB;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,IAAI,kBAAkB;;;;;;;;AC1EV;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,+BAA+B,mBAAO,CAAC,8DAAoC;AAC3E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,kGAAkG,0DAA0D;AAC5J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG,0DAA0D;AACjK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;;;;;;;ACzGhB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,+BAA+B,mBAAO,CAAC,8DAAoC;AAC3E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;;;;;;;AChEhB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,uBAAuB,kBAAkB;AACvE,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,8BAA8B;AAC9D;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,gCAAgC,2BAA2B;AAC3D;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B,gCAAgC,8BAA8B;AAC9D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD,8BAA8B,4BAA4B;AAC1D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,0BAA0B,kBAAkB;AAClF,sCAAsC,+BAA+B;AACrE;AACA,6BAA6B;AAC7B,gCAAgC,8BAA8B;AAC9D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qJAAqJ;AACrJ,yKAAyK;AACzK,qJAAqJ;AACrJ,oKAAoK;AACpK,+JAA+J;AAC/J;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,yCAAyC,SAAS,eAAe;AACjE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2CAA2C,QAAQ,YAAY;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,qCAAqC,6BAA6B;AAClE,wCAAwC,gCAAgC;AACxE,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,qCAAqC,qCAAqC;AAC1E,wCAAwC,wCAAwC;AAChF,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC;AACpC;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qCAAqC,UAAU,qBAAqB;AACpE;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;AAC9C;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,wCAAwC,mBAAmB;AAC3D,yCAAyC,qBAAqB;AAC9D,0CAA0C,sBAAsB;AAChE,6CAA6C,yBAAyB;AACtE,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA,oCAAoC;AACpC,oCAAoC,gFAAgF;AACpH,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA,0CAA0C,kCAAkC;AAC5E,yCAAyC,iCAAiC;AAC1E,6CAA6C,wBAAwB;AACrE,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,8BAA8B,kBAAkB;AAChD;AACA;AACA,sCAAsC,uBAAuB,kBAAkB;AAC/E,sCAAsC,4BAA4B;AAClE;AACA,6BAA6B;AAC7B,gCAAgC,2BAA2B;AAC3D;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,qBAAqB;AAC1D,mCAAmC,eAAe;AAClD,oCAAoC,8BAA8B;AAClE,kCAAkC,4BAA4B;AAC9D,oCAAoC,8BAA8B;AAClE,qCAAqC,+BAA+B;AACpE,yCAAyC,mCAAmC;AAC5E,4CAA4C,sCAAsC;AAClF,kCAAkC,4BAA4B;AAC9D;AACA;AACA,yBAAyB;AACzB,qCAAqC,qBAAqB;AAC1D;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,kCAAkC;AACvE,mCAAmC,gCAAgC;AACnE,oCAAoC,iCAAiC;AACrE,kCAAkC,+BAA+B;AACjE,oCAAoC,iCAAiC;AACrE,yCAAyC,sCAAsC;AAC/E,4CAA4C,yCAAyC;AACrF,kCAAkC,+BAA+B;AACjE,qCAAqC,kCAAkC;AACvE,uCAAuC,iBAAiB,oCAAoC,OAAO;AACnG,qCAAqC,kCAAkC;AACvE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAAkH;AAClH;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;AC5zBb;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,mBAAmB,mBAAO,CAAC,UAAU;AACrC,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,qBAAqB,mBAAO,CAAC,YAAY;AACzC,mBAAmB,mBAAO,CAAC,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,oCAAoC,6BAA6B;AACjE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,sCAAsC,uCAAuC;AAC7E;AACA;AACA;AACA,iBAAiB;AACjB;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,6EAA6E,WAAW;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,SAAS;AAC7C,oCAAoC,qBAAqB;AACzD,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA,oCAAoC,wBAAwB;AAC5D,oCAAoC,mBAAmB;AACvD,qCAAqC,yBAAyB;AAC9D,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gCAAgC,4EAA4E;AAC5G;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI,WAAW;AACpC;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,aAAa,GAAG,UAAU;AAChE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;AC5Qb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,kCAAkC,mBAAO,CAAC,oEAAuC;AACjF,kCAAkC,mBAAO,CAAC,oEAAuC;AACjF,+BAA+B,mBAAO,CAAC,8DAAiC;AACxE,+BAA+B,mBAAO,CAAC,8DAAiC;AACxE,uBAAuB,mBAAO,CAAC,uCAA4B;AAC3D,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,wBAAwB,mBAAO,CAAC,8CAAiB;AACjD,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D,0BAA0B,mBAAO,CAAC,kDAA6B;AAC/D,sBAAsB,mBAAO,CAAC,0CAAqB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,oBAAoB;;;;;;;;AC5DP;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,2BAA2B,GAAG,sBAAsB,GAAG,uBAAuB;AACxG,mBAAmB,mBAAO,CAAC,UAAU;AACrC,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,uBAAuB;AACvB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD,sBAAsB;AACtB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;AACD,2BAA2B;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,IAAI,kBAAkB;AACvB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;AChFY;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,mBAAmB,mBAAO,CAAC,UAAU;AACrC,qBAAqB;AACrB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA,CAAC;;;;;;;;AC3BY;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC;AAClC,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,qCAAqC,mBAAO,CAAC,0EAAwC;AACrF,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;;;;;;;ACtCrB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC;AAClC,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,qCAAqC,mBAAO,CAAC,0EAAwC;AACrF,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;;;;;;;ACxCrB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa,IAAI,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gEAAgE,IAAI,sBAAsB;AAC1F;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACjDlB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B;AAC/B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,+BAAuB;AACtD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE,0BAA0B,mBAAO,CAAC,iBAAiB;AACnD,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,IAAI,sBAAsB;AAClG;AACA,wDAAwD,IAAI,sBAAsB;AAClF;AACA;AACA;AACA;AACA;AACA,wEAAwE,IAAI,sBAAsB;AAClG;AACA;AACA,uDAAuD,GAAG,qBAAqB;AAC/E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,IAAI,sBAAsB;AAC9E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;ACtDlB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,wCAAwC,mBAAO,CAAC,gFAA6C;AAC7F,wCAAwC,mBAAO,CAAC,gFAA6C;AAC7F,qCAAqC,mBAAO,CAAC,0EAAuC;AACpF,qCAAqC,mBAAO,CAAC,0EAAuC;AACpF,uBAAuB,mBAAO,CAAC,kDAAyC;AACxE,uBAAuB,mBAAO,CAAC,+BAAoB;AACnD,yBAAyB,mBAAO,CAAC,qDAAkB;AACnD,2BAA2B,mBAAO,CAAC,0CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,yBAAyB;;;;;;;;AC3BZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C,oBAAoB,KAAK;;;;;;;;ACnBvD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,8BAA8B,mBAAO,CAAC,0DAA2C;AACjF,wBAAwB,mBAAO,CAAC,8CAA+B;AAC/D,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,sBAAsB,mBAAO,CAAC,0CAA2B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iBAAiB;;;;;;;;ACvBJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,qBAAqB,mBAAO,CAAC,6BAAc;AAC3C,8BAA8B,mBAAO,CAAC,0DAA2C;AACjF,wBAAwB,mBAAO,CAAC,8CAA+B;AAC/D,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,0BAA0B,mBAAO,CAAC,kDAAmC;AACrE,sBAAsB,mBAAO,CAAC,0CAA2B;AACzD,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACrCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,sDAAwB;AACrD,qBAAqB,mBAAO,CAAC,0DAA4B;AACzD,qBAAqB,mBAAO,CAAC,0DAA4B;AACzD,qBAAqB,mBAAO,CAAC,kDAAoB;;;;;;;;ACNpC;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,eAAe,mBAAO,CAAC,MAAM;AAC7B,4CAA4C,mBAAO,CAAC,+CAAa;AACjE,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE,4BAA4B,mBAAO,CAAC,gEAA8B;AAClE,uBAAuB,mBAAO,CAAC,kDAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB;;;;;;;;ACpDT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,kBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;AC7BY;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB,GAAG,kBAAkB,GAAG,cAAc,GAAG,oBAAoB;AAClF,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,2CAA2C,mBAAO,CAAC,UAAU;AAC7D,kDAAkD,mBAAO,CAAC,iBAAiB;AAC3E,4BAA4B,mBAAO,CAAC,gEAA8B;AAClE,eAAe,mBAAO,CAAC,MAAM;AAC7B,yBAAyB,mBAAO,CAAC,0DAAwB;AACzD,mBAAmB,mBAAO,CAAC,UAAU;AACrC,oBAAoB;AACpB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,sBAAsB,GAAG,uBAAuB,GAAG,oCAAoC,KAAK,iBAAiB;AACjL;AACA;AACA,oBAAoB,oBAAoB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,gCAAgC,cAAc;AAC9C;AACA;AACA;AACA,qBAAqB;AACrB;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA,gCAAgC,6FAA6F;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;;;;;;;ACzJa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,mBAAmB,mBAAO,CAAC,kBAAkB;AAC7C,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,eAAe,mBAAO,CAAC,MAAM;AAC7B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,YAAY,gBAAgB;AAC5B,YAAY,UAAU;AACtB,aAAa,mBAAO,CAAC,MAAM;AAC3B,mBAAmB,mBAAO,CAAC,UAAU;AACrC,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,eAAe;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,aAAa,YAAY,wIAAwI;AACnP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qFAAqF,aAAa,YAAY,mIAAmI;AACjP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;;AChHV;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,yBAAyB,GAAG,mBAAmB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC,mBAAmB,KAAK;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD,yBAAyB,KAAK;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD,yBAAyB,KAAK;;;;;;;;AClDtE;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,gEAA+B;AAC5D,qBAAqB,mBAAO,CAAC,+DAA8B;AAC3D,qBAAqB,mBAAO,CAAC,gEAA+B;AAC5D,qBAAqB,mBAAO,CAAC,kEAAiC;AAC9D,qBAAqB,mBAAO,CAAC,oEAAmC;AAChE,qBAAqB,mBAAO,CAAC,mEAAkC;AAC/D,qBAAqB,mBAAO,CAAC,wDAAuB;AACpD,qBAAqB,mBAAO,CAAC,yEAAwC;AACrE,qBAAqB,mBAAO,CAAC,yEAAwC;AACrE,qBAAqB,mBAAO,CAAC,0EAAyC;AACtE,qBAAqB,mBAAO,CAAC,8EAA6C;AAC1E,qBAAqB,mBAAO,CAAC,uEAAsC;;;;;;;;ACdtD;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,GAAG,aAAa;AACxC,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,0BAA0B,mBAAO,CAAC,gEAAmB;AACrD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,eAAe,mBAAO,CAAC,cAAc;AACrC,qBAAqB,mBAAO,CAAC,YAAY;AACzC,8BAA8B,mBAAO,CAAC,oEAAuB;AAC7D,YAAY,mBAAmB;AAC/B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;AC9EX;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,iCAAiC,mBAAO,CAAC,cAAc;AACvD,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,gCAAgC,mBAAO,CAAC,wEAAsE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oEAAoE,iBAAiB;AACrF;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;AC3CL;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,8BAA8B,mBAAO,CAAC,oEAAuB;AAC7D,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE,0BAA0B,mBAAO,CAAC,gEAAmB;AACrD,eAAe,mBAAO,CAAC,cAAc;AACrC,6BAA6B,mBAAO,CAAC,mEAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,qBAAqB;;;;;;;;AC1BR;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,QAAQ;AACjC,oCAAoC,mBAAO,CAAC,QAAQ;AACpD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,8BAA8B,mBAAO,CAAC,oEAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;;;;;;;AChCT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,oBAAoB,GAAG,mBAAmB,GAAG,oBAAoB;AACvF,oBAAoB;AACpB,mBAAmB;AACnB,oBAAoB;AACpB,mBAAmB;;;;;;;;ACNN;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,uBAAuB,mBAAO,CAAC,0DAAgB;AAC/C,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;;;;;;;ACpCT;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,yDAAe;AAC5C,qBAAqB,mBAAO,CAAC,6DAAmB;AAChD,qBAAqB,mBAAO,CAAC,qEAA2B;AACxD,qBAAqB,mBAAO,CAAC,sEAA4B;;;;;;;;ACN5C;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mBAAmB,mBAAO,CAAC,kBAAkB;AAC7C,yBAAyB,mBAAO,CAAC,uEAA6B;AAC9D,6BAA6B,mBAAO,CAAC,2EAAiC;AACtE,+BAA+B,mBAAO,CAAC,6EAAmC;AAC1E,yBAAyB,mBAAO,CAAC,2BAA2B;AAC5D,yBAAyB,mBAAO,CAAC,4DAAkB;AACnD,cAAc,mBAAO,CAAC,aAAa;AACnC,0BAA0B,mBAAO,CAAC,6DAAmB;AACrD,uBAAuB,mBAAO,CAAC,0DAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,kBAAkB;;;;;;;;ACjDL;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,uBAAuB,mBAAO,CAAC,cAAc;AAC7C,iBAAiB,mBAAO,CAAC,QAAQ;AACjC,yBAAyB,mBAAO,CAAC,4DAAkB;AACnD,0BAA0B,mBAAO,CAAC,6DAAmB;AACrD,cAAc,mBAAO,CAAC,aAAa;AACnC,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;ACjHN;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mBAAmB,mBAAO,CAAC,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;ACXX;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mBAAmB,mBAAO,CAAC,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;;ACXZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mBAAmB,mBAAO,CAAC,kBAAkB;AAC7C,uBAAuB,mBAAO,CAAC,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,6CAA6C,cAAc,cAAc;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;ACzBb;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB;AACxB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mBAAmB,mBAAO,CAAC,kBAAkB;AAC7C,uBAAuB,mBAAO,CAAC,cAAc;AAC7C,0BAA0B,mBAAO,CAAC,6DAAoB;AACtD,yBAAyB,mBAAO,CAAC,4DAAmB;AACpD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;AC5BX;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB;AACrB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,mBAAmB,mBAAO,CAAC,kBAAkB;AAC7C,yBAAyB,mBAAO,CAAC,gBAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;;;;;;;ACrBR;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,QAAQ;AACjC,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,+BAA+B,mBAAO,CAAC,0EAAwB;AAC/D;AACA;AACA;AACA,KAAK;AACL,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,kBAAkB,mBAAO,CAAC,SAAS;AACnC,2BAA2B,mBAAO,CAAC,0BAA0B;AAC7D,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE,0BAA0B,mBAAO,CAAC,8EAA4B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qDAAqD;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,mCAAmC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;;;;;;;ACjFhB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,kCAAkC,mBAAO,CAAC,6EAA2B;AACrE,+BAA+B,mBAAO,CAAC,0EAAwB;AAC/D,0BAA0B,mBAAO,CAAC,8EAA4B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yBAAyB;;;;;;;;AClBZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,8BAA8B,mBAAO,CAAC,yEAAuB;AAC7D,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,yBAAyB;AACzB;AACA;AACA;AACA;AACA;;;;;;;;ACVa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,iCAAiC,mBAAO,CAAC,UAAU;AACnD,mBAAmB,mBAAO,CAAC,UAAU;AACrC,eAAe,mBAAO,CAAC,MAAM;AAC7B,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;ACjDb;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,eAAe,mBAAO,CAAC,mBAAmB;AAC1C,8CAA8C,mBAAO,CAAC,0BAA0B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,uBAAuB;AAChF;AACA;AACA;AACA,6BAA6B,sDAAsD;AACnF,6BAA6B,8CAA8C;AAC3E,6BAA6B,4CAA4C;AACzE;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sBAAsB;;;;;;;;ACxDT;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+FAA0B;;;;;;;;ACH1C;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,gBAAgB,mBAAO,CAAC,sEAAqB;AAC7C,iCAAiC,mBAAO,CAAC,8FAA6C;AACtF,eAAe,mBAAO,CAAC,cAAc;AACrC,uBAAuB,mBAAO,CAAC,6EAAsB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA,yBAAyB;;;;;;;;ACxBZ;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iCAAiC;AACjC,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,eAAe,mBAAO,CAAC,MAAM;AAC7B,oBAAoB,mBAAO,CAAC,gBAAgB;AAC5C,uBAAuB,mBAAO,CAAC,6EAAiB;AAChD,uBAAuB,mBAAO,CAAC,8EAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA,wCAAwC,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,GAAG,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;;;;;;;ACpDpB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,mGAA+B;;;;;;;;ACH/C;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa;AACb,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;;;;;;;ACtBA;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,6BAA6B;AAC7B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,gBAAgB,mBAAO,CAAC,sEAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;;;;;;;AClChB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,8FAA0B;;;;;;;;ACH1C;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,4BAA4B;AAC5B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,4BAA4B;;;;;;;;ACdf;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,8DAA4B;AACzD,qBAAqB,mBAAO,CAAC,uDAAqB;AAClD;AACA,qBAAqB,mBAAO,CAAC,8DAA4B;AACzD,qBAAqB,mBAAO,CAAC,oEAA4D;AACzF,qBAAqB,mBAAO,CAAC,gEAA8B;AAC3D,qBAAqB,mBAAO,CAAC,wEAAsC;AACnE;AACA,qBAAqB,mBAAO,CAAC,0DAAwB;AACrD,qBAAqB,mBAAO,CAAC,qDAAmB;;;;;;;;ACZnC;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,eAAe,mBAAO,CAAC,MAAM;AAC7B,gDAAgD,mBAAO,CAAC,uDAAiB;AACzE,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,qBAAqB,mBAAO,CAAC,YAAY;AACzC,gCAAgC,mBAAO,CAAC,wEAAkC;AAC1E,sBAAsB,mBAAO,CAAC,8DAAwB;AACtD,8BAA8B,mBAAO,CAAC,oEAA+D;AACrG,wBAAwB,mBAAO,CAAC,gEAA0B;AAC1D,eAAe,mBAAO,CAAC,cAAc;AACrC,6BAA6B,mBAAO,CAAC,4DAAsB;AAC3D,kCAAkC,mBAAO,CAAC,iEAA2B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B;AAC1B;;;;;;;;ACjEa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,4CAA4C,mBAAO,CAAC,WAAW;AAC/D,+CAA+C,mBAAO,CAAC,cAAc;AACrE,eAAe,mBAAO,CAAC,cAAc;AACrC,yCAAyC,mBAAO,CAAC,QAAQ;AACzD,0CAA0C,mBAAO,CAAC,SAAS;AAC3D,gCAAgC,mBAAO,CAAC,wEAAkC;AAC1E,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,eAAe,mBAAO,CAAC,MAAM;AAC7B,gCAAgC,mBAAO,CAAC,IAAI;AAC5C;AACA,kBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D,2BAA2B,aAAa;AACxC;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA,YAAY;AACZ;AACA,WAAW;AACX,sDAAsD,YAAY;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,YAAY;AACjE,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA,cAAc;AACd,YAAY;AACZ,sDAAsD,YAAY;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe;AACjE,kDAAkD,eAAe;AACjE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;;;;;;;ACzNJ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,8BAA8B;AAC9B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;;;;;;;;ACjEjB;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB;AACzB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,eAAe,mBAAO,CAAC,MAAM;AAC7B,gCAAgC,mBAAO,CAAC,wEAAkC;AAC1E,qBAAqB,mBAAO,CAAC,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;;;;;;;ACpDZ;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,wBAAwB,mBAAO,CAAC,eAAe;AAC/C,uCAAuC,mBAAO,CAAC,qBAAqB;AACpE;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA,yEAAyE,IAAI;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,IAAI;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4EAA4E,YAAY;AACxF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4EAA4E,YAAY;AACxF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;AC9EL;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B;AAC3B,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,oBAAoB,mBAAO,CAAC,WAAW;AACvC,sBAAsB,mBAAO,CAAC,8DAAyB;AACvD,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,UAAU;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;ACrEd;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,iBAAiB,mBAAO,CAAC,gBAAgB;AACzC,iBAAiB,mBAAO,CAAC,QAAQ;AACjC,mBAAmB,mBAAO,CAAC,UAAU;AACrC,oCAAoC,mBAAO,CAAC,MAAM;AAClD,iCAAiC,mBAAO,CAAC,UAAU;AACnD,gCAAgC,mBAAO,CAAC,wEAAyB;AACjE,qBAAqB,mBAAO,CAAC,+BAA0B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B,GAAG,4BAA4B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;AC/GP;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,gDAA0B;AACvD,qBAAqB,mBAAO,CAAC,kDAA4B;AACzD,qBAAqB,mBAAO,CAAC,mDAA6B;AAC1D,qBAAqB,mBAAO,CAAC,iDAA2B;AACxD,qBAAqB,mBAAO,CAAC,iDAA2B;AACxD,qBAAqB,mBAAO,CAAC,uDAAiC;AAC9D,qBAAqB,mBAAO,CAAC,+CAAyB;AACtD,qBAAqB,mBAAO,CAAC,0CAAoB;AACjD,qBAAqB,mBAAO,CAAC,iDAA2B;AACxD,qBAAqB,mBAAO,CAAC,0DAAoC;AACjE,qBAAqB,mBAAO,CAAC,4DAAsC;AACnE,qBAAqB,mBAAO,CAAC,6DAAuC;AACpE,qBAAqB,mBAAO,CAAC,2DAAqC;AAClE,qBAAqB,mBAAO,CAAC,0DAAoC;AACjE,qBAAqB,mBAAO,CAAC,iEAA2C;AACxE,qBAAqB,mBAAO,CAAC,yDAAmC;AAChE,qBAAqB,mBAAO,CAAC,oDAA8B;AAC3D,qBAAqB,mBAAO,CAAC,gDAA0B;AACvD,qBAAqB,mBAAO,CAAC,kDAA4B;AACzD,qBAAqB,mBAAO,CAAC,uDAAiC;AAC9D,qBAAqB,mBAAO,CAAC,0CAAoB;AACjD,qBAAqB,mBAAO,CAAC,kDAA4B;AACzD,qBAAqB,mBAAO,CAAC,gDAA0B;AACvD,qBAAqB,mBAAO,CAAC,gDAA0B;AACvD,qBAAqB,mBAAO,CAAC,wDAAkC;;;;;;;;AC3BlD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B,GAAG,sBAAsB,GAAG,2BAA2B,GAAG,2BAA2B,GAAG,2BAA2B,GAAG,4BAA4B,GAAG,2BAA2B;AAC3M;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD,2BAA2B,KAAK;AACzF;AACA;AACA;AACA;AACA,CAAC,0DAA0D,4BAA4B,KAAK;AAC5F;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD,2BAA2B,KAAK;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD,2BAA2B,KAAK;AACzF;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD,2BAA2B,KAAK;AACzF;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD,2BAA2B,KAAK;;;;;;;;AC9C5E;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB,GAAG,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C,qBAAqB,KAAK;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C,qBAAqB,KAAK;;;;;;;;ACf1D;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B,GAAG,2BAA2B;AACzD;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD,2BAA2B,KAAK;AACzF;AACA;AACA;AACA;AACA;AACA,CAAC,wDAAwD,2BAA2B,KAAK;;;;;;;;ACd5E;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B,GAAG,4BAA4B,GAAG,4BAA4B,GAAG,6BAA6B;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4DAA4D,6BAA6B,KAAK;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D,4BAA4B,KAAK;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0DAA0D,4BAA4B,KAAK;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD,0BAA0B,KAAK;;;;;;;;ACnCzE;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,yBAAyB;AACrD;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD,yBAAyB,KAAK;AACnF;AACA;AACA;AACA;AACA,CAAC,oDAAoD,yBAAyB,KAAK;;;;;;;;ACbtE;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB,GAAG,kBAAkB,GAAG,sBAAsB,GAAG,sBAAsB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC,kBAAkB,KAAK;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC,kBAAkB,KAAK;;;;;;;;AC/BjD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,GAAG,+BAA+B,GAAG,gCAAgC,GAAG,gCAAgC,GAAG,sBAAsB,GAAG,sBAAsB;AACzL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA,CAAC,kEAAkE,gCAAgC,KAAK;AACxG;AACA;AACA;AACA,CAAC,kEAAkE,gCAAgC,KAAK;AACxG;AACA;AACA;AACA,CAAC,gEAAgE,+BAA+B,KAAK;AACrG;AACA;AACA;AACA,CAAC,gEAAgE,+BAA+B,KAAK;;;;;;;;ACvCxF;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,sBAAsB,GAAG,kBAAkB,GAAG,0BAA0B,GAAG,0BAA0B,GAAG,wBAAwB,GAAG,sBAAsB,GAAG,oBAAoB,GAAG,wBAAwB,GAAG,sBAAsB,GAAG,wBAAwB,GAAG,yBAAyB,GAAG,sBAAsB;AAChV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,oDAAoD,yBAAyB,KAAK;AACnF;AACA;AACA;AACA;AACA,CAAC,kDAAkD,wBAAwB,KAAK;AAChF;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kDAAkD,wBAAwB,KAAK;AAChF;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C,oBAAoB,KAAK;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kDAAkD,wBAAwB,KAAK;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD,0BAA0B,KAAK;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD,0BAA0B,KAAK;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC,kBAAkB,KAAK;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8CAA8C,sBAAsB,KAAK;AAC1E;AACA;AACA;AACA;AACA,CAAC,oDAAoD,yBAAyB,KAAK;;;;;;;;AC1HtE;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,qBAAqB,GAAG,4BAA4B;AAC7E,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;;;;;;;ACxBa;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,+BAA+B,GAAG,oCAAoC,GAAG,oBAAoB,GAAG,0BAA0B,GAAG,mBAAmB,GAAG,kBAAkB,GAAG,2BAA2B,GAAG,uBAAuB;AAC7N;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B;AAC3B;AACA,kBAAkB;AAClB;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,cAAc;AAC3B,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,2DAA2D,4CAA4C;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,oCAAoC,KAAK;AACjG,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;;;;;;;;AC7IlB;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,yBAAyB,GAAG,2BAA2B,GAAG,0BAA0B,GAAG,4BAA4B,GAAG,yBAAyB,GAAG,2BAA2B,GAAG,wBAAwB,GAAG,0BAA0B;AACrO,mBAAmB,mBAAO,CAAC,UAAU;AACrC,sBAAsB,mBAAO,CAAC,aAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,wBAAwB;AACxB;AACA,mEAAmE,iBAAiB;AACpF;AACA,2BAA2B;AAC3B;AACA,iEAAiE,iBAAiB;AAClF;AACA,yBAAyB;AACzB;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;;;;;;;AC3Ca;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,mBAAmB,GAAG,iBAAiB,GAAG,mBAAmB,GAAG,sBAAsB,GAAG,gBAAgB;AAC/H,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,oCAAoC,mBAAO,CAAC,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB;;;;;;;;ACpFN;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB;AACpE;AACA;AACA;AACA,iBAAiB,sDAAsD;AACvE,iBAAiB,8CAA8C;AAC/D,iBAAiB,4CAA4C;AAC7D;AACA,eAAe,iCAAiC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,iBAAiB;;;;;;;;AC/CjtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,mBAAO,CAAC,OAAO;AAC/B,qBAAqB,mBAAO,CAAC,yBAAkB;AAC/C,2BAA2B,mBAAO,CAAC,2CAAgC;AACnE;AACA;AACA;AACA;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA,KAAK;AACL;AACA","sources":["webpack://corunna/./src/app/app.module.ts","webpack://corunna/./src/app/cpt/common/game/controllers/game-query.controller.ts","webpack://corunna/./src/app/cpt/common/game/controllers/game-store.controller.ts","webpack://corunna/./src/app/cpt/common/game/game.module.ts","webpack://corunna/./src/app/cpt/common/game/game.schema.ts","webpack://corunna/./src/app/cpt/common/game/services/game-query.service.ts","webpack://corunna/./src/app/cpt/common/game/services/game-store.service.ts","webpack://corunna/./src/app/cpt/common/services/controllers/services-query.controller.ts","webpack://corunna/./src/app/cpt/common/services/controllers/services-store.controller.ts","webpack://corunna/./src/app/cpt/common/services/services.module.ts","webpack://corunna/./src/app/cpt/common/services/services.schema.ts","webpack://corunna/./src/app/cpt/common/services/services/services-query.service.ts","webpack://corunna/./src/app/cpt/common/services/services/services-store.service.ts","webpack://corunna/./src/app/cpt/common/settings/controllers/settings-query.controller.ts","webpack://corunna/./src/app/cpt/common/settings/controllers/settings-store.controller.ts","webpack://corunna/./src/app/cpt/common/settings/services/settings-query.service.ts","webpack://corunna/./src/app/cpt/common/settings/services/settings-store.service.ts","webpack://corunna/./src/app/cpt/common/settings/settings-module.ts","webpack://corunna/./src/app/cpt/common/settings/settings.schema.ts","webpack://corunna/./src/app/cpt/common/stocks/controllers/stocks-query.controller.ts","webpack://corunna/./src/app/cpt/common/stocks/controllers/stocks-store.controller.ts","webpack://corunna/./src/app/cpt/common/stocks/services/stocks-query.service.ts","webpack://corunna/./src/app/cpt/common/stocks/services/stocks-store.service.ts","webpack://corunna/./src/app/cpt/common/stocks/stocks.module.ts","webpack://corunna/./src/app/cpt/common/stocks/stocks.schema.ts","webpack://corunna/./src/app/cpt/common/user-account/account.schema.ts","webpack://corunna/./src/app/cpt/common/user-account/controllers/user-account-query.controller.ts","webpack://corunna/./src/app/cpt/common/user-account/controllers/user-account-store.controller.ts","webpack://corunna/./src/app/cpt/common/user-account/services/user-account-query.service.ts","webpack://corunna/./src/app/cpt/common/user-account/services/user-account-store.service.ts","webpack://corunna/./src/app/cpt/common/user-account/user-account.module.ts","webpack://corunna/./src/app/cpt/cpt-db.model.ts","webpack://corunna/./src/app/cpt/cpt.module.ts","webpack://corunna/./src/app/cpt/cpt.routing.ts","webpack://corunna/./src/app/dvt/common/account/account.module.ts","webpack://corunna/./src/app/dvt/common/account/account.schema.ts","webpack://corunna/./src/app/dvt/common/account/controllers/account-query.controller.ts","webpack://corunna/./src/app/dvt/common/account/controllers/account-store.controller.ts","webpack://corunna/./src/app/dvt/common/account/services/account-query.service.ts","webpack://corunna/./src/app/dvt/common/account/services/account-store.service.ts","webpack://corunna/./src/app/dvt/common/settings/controllers/settings-query.controller.ts","webpack://corunna/./src/app/dvt/common/settings/controllers/settings-store.controller.ts","webpack://corunna/./src/app/dvt/common/settings/services/settings-query.service.ts","webpack://corunna/./src/app/dvt/common/settings/services/settings-store.service.ts","webpack://corunna/./src/app/dvt/common/settings/settings-module.ts","webpack://corunna/./src/app/dvt/common/settings/settings.schema.ts","webpack://corunna/./src/app/dvt/core/dispensary/controllers/dispensary-query.controller.ts","webpack://corunna/./src/app/dvt/core/dispensary/controllers/dispensary-store.controller.ts","webpack://corunna/./src/app/dvt/core/dispensary/dispensary.module.ts","webpack://corunna/./src/app/dvt/core/dispensary/dispensary.schema.ts","webpack://corunna/./src/app/dvt/core/dispensary/services/dispensary-query.service.ts","webpack://corunna/./src/app/dvt/core/dispensary/services/dispensary-store.service.ts","webpack://corunna/./src/app/dvt/core/inventory/controllers/dashboard.controller.ts","webpack://corunna/./src/app/dvt/core/inventory/controllers/stock-query.controller.ts","webpack://corunna/./src/app/dvt/core/inventory/controllers/stock-store.controller.ts","webpack://corunna/./src/app/dvt/core/inventory/inventory.module.ts","webpack://corunna/./src/app/dvt/core/inventory/inventory.schema.ts","webpack://corunna/./src/app/dvt/core/inventory/services/dashboard.service.ts","webpack://corunna/./src/app/dvt/core/inventory/services/stock-query.service.ts","webpack://corunna/./src/app/dvt/core/inventory/services/stock-store.service.ts","webpack://corunna/./src/app/dvt/dvt-db.model.ts","webpack://corunna/./src/app/dvt/dvt.module.ts","webpack://corunna/./src/app/dvt/dvt.routing.ts","webpack://corunna/./src/app/nix/common/data-entry/controllers/data-entry.controller.ts","webpack://corunna/./src/app/nix/common/data-entry/data-entry.module.ts","webpack://corunna/./src/app/nix/common/data-entry/data-entry.schema.ts","webpack://corunna/./src/app/nix/common/data-entry/services/data-entry.service.ts","webpack://corunna/./src/app/nix/common/user-account/controllers/account.controller.ts","webpack://corunna/./src/app/nix/common/user-account/services/account.service.ts","webpack://corunna/./src/app/nix/common/user-account/user-account.module.ts","webpack://corunna/./src/app/nix/common/user-account/user-account.schema.ts","webpack://corunna/./src/app/nix/core/dashboard/controllers/dashboard.controller.ts","webpack://corunna/./src/app/nix/core/dashboard/dashboard.module.ts","webpack://corunna/./src/app/nix/core/dashboard/services/dashboard.service.ts","webpack://corunna/./src/app/nix/core/data-template/controllers/data-template.controller.ts","webpack://corunna/./src/app/nix/core/data-template/data-template.module.ts","webpack://corunna/./src/app/nix/core/data-template/data-template.schema.ts","webpack://corunna/./src/app/nix/core/data-template/service/data-template.service.ts","webpack://corunna/./src/app/nix/core/sectors/controllers/sector.controller.ts","webpack://corunna/./src/app/nix/core/sectors/sectors.module.ts","webpack://corunna/./src/app/nix/core/sectors/sectors.schema.ts","webpack://corunna/./src/app/nix/core/sectors/service/sectors.service.ts","webpack://corunna/./src/app/nix/nix-db.model.ts","webpack://corunna/./src/app/nix/nix.module.ts","webpack://corunna/./src/app/nix/nix.routing.ts","webpack://corunna/./src/app/rmd/common/game/controllers/game-query.controller.ts","webpack://corunna/./src/app/rmd/common/game/controllers/game-store.controller.ts","webpack://corunna/./src/app/rmd/common/game/game.module.ts","webpack://corunna/./src/app/rmd/common/game/game.schema.ts","webpack://corunna/./src/app/rmd/common/game/services/game-query.service.ts","webpack://corunna/./src/app/rmd/common/game/services/game-store.service.ts","webpack://corunna/./src/app/rmd/common/services/controllers/services-query.controller.ts","webpack://corunna/./src/app/rmd/common/services/controllers/services-store.controller.ts","webpack://corunna/./src/app/rmd/common/services/services.module.ts","webpack://corunna/./src/app/rmd/common/services/services.schema.ts","webpack://corunna/./src/app/rmd/common/services/services/services-query.service.ts","webpack://corunna/./src/app/rmd/common/services/services/services-store.service.ts","webpack://corunna/./src/app/rmd/common/settings/controllers/settings-query.controller.ts","webpack://corunna/./src/app/rmd/common/settings/controllers/settings-store.controller.ts","webpack://corunna/./src/app/rmd/common/settings/services/settings-query.service.ts","webpack://corunna/./src/app/rmd/common/settings/services/settings-store.service.ts","webpack://corunna/./src/app/rmd/common/settings/settings-module.ts","webpack://corunna/./src/app/rmd/common/settings/settings.schema.ts","webpack://corunna/./src/app/rmd/common/stocks/controllers/stocks-query.controller.ts","webpack://corunna/./src/app/rmd/common/stocks/controllers/stocks-store.controller.ts","webpack://corunna/./src/app/rmd/common/stocks/services/stocks-query.service.ts","webpack://corunna/./src/app/rmd/common/stocks/services/stocks-store.service.ts","webpack://corunna/./src/app/rmd/common/stocks/stocks.module.ts","webpack://corunna/./src/app/rmd/common/stocks/stocks.schema.ts","webpack://corunna/./src/app/rmd/common/user-account/account.schema.ts","webpack://corunna/./src/app/rmd/common/user-account/controllers/user-account-query.controller.ts","webpack://corunna/./src/app/rmd/common/user-account/controllers/user-account-store.controller.ts","webpack://corunna/./src/app/rmd/common/user-account/services/user-account-query.service.ts","webpack://corunna/./src/app/rmd/common/user-account/services/user-account-store.service.ts","webpack://corunna/./src/app/rmd/common/user-account/user-account.module.ts","webpack://corunna/./src/app/rmd/rmd-db.model.ts","webpack://corunna/./src/app/rmd/rmd.module.ts","webpack://corunna/./src/app/rmd/rmd.routing.ts","webpack://corunna/../../libs/lib-db-config/src/index.ts","webpack://corunna/../../libs/lib-db-config/src/lib/db-config.module.ts","webpack://corunna/../../libs/lib-db-config/src/lib/db-config.ts","webpack://corunna/../../libs/lib-db-config/src/lib/db.providers.ts","webpack://corunna/../../libs/lib-db-config/src/lib/services/db-config.service.ts","webpack://corunna/../../libs/lib-db-config/src/lib/types/db-model.types.ts","webpack://corunna/../../libs/lib-db-config/src/lib/types/db-models.enum.ts","webpack://corunna/../../libs/lib-nest-modules/src/index.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/account/account-auth.guard.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/account/account-jwt.service.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/account/account.interface.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/account/account.module.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/account/account.service.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/auth.constants.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/auth.controller.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/auth.index.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/auth.interfaces.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/auth.module.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/auth.service.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/guard/accessToken.guard.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/guard/refreshToken.guard.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/strategies/jwt-refresh.strategy.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/strategies/jwt-token.strategy.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/auth/strategies/local.strategy.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/file-manager/file-manager.controller.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/file-manager/file-manager.module.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/file-manager/file-manager.routes.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/file-manager/file-manager.service.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/file-manager/services/printer.service.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/idempotency/domain/repositories/idempotency.repository.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/idempotency/domain/repositories/index.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/idempotency/idempotency.module.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/idempotency/infra/interceptors/idempotency-key.interceptor.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/idempotency/infra/interceptors/index.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/idempotency/infra/redis/redis.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/idempotency/infra/repositories/idempotency.repository.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/idempotency/infra/repositories/index.ts","webpack://corunna/../../libs/lib-nest-modules/src/lib/lib-nest-modules.module.ts","webpack://corunna/../../libs/lib-server-config/src/index.ts","webpack://corunna/../../libs/lib-server-config/src/lib/server-config.module.ts","webpack://corunna/../../libs/lib-server-config/src/lib/server-config.ts","webpack://corunna/../../libs/lib-server-config/src/lib/server-exception.filter.ts","webpack://corunna/../../libs/lib-server-config/src/lib/server.interceptor.ts","webpack://corunna/../../libs/lib-server-config/src/lib/services/cmd.service.ts","webpack://corunna/../../libs/lib-server-config/src/lib/services/server-config.service.ts","webpack://corunna/../../libs/lib-server-config/src/lib/services/store.service.ts","webpack://corunna/../../libs/lib-server-config/src/lib/types/interfaces.ts","webpack://corunna/../../libs/lib-server-config/src/lib/types/types.ts","webpack://corunna/../../libs/lib-x/src/index.ts","webpack://corunna/../../libs/lib-x/src/lib/enums/dispensary.enum.ts","webpack://corunna/../../libs/lib-x/src/lib/enums/enum.account.ts","webpack://corunna/../../libs/lib-x/src/lib/enums/enum.health-program.ts","webpack://corunna/../../libs/lib-x/src/lib/enums/enum.inventory.ts","webpack://corunna/../../libs/lib-x/src/lib/enums/enum.record.ts","webpack://corunna/../../libs/lib-x/src/lib/enums/enum.services.ts","webpack://corunna/../../libs/lib-x/src/lib/enums/enum.settings.ts","webpack://corunna/../../libs/lib-x/src/lib/enums/enum.x.ts","webpack://corunna/../../libs/lib-x/src/lib/enums/planix-routes.ts","webpack://corunna/../../libs/lib-x/src/lib/interfaces/dispensary.interface.ts","webpack://corunna/../../libs/lib-x/src/lib/interfaces/interface.account.ts","webpack://corunna/../../libs/lib-x/src/lib/interfaces/interface.health-program.ts","webpack://corunna/../../libs/lib-x/src/lib/interfaces/interface.inventory.ts","webpack://corunna/../../libs/lib-x/src/lib/interfaces/interface.service.ts","webpack://corunna/../../libs/lib-x/src/lib/interfaces/interface.settings.ts","webpack://corunna/../../libs/lib-x/src/lib/interfaces/interface.x.ts","webpack://corunna/../../libs/lib-x/src/lib/interfaces/record.interface.ts","webpack://corunna/../../libs/lib-x/src/lib/types/type.account.ts","webpack://corunna/../../libs/lib-x/src/lib/types/type.health-program.ts","webpack://corunna/../../libs/lib-x/src/lib/types/type.inventory.ts","webpack://corunna/../../libs/lib-x/src/lib/types/type.x.ts","webpack://corunna/../../libs/lib-x/src/lib/util-fns/arrays.util.ts","webpack://corunna/../../libs/lib-x/src/lib/util-fns/date.util.ts","webpack://corunna/../../libs/lib-x/src/lib/util-fns/math.util.ts","webpack://corunna/../../libs/lib-x/src/lib/util-fns/node-printer.util.ts","webpack://corunna/external commonjs \"@golevelup/nestjs-modules\"","webpack://corunna/external commonjs \"@nestjs/common\"","webpack://corunna/external commonjs \"@nestjs/config\"","webpack://corunna/external commonjs \"@nestjs/core\"","webpack://corunna/external commonjs \"@nestjs/jwt\"","webpack://corunna/external commonjs \"@nestjs/mongoose\"","webpack://corunna/external commonjs \"@nestjs/passport\"","webpack://corunna/external commonjs \"@nestjs/platform-express\"","webpack://corunna/external commonjs \"@nestjs/schedule\"","webpack://corunna/external commonjs \"@nestjs/serve-static\"","webpack://corunna/external commonjs \"@node-escpos/core\"","webpack://corunna/external commonjs \"@node-escpos/usb-adapter\"","webpack://corunna/external commonjs \"@vscode/sudo-prompt\"","webpack://corunna/external commonjs \"cron\"","webpack://corunna/external commonjs \"crypto-js\"","webpack://corunna/external commonjs \"date-fns\"","webpack://corunna/external commonjs \"date-fns-tz\"","webpack://corunna/external commonjs \"electron\"","webpack://corunna/external commonjs \"electron-log\"","webpack://corunna/external commonjs \"express\"","webpack://corunna/external commonjs \"fs-extra\"","webpack://corunna/external commonjs \"helmet\"","webpack://corunna/external commonjs \"jsonwebtoken\"","webpack://corunna/external commonjs \"mongoose\"","webpack://corunna/external commonjs \"mongoose-delete\"","webpack://corunna/external commonjs \"multer\"","webpack://corunna/external commonjs \"nanoid\"","webpack://corunna/external commonjs \"nestjs-cls\"","webpack://corunna/external commonjs \"node-turn\"","webpack://corunna/external commonjs \"passport-jwt\"","webpack://corunna/external commonjs \"passport-local\"","webpack://corunna/external commonjs \"rxjs\"","webpack://corunna/external commonjs \"rxjs/operators\"","webpack://corunna/external commonjs \"tslib\"","webpack://corunna/external node-commonjs \"child_process\"","webpack://corunna/external node-commonjs \"crypto\"","webpack://corunna/external node-commonjs \"os\"","webpack://corunna/external node-commonjs \"path\"","webpack://corunna/webpack/bootstrap","webpack://corunna/./src/main.ts"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AppModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst serve_static_1 = require(\"@nestjs/serve-static\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst rmd_module_1 = require(\"./rmd/rmd.module\");\r\nconst dvt_module_1 = require(\"./dvt/dvt.module\");\r\nconst core_1 = require(\"@nestjs/core\");\r\nconst rmd_routing_1 = require(\"./rmd/rmd.routing\");\r\nconst dvt_routing_1 = require(\"./dvt/dvt.routing\");\r\nconst nix_module_1 = require(\"./nix/nix.module\");\r\nconst nix_routing_1 = require(\"./nix/nix.routing\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst user_account_module_1 = require(\"./nix/common/user-account/user-account.module\");\r\nconst account_service_1 = require(\"./nix/common/user-account/services/account.service\");\r\nconst cpt_module_1 = require(\"./cpt/cpt.module\");\r\nconst cpt_routing_1 = require(\"./cpt/cpt.routing\");\r\n// mongorestore --gzip --archive=salonaDb-15-02-24 --nsFrom=\"d5758e192ddfa55ae19d3f726eb3b9e7.*\" --nsTo=\"RmdSalonaDb.*\"\r\nlet AppModule = class AppModule {\r\n};\r\nAppModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [\r\n            lib_serverConfig_1.ServerConfigModule,\r\n            serve_static_1.ServeStaticModule.forRoot({\r\n                rootPath: lib_serverConfig_1.StoreService.staticSitePath('corunna', true),\r\n                exclude: ['/rmd/*', '/dvt/*', '/nix/*', '/cpt/*'],\r\n            }),\r\n            lib_dbConfig_1.DbConfigModule.register({\r\n                dbConnIndex: lib_dbConfig_1.EDbProvider.dbConn1,\r\n                dbIndex: lib_dbConfig_1.EDbProvider.db1,\r\n                global: true,\r\n            }),\r\n            lib_nest_modules_1.IdempotencyModule,\r\n            nix_module_1.NixModule,\r\n            rmd_module_1.RmdModule,\r\n            dvt_module_1.DvtModule,\r\n            cpt_module_1.CptModule,\r\n            core_1.RouterModule.register([\r\n                ...rmd_routing_1.RmdModuleRoute,\r\n                ...dvt_routing_1.DvtModuleRouting,\r\n                ...nix_routing_1.NixModuleRouting,\r\n                ...cpt_routing_1.CptModuleRoute\r\n            ]),\r\n            lib_nest_modules_1.AuthModule.forRootAsync(lib_nest_modules_1.AuthModule, {\r\n                imports: [lib_serverConfig_1.ServerConfigModule, user_account_module_1.UserAccountModule],\r\n                inject: [lib_serverConfig_1.ServerConfigService, account_service_1.UserAccountService],\r\n                useFactory: (config, userService) => {\r\n                    return {\r\n                        secret: config.appCode,\r\n                        userService,\r\n                        uniqueUserProp: 'email'\r\n                    };\r\n                },\r\n                exports: [lib_serverConfig_1.ServerConfigModule]\r\n            }),\r\n        ],\r\n    })\r\n], AppModule);\r\nexports.AppModule = AppModule;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst game_query_service_1 = require(\"./../services/game-query.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet GameQueryController = class GameQueryController {\r\n    constructor(gameQueryService) {\r\n        this.gameQueryService = gameQueryService;\r\n    }\r\n    games() {\r\n        return this.gameQueryService.gameList();\r\n    }\r\n    getHistory(sDate, eDate) {\r\n        return this.gameQueryService.gameHistory(sDate !== 'undefined' ? JSON.parse(sDate || '{}') : null, eDate !== 'undefined' ? JSON.parse(eDate || '{}') : null);\r\n    }\r\n    getGameHome() {\r\n        return this.gameQueryService.gameHome();\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EGameQuery.games),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameQueryController.prototype, \"games\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EGameQuery.gameHistory),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameQueryController.prototype, \"getHistory\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EGameQuery.gameHome),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameQueryController.prototype, \"getGameHome\", null);\r\nGameQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EGameQuery.gameQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof game_query_service_1.GameQueryService !== \"undefined\" && game_query_service_1.GameQueryService) === \"function\" ? _a : Object])\r\n], GameQueryController);\r\nexports.GameQueryController = GameQueryController;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst game_store_service_1 = require(\"./../services/game-store.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet GameStoreController = class GameStoreController {\r\n    constructor(gameStoreService) {\r\n        this.gameStoreService = gameStoreService;\r\n    }\r\n    saveGame(game) {\r\n        return this.gameStoreService.save(game);\r\n    }\r\n    deleteGame(gameId) {\r\n        return this.gameStoreService.delete(gameId);\r\n    }\r\n    playGame(game) {\r\n        return this.gameStoreService.playGame(game);\r\n    }\r\n    deleteHistory(type, id) {\r\n        return this.gameStoreService.deleteHistory(id, type);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.EGameStore.game),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.IRmdGame !== \"undefined\" && lib_xUtils_1.IRmdGame) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameStoreController.prototype, \"saveGame\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Delete)(lib_xUtils_1.EGameStore.game + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameStoreController.prototype, \"deleteGame\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)('*', '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.EGameStore.gamePlay),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = typeof lib_xUtils_1.IRmdGamePlay !== \"undefined\" && lib_xUtils_1.IRmdGamePlay) === \"function\" ? _c : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameStoreController.prototype, \"playGame\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Delete)(lib_xUtils_1.EGameStore.gameHistory + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Query)('type')),\r\n    tslib_1.__param(1, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameStoreController.prototype, \"deleteHistory\", null);\r\nGameStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EGameStore.gameStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof game_store_service_1.GameStoreService !== \"undefined\" && game_store_service_1.GameStoreService) === \"function\" ? _a : Object])\r\n], GameStoreController);\r\nexports.GameStoreController = GameStoreController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst game_store_controller_1 = require(\"./controllers/game-store.controller\");\r\nconst game_query_controller_1 = require(\"./controllers/game-query.controller\");\r\nconst game_query_service_1 = require(\"./services/game-query.service\");\r\nconst game_store_service_1 = require(\"./services/game-store.service\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst cpt_db_model_1 = require(\"../../cpt-db.model\");\r\nconst game_schema_1 = require(\"./game.schema\");\r\nconst settings_schema_1 = require(\"../settings/settings.schema\");\r\n// healMahTechAtEvenNodeDb\r\nlet GameModule = class GameModule {\r\n};\r\nGameModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [],\r\n        controllers: [game_store_controller_1.GameStoreController, game_query_controller_1.GameQueryController],\r\n        providers: [\r\n            game_store_service_1.GameStoreService,\r\n            game_query_service_1.GameQueryService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.gameModel,\r\n                modelSchema: game_schema_1.gameSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.gamePlayedModel,\r\n                modelSchema: game_schema_1.gamePlayedSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.systemConfigModel,\r\n                modelSchema: settings_schema_1.systemConfigSchema\r\n            }),\r\n        ],\r\n    })\r\n], GameModule);\r\nexports.GameModule = GameModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.gamePlayedSchema = exports.gameSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst cpt_db_model_1 = require(\"../../cpt-db.model\");\r\nexports.gameSchema = new mongoose_1.Schema({\r\n    gameName: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    gameCost: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    numOfTimes: Number,\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel\r\n    },\r\n    payMethod: String,\r\n}, { timestamps: true });\r\nexports.gamePlayedSchema = new mongoose_1.Schema({\r\n    invoiceId: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    player: String,\r\n    gameItems: [exports.gameSchema],\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel\r\n    }\r\n}, { timestamps: true });\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nlet GameQueryService = class GameQueryService {\r\n    constructor(gameModel, gamePlayedModel, systemConfigModel) {\r\n        this.gameModel = gameModel;\r\n        this.gamePlayedModel = gamePlayedModel;\r\n        this.systemConfigModel = systemConfigModel;\r\n    }\r\n    gameList() {\r\n        return this.gameModel.find({});\r\n    }\r\n    gameHistory(sDate, eDate) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            if (!config)\r\n                return;\r\n            let dateRangeFilter = {};\r\n            if (!sDate || !eDate) {\r\n                if (config.commissionRange == 'Daily') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                    };\r\n                }\r\n                if (config.commissionRange == 'Weekly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                    };\r\n                }\r\n                if (config.commissionRange == 'Monthly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n                };\r\n            }\r\n            // const gamesStats = await this.gamePlayedModel.aggregate([\r\n            //   {\r\n            //     $match: {\r\n            //       createdAt: dateRangeFilter\r\n            //     }\r\n            //   },\r\n            //   {\r\n            //     $unwind: '$gameItems'\r\n            //   },\r\n            //   {\r\n            //     $match: {\r\n            //       $and: [\r\n            //         {'deleted': false},\r\n            //         {'gameItems.deleted': false},\r\n            //       ]\r\n            //     }\r\n            //   },\r\n            //   {\r\n            //     $group: {\r\n            //       _id: null,\r\n            //       count: {\r\n            //         $sum: '$gameItems.numOfTimes'\r\n            //       },\r\n            //       amount: {\r\n            //         $sum: {\r\n            //           $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n            //         }\r\n            //       }\r\n            //     }\r\n            //   }\r\n            // ]);\r\n            const gamesByPayMethod = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$gameItems.payMethod',\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const gamesTotalAmount = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const history = yield this.gamePlayedModel.find({\r\n                createdAt: dateRangeFilter,\r\n            }).populate([\r\n                {\r\n                    path: 'userAccount',\r\n                    model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                    select: 'email firstName surName',\r\n                    options: { withDeleted: true },\r\n                },\r\n                {\r\n                    path: 'gameItems.deletedBy',\r\n                    model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                    select: 'email firstName surName',\r\n                    options: { withDeleted: true },\r\n                }\r\n            ]);\r\n            return {\r\n                history,\r\n                gamesTotalAmount: (gamesTotalAmount === null || gamesTotalAmount === void 0 ? void 0 : gamesTotalAmount.length) ? gamesTotalAmount[0] : {},\r\n                gamesByPayMethod\r\n            };\r\n        });\r\n    }\r\n    gameHome() {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            if (!config)\r\n                return;\r\n            let dateRangeFilter = {};\r\n            if (config.commissionRange == 'Daily') {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                };\r\n            }\r\n            if (config.commissionRange == 'Weekly') {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                };\r\n            }\r\n            if (config.commissionRange == 'Monthly') {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                };\r\n            }\r\n            const gamesCount = (_a = (yield this.gameModel.find({}))) === null || _a === void 0 ? void 0 : _a.length;\r\n            const gamesStats = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        count: {\r\n                            $sum: '$gameItems.numOfTimes'\r\n                        },\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const popularGames = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$gameItems.gameName',\r\n                        count: {\r\n                            $sum: '$gameItems.numOfTimes'\r\n                        },\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        count: -1\r\n                    }\r\n                },\r\n                {\r\n                    $limit: 5\r\n                }\r\n            ]);\r\n            return {\r\n                gamesCount: gamesCount,\r\n                gameStats: gamesStats.length ? gamesStats[0] : {},\r\n                popularGames: popularGames\r\n            };\r\n        });\r\n    }\r\n};\r\nGameQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.gameModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.gamePlayedModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.systemConfigModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object])\r\n], GameQueryService);\r\nexports.GameQueryService = GameQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nlet GameStoreService = class GameStoreService {\r\n    constructor(gameModel, gamePlayedModel, cls) {\r\n        this.gameModel = gameModel;\r\n        this.gamePlayedModel = gamePlayedModel;\r\n        this.cls = cls;\r\n    }\r\n    save(game) {\r\n        if (game === null || game === void 0 ? void 0 : game._id)\r\n            return this.gameModel.findByIdAndUpdate(game === null || game === void 0 ? void 0 : game._id, game);\r\n        return this.gameModel.create(game);\r\n    }\r\n    delete(gameId) {\r\n        if (this.cls.get('contextUser._id'))\r\n            return this.gameModel.deleteById(gameId, this.cls.get('contextUser._id'));\r\n        throw new Error('Invalid Authentication');\r\n    }\r\n    playGame(game) {\r\n        game.userAccount = this.cls.get('contextUser._id');\r\n        game.invoiceId = (0, lib_xUtils_1.randomChars)('numbers', 4);\r\n        return this.gamePlayedModel.create(game);\r\n    }\r\n    deleteHistory(id, type) {\r\n        const userId = this.cls.get('contextUser._id');\r\n        if (type == 'batch') {\r\n            return this.gamePlayedModel.deleteById(id, userId);\r\n        }\r\n        return this.gamePlayedModel.findOneAndUpdate({\r\n            'gameItems._id': { $in: [id] }\r\n        }, {\r\n            $set: {\r\n                'gameItems.$.deleted': true,\r\n                'gameItems.$.deletedBy': this.cls.get('contextUser._id'),\r\n                'gameItems.$.deletedAt': new Date(),\r\n            }\r\n        }, {\r\n            new: true,\r\n            strict: false,\r\n            strictQuery: false\r\n        }).populate([\r\n            {\r\n                path: 'userAccount',\r\n                model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            },\r\n            {\r\n                path: 'gameItems.deletedBy',\r\n                model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            }\r\n        ]);\r\n    }\r\n};\r\nGameStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.gameModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.gamePlayedModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _c : Object])\r\n], GameStoreService);\r\nexports.GameStoreService = GameStoreService;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst services_query_service_1 = require(\"./../services/services-query.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet ServicesQueryController = class ServicesQueryController {\r\n    constructor(servicesQueryService) {\r\n        this.servicesQueryService = servicesQueryService;\r\n    }\r\n    getServices() {\r\n        return this.servicesQueryService.getServices();\r\n    }\r\n    getDashboardServices(sDate, eDate, staffId) {\r\n        return this.servicesQueryService.getRenderedDashboardService(sDate !== 'undefined' ? JSON.parse(sDate || '{}') : null, eDate !== 'undefined' ? JSON.parse(eDate || '{}') : null, staffId);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EServicesQuery.getServices),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesQueryController.prototype, \"getServices\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard', 'Basic'], \"*\"),\r\n    (0, common_1.Get)(lib_xUtils_1.EServicesQuery.getRenderedDashoardService),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__param(2, (0, common_1.Query)('staffId')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesQueryController.prototype, \"getDashboardServices\", null);\r\nServicesQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EServicesQuery.servicesQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof services_query_service_1.ServicesQueryService !== \"undefined\" && services_query_service_1.ServicesQueryService) === \"function\" ? _a : Object])\r\n], ServicesQueryController);\r\nexports.ServicesQueryController = ServicesQueryController;\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst services_store_service_1 = require(\"./../services/services-store.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet ServicesStoreController = class ServicesStoreController {\r\n    constructor(servicesStoreService) {\r\n        this.servicesStoreService = servicesStoreService;\r\n    }\r\n    saveService(serviceForm) {\r\n        return this.servicesStoreService.saveServiceItem(serviceForm);\r\n    }\r\n    deleteService(serviceId) {\r\n        return this.servicesStoreService.deleteService(serviceId);\r\n    }\r\n    renderService(renderedService, renderedBy) {\r\n        renderedService.renderedBy = renderedBy;\r\n        return this.servicesStoreService.renderService(renderedService);\r\n    }\r\n    deleteRenderedService(serviceId, batchId, type) {\r\n        return this.servicesStoreService.deleteRenderedServices(batchId, serviceId, type);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.EServicesStore.saveService),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesStoreController.prototype, \"saveService\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.EServicesStore.deleteService + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesStoreController.prototype, \"deleteService\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.EServicesStore.renderService),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__param(1, (0, common_1.Query)('renderedBy')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.IServiceRendered !== \"undefined\" && lib_xUtils_1.IServiceRendered) === \"function\" ? _b : Object, String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesStoreController.prototype, \"renderService\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.EServicesStore.deleteRenderedService + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__param(1, (0, common_1.Query)('batchId')),\r\n    tslib_1.__param(2, (0, common_1.Query)('type')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesStoreController.prototype, \"deleteRenderedService\", null);\r\nServicesStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EServicesStore.servicesStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof services_store_service_1.ServicesStoreService !== \"undefined\" && services_store_service_1.ServicesStoreService) === \"function\" ? _a : Object])\r\n], ServicesStoreController);\r\nexports.ServicesStoreController = ServicesStoreController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst services_store_controller_1 = require(\"./controllers/services-store.controller\");\r\nconst services_query_controller_1 = require(\"./controllers/services-query.controller\");\r\nconst services_store_service_1 = require(\"./services/services-store.service\");\r\nconst services_query_service_1 = require(\"./services/services-query.service\");\r\nconst db_providers_1 = require(\"libs/lib-db-config/src/lib/db.providers\");\r\nconst cpt_db_model_1 = require(\"../../cpt-db.model\");\r\nconst services_schema_1 = require(\"./services.schema\");\r\nconst settings_schema_1 = require(\"../settings/settings.schema\");\r\nlet ServicesModule = class ServicesModule {\r\n};\r\nServicesModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [],\r\n        controllers: [services_store_controller_1.ServicesStoreController, services_query_controller_1.ServicesQueryController],\r\n        providers: [services_store_service_1.ServicesStoreService, services_query_service_1.ServicesQueryService,\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.serviceItemModel,\r\n                modelSchema: services_schema_1.serviceItemSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.serviceRenderedItemModel,\r\n                modelSchema: services_schema_1.renderedServiceItemSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.serviceRenderedModel,\r\n                modelSchema: services_schema_1.serviceRenderedSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.systemConfigModel,\r\n                modelSchema: settings_schema_1.systemConfigSchema\r\n            })\r\n        ]\r\n    })\r\n], ServicesModule);\r\nexports.ServicesModule = ServicesModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.serviceRenderedSchema = exports.renderedServiceItemSchema = exports.serviceItemSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst cpt_db_model_1 = require(\"../../cpt-db.model\");\r\nexports.serviceItemSchema = new mongoose_1.Schema({\r\n    serviceName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    serviceCost: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    serviceCommission: {\r\n        type: Number,\r\n        required: true\r\n    }\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.renderedServiceItemSchema = new mongoose_1.Schema({\r\n    serviceName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    serviceCost: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    serviceCommission: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    commissionAmount: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    numOfTimes: {\r\n        type: Number,\r\n        required: true,\r\n        default: 1,\r\n        min: 1\r\n    },\r\n    payMethod: String\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.serviceRenderedSchema = new mongoose_1.Schema({\r\n    invoiceId: String,\r\n    serviceItems: [exports.renderedServiceItemSchema],\r\n    renderedBy: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n        required: true\r\n    },\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel\r\n    }\r\n}, {\r\n    timestamps: true\r\n});\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nlet ServicesQueryService = class ServicesQueryService {\r\n    constructor(serviceItemModel, serviceRenderedModel, systemConfigModel) {\r\n        this.serviceItemModel = serviceItemModel;\r\n        this.serviceRenderedModel = serviceRenderedModel;\r\n        this.systemConfigModel = systemConfigModel;\r\n    }\r\n    getServices() {\r\n        return this.serviceItemModel.find({});\r\n    }\r\n    getRenderedDashboardService(sDate, eDate, staffId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            let dateRangeFilter = {};\r\n            if (!sDate || !eDate) {\r\n                if (config.commissionRange == 'Daily') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                    };\r\n                }\r\n                if (config.commissionRange == 'Weekly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                    };\r\n                }\r\n                if (config.commissionRange == 'Monthly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n                };\r\n            }\r\n            const match = staffId && staffId !== 'undefined' ? {\r\n                deleted: false,\r\n                createdAt: dateRangeFilter,\r\n                renderedBy: new mongoose_1.Types.ObjectId(staffId)\r\n            } : {\r\n                deleted: false,\r\n                createdAt: dateRangeFilter\r\n            };\r\n            // console.log('hair ',dateRangeFilter, config.commissionRange, sDate, eDate, sDate == 'null' as any);\r\n            const totalRenderedAmount = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems',\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        cost: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        commissionAmount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const renderedByCommission = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems.serviceCommission',\r\n                        cost: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        commissionAmount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        _id: 1\r\n                    }\r\n                }\r\n            ]);\r\n            const renderedByPayMethod = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems.payMethod',\r\n                        cost: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        commissionAmount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        _id: 1\r\n                    }\r\n                }\r\n            ]);\r\n            const renderedByStaff = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                        localField: 'renderedBy',\r\n                        foreignField: '_id', as: 'staff'\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: { $arrayElemAt: ['$staff._id', -1] },\r\n                        serviceCost: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        commissionAmount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        staff: {\r\n                            $addToSet: {\r\n                                $arrayElemAt: ['$staff', -1]\r\n                            }\r\n                        },\r\n                        services: {\r\n                            $push: '$serviceItems'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        commissionAmount: '$commissionAmount',\r\n                        serviceCost: '$serviceCost',\r\n                        staff: {\r\n                            $arrayElemAt: ['$staff', -1]\r\n                        },\r\n                        staffName: {\r\n                            $concat: [\r\n                                {\r\n                                    $arrayElemAt: ['$staff.firstName', -1]\r\n                                },\r\n                                \" \",\r\n                                {\r\n                                    $arrayElemAt: ['$staff.surName', -1]\r\n                                }\r\n                            ]\r\n                        },\r\n                        services: '$services'\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        _id: 1\r\n                    }\r\n                }\r\n            ]);\r\n            const dashboardServices = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $sort: { 'createdAt': 1 },\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                        localField: 'renderedBy',\r\n                        foreignField: '_id', as: 'staff'\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                        localField: 'userAccount',\r\n                        foreignField: '_id', as: 'userAccount'\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems._id',\r\n                        batchId: { $push: '$_id' },\r\n                        invoiceId: { $push: '$invoiceId' },\r\n                        renderedBy: { $push: { $arrayElemAt: ['$staff', -1] } },\r\n                        userAccount: { $push: { $arrayElemAt: ['$userAccount', -1] } },\r\n                        serviceName: { $push: '$serviceItems.serviceName' },\r\n                        serviceCost: { $push: '$serviceItems.serviceCost' },\r\n                        serviceCommission: { $push: '$serviceItems.serviceCommission' },\r\n                        commissionAmount: { $push: '$serviceItems.commissionAmount' },\r\n                        numOfTimes: { $push: '$serviceItems.numOfTimes' },\r\n                        payMethod: { $push: '$serviceItems.payMethod' },\r\n                        createdAt: { $push: '$serviceItems.createdAt' },\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        invoiceId: { $arrayElemAt: ['$invoiceId', -1] },\r\n                        batchId: { $arrayElemAt: ['$batchId', -1] },\r\n                        renderedBy: { $arrayElemAt: ['$renderedBy', -1] },\r\n                        userAccount: { $arrayElemAt: ['$userAccount.firstName', -1] },\r\n                        serviceName: { $arrayElemAt: ['$serviceName', -1] },\r\n                        serviceCost: { $arrayElemAt: ['$serviceCost', -1] },\r\n                        serviceCommission: { $arrayElemAt: ['$serviceCommission', -1] },\r\n                        commissionAmount: { $arrayElemAt: ['$commissionAmount', -1] },\r\n                        numOfTimes: { $arrayElemAt: ['$numOfTimes', -1] },\r\n                        payMethod: { $arrayElemAt: ['$payMethod', -1] },\r\n                        createdAt: { $arrayElemAt: ['$createdAt', -1] },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1\r\n                    }\r\n                }\r\n            ]);\r\n            const dashboardbatchServices = yield this.serviceRenderedModel.find(Object.assign({}, match)).populate([\r\n                {\r\n                    path: 'renderedBy',\r\n                    model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                    select: 'email firstName surName',\r\n                    options: { withDeleted: true },\r\n                }\r\n            ]);\r\n            return {\r\n                main: (totalRenderedAmount === null || totalRenderedAmount === void 0 ? void 0 : totalRenderedAmount.length) ? totalRenderedAmount[0] : {},\r\n                byPayMethod: renderedByPayMethod,\r\n                byCommission: renderedByCommission,\r\n                byStaff: renderedByStaff,\r\n                services: dashboardServices,\r\n                byBatch: dashboardbatchServices\r\n            };\r\n        });\r\n    }\r\n};\r\nServicesQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.serviceItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.serviceRenderedModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.systemConfigModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object])\r\n], ServicesQueryService);\r\nexports.ServicesQueryService = ServicesQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet ServicesStoreService = class ServicesStoreService {\r\n    constructor(serviceItemModel, serviceRenderedModel, cls) {\r\n        this.serviceItemModel = serviceItemModel;\r\n        this.serviceRenderedModel = serviceRenderedModel;\r\n        this.cls = cls;\r\n    }\r\n    saveServiceItem(serviceItem) {\r\n        if (serviceItem === null || serviceItem === void 0 ? void 0 : serviceItem._id) {\r\n            return this.serviceItemModel.findByIdAndUpdate(serviceItem._id, serviceItem);\r\n        }\r\n        else {\r\n            return this.serviceItemModel.create(serviceItem);\r\n        }\r\n    }\r\n    deleteService(serviceId) {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const service = yield this.serviceItemModel.deleteById(serviceId, (_a = this.cls.get('contextUser')) === null || _a === void 0 ? void 0 : _a._id);\r\n            if (service === null || service === void 0 ? void 0 : service.modifiedCount)\r\n                return this.serviceItemModel.find({});\r\n        });\r\n    }\r\n    renderService(serviceRendered) {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            serviceRendered.invoiceId = (0, lib_xUtils_1.randomChars)('numbers', 4);\r\n            serviceRendered.userAccount = (_a = this.cls.get('contextUser')) === null || _a === void 0 ? void 0 : _a._id;\r\n            return (yield this.serviceRenderedModel.create(serviceRendered)).populate([\r\n                {\r\n                    path: 'renderedBy',\r\n                    model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                    select: 'emai firstName surName',\r\n                    options: { withDeleted: true },\r\n                },\r\n            ]);\r\n        });\r\n    }\r\n    deleteRenderedServices(batchId, serviceId, type) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (type == 'single') {\r\n                const deletion = yield this.serviceRenderedModel.findOneAndUpdate({\r\n                    'serviceItems._id': { $in: [serviceId] }\r\n                }, {\r\n                    $set: {\r\n                        'serviceItems.$.deleted': true,\r\n                        'serviceItems.$.deletedBy': this.cls.get('contextUser._id'),\r\n                        'serviceItems.$.deletedAt': new Date(),\r\n                    }\r\n                }, {\r\n                    new: true,\r\n                    strict: false,\r\n                    strictQuery: false\r\n                });\r\n                return deletion;\r\n            }\r\n            else {\r\n                return this.serviceRenderedModel.deleteById(batchId, this.cls.get('contextUser._id'));\r\n            }\r\n        });\r\n    }\r\n};\r\nServicesStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.serviceItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.serviceRenderedModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _c : Object])\r\n], ServicesStoreService);\r\nexports.ServicesStoreService = ServicesStoreService;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst settings_query_service_1 = require(\"./../services/settings-query.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet SettingsQueryController = class SettingsQueryController {\r\n    constructor(settingsQueryService) {\r\n        this.settingsQueryService = settingsQueryService;\r\n    }\r\n    getDeleted(sDate, eDate) {\r\n        return this.settingsQueryService.getDeleted(JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}'));\r\n    }\r\n    getSystemConfig() {\r\n        return this.settingsQueryService.getSystemCnfig();\r\n    }\r\n    getExpenditures(sDate, eDate) {\r\n        return this.settingsQueryService.getExpenditures(JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}'));\r\n    }\r\n    getTodos(sDate, eDate) {\r\n        return this.settingsQueryService.getTodos(JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}'));\r\n    }\r\n    getStaffPay(sDate, eDate) {\r\n        return this.settingsQueryService.getStaffPays(JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}'));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getDeleted\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.getSettings),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getSystemConfig\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.expenditure),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getExpenditures\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.todo),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getTodos\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.staffPay),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getStaffPay\", null);\r\nSettingsQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ESettingsQuery.settingsQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof settings_query_service_1.SettingsQueryService !== \"undefined\" && settings_query_service_1.SettingsQueryService) === \"function\" ? _a : Object])\r\n], SettingsQueryController);\r\nexports.SettingsQueryController = SettingsQueryController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e, _f;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst settings_store_service_1 = require(\"./../services/settings-store.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet SettingsStoreController = class SettingsStoreController {\r\n    constructor(settingsStoreService) {\r\n        this.settingsStoreService = settingsStoreService;\r\n    }\r\n    saveSetting(settings) {\r\n        return this.settingsStoreService.saveSettings(settings);\r\n    }\r\n    saveExpense(expense) {\r\n        return this.settingsStoreService.saveExpenditure(expense);\r\n    }\r\n    deleteExpenditure(expenseId) {\r\n        return this.settingsStoreService.deleteExpenditure(expenseId);\r\n    }\r\n    saveTodo(todo) {\r\n        return this.settingsStoreService.saveTodo(todo);\r\n    }\r\n    markTodoDone(todo) {\r\n        return this.settingsStoreService.markTodoDone(todo);\r\n    }\r\n    deleteTodo(todoId) {\r\n        return this.settingsStoreService.deleteTodo(todoId);\r\n    }\r\n    saveStaffPay(staffPay) {\r\n        return this.settingsStoreService.saveStaffPay(staffPay);\r\n    }\r\n    deleteStaffPay(payId) {\r\n        return this.settingsStoreService.deleteStaffPay(payId);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.saveSettings),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.ISystemConfig !== \"undefined\" && lib_xUtils_1.ISystemConfig) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"saveSetting\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(\"*\", \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.expenditure),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = typeof lib_xUtils_1.IExpenditure !== \"undefined\" && lib_xUtils_1.IExpenditure) === \"function\" ? _c : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"saveExpense\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ESettingsStore.expenditure + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"deleteExpenditure\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.todo),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_d = typeof lib_xUtils_1.ITodo !== \"undefined\" && lib_xUtils_1.ITodo) === \"function\" ? _d : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"saveTodo\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Put)(lib_xUtils_1.ESettingsStore.todo + '/:todo'),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_e = typeof lib_xUtils_1.ITodo !== \"undefined\" && lib_xUtils_1.ITodo) === \"function\" ? _e : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"markTodoDone\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ESettingsStore.todo + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"deleteTodo\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.staffPay),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_f = typeof lib_xUtils_1.IRmdStaffPay !== \"undefined\" && lib_xUtils_1.IRmdStaffPay) === \"function\" ? _f : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"saveStaffPay\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ESettingsStore.staffPay + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"deleteStaffPay\", null);\r\nSettingsStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ESettingsStore.settingsStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof settings_store_service_1.SettingsStoreService !== \"undefined\" && settings_store_service_1.SettingsStoreService) === \"function\" ? _a : Object])\r\n], SettingsStoreController);\r\nexports.SettingsStoreController = SettingsStoreController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nlet SettingsQueryService = class SettingsQueryService {\r\n    constructor(systemConfigModel, expenditureModel, stockItemModel, saleModel, serviceItemModel, serviceRenderedModel, gameModel, gamePlayedModel, userAccountModel, todoModel, staffPayModel) {\r\n        this.systemConfigModel = systemConfigModel;\r\n        this.expenditureModel = expenditureModel;\r\n        this.stockItemModel = stockItemModel;\r\n        this.saleModel = saleModel;\r\n        this.serviceItemModel = serviceItemModel;\r\n        this.serviceRenderedModel = serviceRenderedModel;\r\n        this.gameModel = gameModel;\r\n        this.gamePlayedModel = gamePlayedModel;\r\n        this.userAccountModel = userAccountModel;\r\n        this.todoModel = todoModel;\r\n        this.staffPayModel = staffPayModel;\r\n    }\r\n    getSystemCnfig() {\r\n        return this.systemConfigModel.findOne();\r\n    }\r\n    getExpenditures(sDate, eDate) {\r\n        return this.expenditureModel.find({\r\n            expenseDate: {\r\n                $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate)),\r\n            }\r\n        }).populate([\r\n            {\r\n                path: 'userAccount',\r\n                model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            },\r\n        ])\r\n            .sort({\r\n            createdAt: -1\r\n        });\r\n    }\r\n    getTodos(sDate, eDate) {\r\n        const dateRangeFilter = {\r\n            $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n            $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n        };\r\n        return this.todoModel.find({\r\n            createdAt: dateRangeFilter\r\n        }).populate([\r\n            {\r\n                path: 'userAccount',\r\n                model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            },\r\n            {\r\n                path: 'todoDoneBy',\r\n                model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            },\r\n        ])\r\n            .sort({\r\n            todoDone: 1,\r\n            createdAt: -1\r\n        });\r\n    }\r\n    getStaffPays(sDate, eDate) {\r\n        const dateRangeFilter = {\r\n            $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n            $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n        };\r\n        return this.staffPayModel.aggregate([\r\n            {\r\n                $match: {\r\n                    createdAt: dateRangeFilter\r\n                }\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                    localField: 'userAccount',\r\n                    foreignField: '_id',\r\n                    as: 'userAccount'\r\n                }\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                    localField: 'staff',\r\n                    foreignField: '_id',\r\n                    as: 'staff'\r\n                }\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: { $arrayElemAt: ['$staff._id', -1] },\r\n                    staffPays: {\r\n                        $addToSet: '$$ROOT'\r\n                    },\r\n                    payAmount: {\r\n                        $sum: '$payAmount'\r\n                    },\r\n                    userAccount: {\r\n                        $addToSet: { $arrayElemAt: ['$userAccount', -1] }\r\n                    },\r\n                    staff: {\r\n                        $addToSet: { $arrayElemAt: ['$staff', -1] }\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                $lookup: {\r\n                    localField: '_id',\r\n                    foreignField: 'renderedBy',\r\n                    from: cpt_db_model_1.ECptDbModels.serviceRenderedModel.toLocaleLowerCase() + 's',\r\n                    as: 'serviceCom',\r\n                    pipeline: [\r\n                        {\r\n                            $match: {\r\n                                createdAt: dateRangeFilter,\r\n                            }\r\n                        },\r\n                        {\r\n                            $unwind: '$serviceItems'\r\n                        },\r\n                        {\r\n                            $match: {\r\n                                $and: [\r\n                                    { 'deleted': false },\r\n                                    {\r\n                                        $or: [\r\n                                            { 'serviceItems.deleted': { $exists: false } },\r\n                                            { 'serviceItems.deleted': !true },\r\n                                        ],\r\n                                    },\r\n                                ]\r\n                            }\r\n                        },\r\n                        {\r\n                            $group: {\r\n                                _id: null,\r\n                                commissionAmount: {\r\n                                    $sum: {\r\n                                        $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                                    },\r\n                                },\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: '$_id',\r\n                    payAmount: '$payAmount',\r\n                    serviceCom: {\r\n                        $cond: [\r\n                            {\r\n                                $ifNull: [{ $arrayElemAt: ['$serviceCom.commissionAmount', -1] }, false] //return value 'false' if null\r\n                            },\r\n                            { $arrayElemAt: ['$serviceCom.commissionAmount', -1] },\r\n                            0, // if 'false'\r\n                        ]\r\n                    },\r\n                    staffPays: '$staffPays',\r\n                    staffName: {\r\n                        $concat: [\r\n                            {\r\n                                $arrayElemAt: ['$staff.firstName', -1]\r\n                            },\r\n                            ' ',\r\n                            {\r\n                                $arrayElemAt: ['$staff.surName', -1]\r\n                            },\r\n                        ]\r\n                    },\r\n                    balance: {\r\n                        $cond: [\r\n                            {\r\n                                $ifNull: [{ $arrayElemAt: ['$serviceCom.commissionAmount', -1] }, false] //return value 'false' if null\r\n                            },\r\n                            {\r\n                                $subtract: [\r\n                                    { $arrayElemAt: ['$serviceCom.commissionAmount', -1] },\r\n                                    '$payAmount'\r\n                                ],\r\n                            },\r\n                            'Unknown', // if 'false'\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                $sort: {\r\n                    staffName: 1\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n    getDeleted(sDate, eDate) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const dateRangeFilter = {\r\n                $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n            };\r\n            let deleted = [];\r\n            deleted = [...deleted, ...yield this.saleModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            'saleItems.deleted': true,\r\n                            'saleItems.deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$saleItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'saleItems.deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$saleItems._id',\r\n                            itemName: {\r\n                                $push: '$saleItems.itemName'\r\n                            },\r\n                            quantity: {\r\n                                $push: '$saleItems.quantity'\r\n                            },\r\n                            unitSellingPrice: {\r\n                                $push: '$saleItems.unitSellingPrice'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$saleItems.deletedAt'\r\n                            },\r\n                            deletionDate: {\r\n                                $push: '$saleItems.deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: { $arrayElemAt: ['$deletedAt', -1] },\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    {\r\n                                        $arrayElemAt: ['$itemName', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: { $arrayElemAt: ['$quantity', -1] }\r\n                                    },\r\n                                    \") @ N\",\r\n                                    {\r\n                                        $toString: { $arrayElemAt: ['$unitSellingPrice', -1] }\r\n                                    },\r\n                                    \"/1\",\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            desc: '$desc',\r\n                            deletedBy: '$deletedBy.firstName',\r\n                            deletedAt: '$deletedAt',\r\n                            deletionDate: '$deletionDate',\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.stockItemModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            'deleted': true,\r\n                            'deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$staff', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    '$itemName',\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$quantity',\r\n                                    },\r\n                                    \"qtty)\",\r\n                                    // {\r\n                                    //   $toString: '$unitSellingPrice'\r\n                                    // },\r\n                                    // \"/1\",\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            desc: '$desc',\r\n                            deletedBy: '$deletedBy.firstName',\r\n                            deletedAt: '$deletedAt',\r\n                            deletionDate: '$deletionDate',\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.saleModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$saleItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$_id',\r\n                            itemsCount: {\r\n                                $sum: 1\r\n                            },\r\n                            amount: {\r\n                                $sum: '$saleItems.amount',\r\n                            },\r\n                            invoiceId: {\r\n                                $push: '$invoiceId'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    \"#\",\r\n                                    {\r\n                                        $arrayElemAt: ['$invoiceId', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$itemsCount'\r\n                                    },\r\n                                    \"itms) @ N\",\r\n                                    {\r\n                                        $toString: '$amount'\r\n                                    },\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.serviceItemModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            'deleted': true,\r\n                            'deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$staff.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    '$serviceName',\r\n                                    \" (N\",\r\n                                    {\r\n                                        $toString: '$serviceCost',\r\n                                    },\r\n                                    \") @\",\r\n                                    {\r\n                                        $toString: '$serviceCommission',\r\n                                    },\r\n                                    \"%\",\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.serviceRenderedModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            'serviceItems.deleted': true,\r\n                            'serviceItems.deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$serviceItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'serviceItems.deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$serviceItems._id',\r\n                            serviceName: {\r\n                                $push: '$serviceItems.serviceName'\r\n                            },\r\n                            numOfTimes: {\r\n                                $sum: '$serviceItems.numOfTimes'\r\n                            },\r\n                            serviceCost: {\r\n                                $sum: '$serviceItems.serviceCost'\r\n                            },\r\n                            serviceCommission: {\r\n                                $sum: '$serviceItems.serviceCommission'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$serviceItems.deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff.firstName', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    {\r\n                                        $arrayElemAt: ['$serviceName', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$numOfTimes'\r\n                                    },\r\n                                    \"x) @ N\",\r\n                                    {\r\n                                        $toString: '$serviceCost'\r\n                                    },\r\n                                    \"/1 (\",\r\n                                    {\r\n                                        $toString: '$serviceCommission'\r\n                                    },\r\n                                    \"%)\",\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.serviceRenderedModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$serviceItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$_id',\r\n                            itemsCount: {\r\n                                $sum: 1\r\n                            },\r\n                            amount: {\r\n                                $sum: '$serviceItems.serviceCost',\r\n                            },\r\n                            invoiceId: {\r\n                                $push: '$invoiceId'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    \"#\",\r\n                                    {\r\n                                        $arrayElemAt: ['$invoiceId', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$itemsCount'\r\n                                    },\r\n                                    \"scs) @ N\",\r\n                                    {\r\n                                        $toString: '$amount'\r\n                                    },\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.gameModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            'deleted': true,\r\n                            'deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$staff.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    '$gameName',\r\n                                    \" (N\",\r\n                                    {\r\n                                        $toString: '$gameCost',\r\n                                    },\r\n                                    ')'\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.gamePlayedModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            'gameItems.deleted': true,\r\n                            'gameItems.deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$gameItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'gameItems.deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$gameItems._id',\r\n                            gameName: {\r\n                                $push: '$gameItems.gameName'\r\n                            },\r\n                            numOfTimes: {\r\n                                $sum: '$gameItems.numOfTimes'\r\n                            },\r\n                            gameCost: {\r\n                                $sum: '$gameItems.gameCost'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$gameItems.deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff.firstName', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    {\r\n                                        $arrayElemAt: ['$gameName', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$numOfTimes'\r\n                                    },\r\n                                    \"x) @ N\",\r\n                                    {\r\n                                        $toString: '$gameCost'\r\n                                    },\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                ])];\r\n            deleted = [...deleted, ...yield this.gamePlayedModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$gameItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$_id',\r\n                            itemsCount: {\r\n                                $sum: 1\r\n                            },\r\n                            amount: {\r\n                                $sum: '$gameItems.gameCost',\r\n                            },\r\n                            invoiceId: {\r\n                                $push: '$invoiceId'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    \"#\",\r\n                                    {\r\n                                        $arrayElemAt: ['$invoiceId', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$itemsCount'\r\n                                    },\r\n                                    \"gms) @ N\",\r\n                                    {\r\n                                        $toString: '$amount'\r\n                                    },\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.userAccountModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: '$deletedBy.firstName',\r\n                            desc: {\r\n                                $concat: [\r\n                                    '$email',\r\n                                    ' (',\r\n                                    '$firstName',\r\n                                    ') - ',\r\n                                    '$acctType'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.expenditureModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: '$staff.firstName',\r\n                            desc: {\r\n                                $concat: [\r\n                                    'Exp - ',\r\n                                    '$expenseRemark',\r\n                                    ' (',\r\n                                    'N',\r\n                                    {\r\n                                        $toString: '$expenseAmount'\r\n                                    },\r\n                                    ')',\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.todoModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: '$staff.firstName',\r\n                            desc: {\r\n                                $concat: [\r\n                                    'Todo - ',\r\n                                    '$todoNote',\r\n                                    // ' (',\r\n                                    // 'N',\r\n                                    // {\r\n                                    //   $toString: '$expenseAmount'\r\n                                    // },\r\n                                    // ')',\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.staffPayModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'staff',\r\n                            foreignField: '_id',\r\n                            as: 'toStaff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: '$staff.firstName',\r\n                            desc: {\r\n                                $concat: [\r\n                                    'Payout @ ',\r\n                                    { $arrayElemAt: ['$toStaff.firstName', -1] },\r\n                                    ' (',\r\n                                    'N',\r\n                                    {\r\n                                        $toString: '$payAmount'\r\n                                    },\r\n                                    ')',\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                ])];\r\n            return (0, lib_xUtils_1.sortByAttribute)(deleted, '-deletedAt');\r\n        });\r\n    }\r\n};\r\nSettingsQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.systemConfigModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.expenditureModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.stockItemModel)),\r\n    tslib_1.__param(3, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.saleModel)),\r\n    tslib_1.__param(4, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.serviceItemModel)),\r\n    tslib_1.__param(5, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.serviceRenderedModel)),\r\n    tslib_1.__param(6, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.gameModel)),\r\n    tslib_1.__param(7, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.gamePlayedModel)),\r\n    tslib_1.__param(8, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.userAccountModel)),\r\n    tslib_1.__param(9, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.todoModel)),\r\n    tslib_1.__param(10, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.staffPayModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _d : Object, typeof (_e = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _e : Object, typeof (_f = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _f : Object, typeof (_g = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _g : Object, typeof (_h = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _h : Object, typeof (_j = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _j : Object, typeof (_k = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _k : Object, typeof (_l = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _l : Object])\r\n], SettingsQueryService);\r\nexports.SettingsQueryService = SettingsQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet SettingsStoreService = class SettingsStoreService {\r\n    constructor(systemConfigModel, expenditureModel, todoModel, staffPayModel, cls) {\r\n        // const fnc = async()=>{\r\n        // }\r\n        // dbConnection.db.listCollections().forEach((col)=>{\r\n        //   col.name\r\n        // })\r\n        // dbConnection.db.listCollections().toArray(function(err, names) {\r\n        //   if (err) {\r\n        //       console.log(err);\r\n        //   }\r\n        //   else {\r\n        //       names.forEach(function(e,i,a) {\r\n        //           // mongoose.connection.db.dropCollection(e.name);\r\n        //           console.log(\"--->>\", e.name);\r\n        //       });\r\n        //   }\r\n        // })\r\n        // console.log(dbConnection.db.collections().then((col)));\r\n        // dbConnection.db.collections().then((col)=>{\r\n        //   console.log(col.);\r\n        this.systemConfigModel = systemConfigModel;\r\n        this.expenditureModel = expenditureModel;\r\n        this.todoModel = todoModel;\r\n        this.staffPayModel = staffPayModel;\r\n        this.cls = cls;\r\n        // })\r\n        // const cols = Array.from(dbConnection.collections)\r\n        // console.log(dbConnection.collections, \" COLLECTIONS\");\r\n        // const cols = Object.entries(dbConnection.collections).forEach((col)=>{\r\n        // Object.entries(dbConnection.collections).forEach((col, i)=>{\r\n        //   console.log('Col '+i, col[0]);\r\n        // });\r\n        // // console.log(cols, \" COLLECTIONS\");\r\n        // console.log(dbConnection.c);\r\n    }\r\n    renameCollections() {\r\n    }\r\n    saveSettings(config) {\r\n        if (config === null || config === void 0 ? void 0 : config._id) {\r\n            return this.systemConfigModel.findByIdAndUpdate(config._id, config, {\r\n                new: true\r\n            });\r\n        }\r\n        else {\r\n            return this.systemConfigModel.create(config);\r\n        }\r\n    }\r\n    saveExpenditure(expense) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        expense.userAccount = userAccount;\r\n        return this.expenditureModel.create(expense);\r\n    }\r\n    deleteExpenditure(expenseId) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        return this.expenditureModel.deleteById(expenseId, userAccount);\r\n    }\r\n    saveTodo(todo) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        todo.userAccount = userAccount;\r\n        todo.todoDone = false;\r\n        return this.todoModel.create(todo);\r\n    }\r\n    markTodoDone(todo) {\r\n        todo.todoDoneBy = this.cls.get('contextUser._id');\r\n        ;\r\n        todo.todoDoneAt = new Date();\r\n        todo.todoDone = true;\r\n        return this.todoModel.findByIdAndUpdate(todo === null || todo === void 0 ? void 0 : todo._id, todo, { new: true });\r\n    }\r\n    deleteTodo(todoId) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        return this.todoModel.deleteById(todoId, userAccount);\r\n    }\r\n    saveStaffPay(pay) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        pay.userAccount = userAccount;\r\n        return this.staffPayModel.create(pay);\r\n    }\r\n    deleteStaffPay(payId) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        return this.staffPayModel.deleteById(payId, userAccount);\r\n    }\r\n};\r\nSettingsStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.systemConfigModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.expenditureModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.todoModel)),\r\n    tslib_1.__param(3, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.staffPayModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _d : Object, typeof (_e = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _e : Object])\r\n], SettingsStoreService);\r\nexports.SettingsStoreService = SettingsStoreService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst settings_query_service_1 = require(\"./services/settings-query.service\");\r\nconst settings_store_service_1 = require(\"./services/settings-store.service\");\r\nconst settings_store_controller_1 = require(\"./controllers/settings-store.controller\");\r\nconst settings_query_controller_1 = require(\"./controllers/settings-query.controller\");\r\nconst cpt_db_model_1 = require(\"../../cpt-db.model\");\r\nconst settings_schema_1 = require(\"./settings.schema\");\r\nconst db_providers_1 = require(\"libs/lib-db-config/src/lib/db.providers\");\r\nconst account_schema_1 = require(\"../user-account/account.schema\");\r\nconst stocks_schema_1 = require(\"../stocks/stocks.schema\");\r\nconst services_schema_1 = require(\"../services/services.schema\");\r\nconst game_schema_1 = require(\"../game/game.schema\");\r\nlet SettingsModule = class SettingsModule {\r\n};\r\nSettingsModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [],\r\n        providers: [\r\n            settings_query_service_1.SettingsQueryService,\r\n            settings_store_service_1.SettingsStoreService,\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.systemConfigModel,\r\n                modelSchema: settings_schema_1.systemConfigSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.expenditureModel,\r\n                modelSchema: settings_schema_1.expenditureSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                modelSchema: account_schema_1.accountSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.purchaseModel,\r\n                modelSchema: stocks_schema_1.StockPurchaseSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.stockItemModel,\r\n                modelSchema: stocks_schema_1.stockItemSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.saleModel,\r\n                modelSchema: stocks_schema_1.stockSaleSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.saleItemModel,\r\n                modelSchema: stocks_schema_1.saleItemSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.serviceRenderedModel,\r\n                modelSchema: services_schema_1.serviceRenderedSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.serviceItemModel,\r\n                modelSchema: services_schema_1.serviceItemSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.gameModel,\r\n                modelSchema: game_schema_1.gameSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.gamePlayedModel,\r\n                modelSchema: game_schema_1.gamePlayedSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.todoModel,\r\n                modelSchema: settings_schema_1.todoSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.staffPayModel,\r\n                modelSchema: settings_schema_1.staffPaySchema,\r\n            }),\r\n        ],\r\n        controllers: [\r\n            settings_store_controller_1.SettingsStoreController,\r\n            settings_query_controller_1.SettingsQueryController\r\n        ]\r\n    })\r\n], SettingsModule);\r\nexports.SettingsModule = SettingsModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.staffPaySchema = exports.todoSchema = exports.expenditureSchema = exports.systemConfigSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst cpt_db_model_1 = require(\"../../cpt-db.model\");\r\nexports.systemConfigSchema = new mongoose_1.Schema({\r\n    commissionRange: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    serviceCommissions: {\r\n        type: [Number],\r\n        required: true,\r\n    },\r\n    printType: String\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.expenditureSchema = new mongoose_1.Schema({\r\n    expenseAmount: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    expenseRemark: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    expenseDate: {\r\n        type: Date,\r\n        required: true\r\n    },\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel\r\n    }\r\n}, { timestamps: true });\r\nexports.todoSchema = new mongoose_1.Schema({\r\n    todoNote: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    todoDone: {\r\n        type: Boolean,\r\n        required: true,\r\n        default: false\r\n    },\r\n    todoDoneAt: {\r\n        type: Date,\r\n        default: new Date(),\r\n    },\r\n    todoDoneBy: {\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n        type: mongoose_1.Types.ObjectId\r\n    },\r\n    userAccount: {\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n        type: mongoose_1.Types.ObjectId\r\n    }\r\n}, { timestamps: true });\r\nexports.staffPaySchema = new mongoose_1.Schema({\r\n    payAmount: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    staff: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n        required: true\r\n    },\r\n    payRemark: String,\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n    },\r\n}, { timestamps: true });\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst stocks_query_service_1 = require(\"./../services/stocks-query.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet StocksQueryController = class StocksQueryController {\r\n    constructor(stocksQueryService) {\r\n        this.stocksQueryService = stocksQueryService;\r\n    }\r\n    getOverview(sDate, eDate) {\r\n        return this.stocksQueryService.getOverview(sDate !== 'undefined' ? JSON.parse(sDate || '{}') : null, eDate !== 'undefined' ? JSON.parse(eDate || '{}') : null);\r\n    }\r\n    getPurchases(stockItemId) {\r\n        if (stockItemId)\r\n            return this.stocksQueryService.getStockItemPurchase(stockItemId);\r\n        return this.stocksQueryService.getPurchases();\r\n    }\r\n    getSaleItems() {\r\n        return this.stocksQueryService.getSaleItems();\r\n    }\r\n    // @Get(EInventoryStockQuery.allStocks)\r\n    // getAllStocks() {\r\n    //   return this.stocksQueryService.getAllStocks()\r\n    // }\r\n    getActiveStockItems(queryType) {\r\n        return this.stocksQueryService.getActiveStocks(queryType);\r\n    }\r\n    getDashboardSale(sDate, eDate) {\r\n        return this.stocksQueryService.getDashboardSale(sDate !== 'undefined' ? JSON.parse(sDate || '{}') : null, eDate !== 'undefined' ? JSON.parse(eDate || '{}') : null);\r\n    }\r\n    getOldStockItems() {\r\n        return this.stocksQueryService.getOldStockItems();\r\n    }\r\n    getOutOfStock(osType) {\r\n        return this.stocksQueryService.getOutOfStock(osType);\r\n    }\r\n    getPreviousVendors() {\r\n        return this.stocksQueryService.getPreviousVendors();\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getOverview\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Standard', 'Super'], '*'),\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.stockPurchase),\r\n    tslib_1.__param(0, (0, common_1.Query)('stockItemId')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getPurchases\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ERmdDispensaryQuery.saleItems),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getSaleItems\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Standard', 'Super'], '*'),\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.activeStocks),\r\n    tslib_1.__param(0, (0, common_1.Query)('query-type')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getActiveStockItems\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ECinDispensaryQuery.dispenseHistory),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getDashboardSale\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.oldStocks),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getOldStockItems\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.outOfStocks),\r\n    tslib_1.__param(0, (0, common_1.Query)('os-type')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getOutOfStock\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.purchaseVendors),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getPreviousVendors\", null);\r\nStocksQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EInventoryStockQuery.stockQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof stocks_query_service_1.StocksQueryService !== \"undefined\" && stocks_query_service_1.StocksQueryService) === \"function\" ? _a : Object])\r\n], StocksQueryController);\r\nexports.StocksQueryController = StocksQueryController;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst stocks_store_service_1 = require(\"./../services/stocks-store.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet StocksStoreController = class StocksStoreController {\r\n    constructor(stocksStoreService) {\r\n        this.stocksStoreService = stocksStoreService;\r\n    }\r\n    savePurchase(purchase) {\r\n        return this.stocksStoreService.savePurchase(purchase);\r\n    }\r\n    deleteStock(stockId) {\r\n        return this.stocksStoreService.deleteStockItem(stockId);\r\n    }\r\n    sellStock(stock) {\r\n        return this.stocksStoreService.sellStock(stock);\r\n    }\r\n    deleteSoldStock(stockId, batchId, type) {\r\n        return this.stocksStoreService.deleteSoldStock(batchId, stockId, type);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.EInventoryStockStore.stockPurchase),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.IRmdStockPurchase !== \"undefined\" && lib_xUtils_1.IRmdStockPurchase) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksStoreController.prototype, \"savePurchase\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.EInventoryStockStore.stockPurchase + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksStoreController.prototype, \"deleteStock\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ECinDispensaryStore.dispenseOrder),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = typeof lib_xUtils_1.IRmdSale !== \"undefined\" && lib_xUtils_1.IRmdSale) === \"function\" ? _c : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksStoreController.prototype, \"sellStock\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ECinDispensaryStore.returnSaleItems + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__param(1, (0, common_1.Query)('batchId')),\r\n    tslib_1.__param(2, (0, common_1.Query)('type')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksStoreController.prototype, \"deleteSoldStock\", null);\r\nStocksStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EInventoryStockStore.stockStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof stocks_store_service_1.StocksStoreService !== \"undefined\" && stocks_store_service_1.StocksStoreService) === \"function\" ? _a : Object])\r\n], StocksStoreController);\r\nexports.StocksStoreController = StocksStoreController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e, _f, _g, _h;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst date_fns_1 = require(\"date-fns\");\r\nlet StocksQueryService = class StocksQueryService {\r\n    constructor(stockItemModel, saleModel, systemConfigModel, purchaseModel, serviceRenderedModel, gamePlayedModel, expenditureModel, staffPayModel) {\r\n        this.stockItemModel = stockItemModel;\r\n        this.saleModel = saleModel;\r\n        this.systemConfigModel = systemConfigModel;\r\n        this.purchaseModel = purchaseModel;\r\n        this.serviceRenderedModel = serviceRenderedModel;\r\n        this.gamePlayedModel = gamePlayedModel;\r\n        this.expenditureModel = expenditureModel;\r\n        this.staffPayModel = staffPayModel;\r\n    }\r\n    getOverview(sDate, eDate) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            let dateRangeFilter = {};\r\n            if (!sDate || !eDate) {\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Daily') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                    };\r\n                }\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Weekly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                    };\r\n                }\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Monthly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n                };\r\n            }\r\n            const totalSaleAmount = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $or: [\r\n                            { 'saleItems.deleted': { $exists: false } },\r\n                            { 'saleItems.deleted': !true },\r\n                        ],\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: '$saleItems.amount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const totalRenderedAmount = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems',\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const totalGameAmount = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'gameItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'gameItems.deleted': { $exists: false } },\r\n                                    { 'gameItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const totalExpenseAmount = yield this.expenditureModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $match: {\r\n                        'deleted': false,\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: '$expenseAmount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const saleByPayMethod = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'saleItems.deleted': { $exists: false } },\r\n                                    { 'saleItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'saleItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$saleItems.payMethod',\r\n                        amount: {\r\n                            $sum: '$saleItems.amount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const serviceByPayMethod = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'serviceItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems.payMethod',\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n            ]);\r\n            const gamesByPayMethod = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$gameItems.payMethod',\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const popularServices = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'serviceItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems.serviceName',\r\n                        count: {\r\n                            $sum: '$serviceItems.numOfTimes'\r\n                        },\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        count: -1\r\n                    }\r\n                },\r\n                {\r\n                    $limit: 5\r\n                }\r\n            ]);\r\n            const totalPayoutAmount = yield this.staffPayModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $match: {\r\n                        'deleted': false,\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: '$payAmount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            return {\r\n                totalSaleAmount: (totalSaleAmount === null || totalSaleAmount === void 0 ? void 0 : totalSaleAmount.length) ? totalSaleAmount[0] : {},\r\n                totalRenderedAmount: (totalRenderedAmount === null || totalRenderedAmount === void 0 ? void 0 : totalRenderedAmount.length) ? totalRenderedAmount[0] : {},\r\n                totalGameAmount: (totalGameAmount === null || totalGameAmount === void 0 ? void 0 : totalGameAmount.length) ? totalGameAmount[0] : {},\r\n                totalExpenseAmount: (totalExpenseAmount === null || totalExpenseAmount === void 0 ? void 0 : totalExpenseAmount.length) ? totalExpenseAmount[0] : {},\r\n                totalPayoutAmount: (totalPayoutAmount === null || totalPayoutAmount === void 0 ? void 0 : totalPayoutAmount.length) ? totalPayoutAmount[0] : {},\r\n                saleByPayMethod,\r\n                serviceByPayMethod,\r\n                gamesByPayMethod,\r\n                // popularStaff,\r\n                popularServices\r\n            };\r\n        });\r\n    }\r\n    getPurchases() {\r\n        return this.purchaseModel.find({}).sort({ createdAt: -1 })\r\n            .populate([\r\n            {\r\n                path: 'itemsPurchased',\r\n                model: cpt_db_model_1.ECptDbModels.stockItemModel,\r\n            },\r\n            {\r\n                path: 'userAccount',\r\n                model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                select: 'acctType email userName firstName surName appModule shopBranch',\r\n                options: { withDeleted: true },\r\n            },\r\n        ]);\r\n        ;\r\n    }\r\n    getSaleItems() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.stockItemModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        quantity: {\r\n                            $gte: 1\r\n                        },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$itemName',\r\n                        id: {\r\n                            $push: '$_id'\r\n                        },\r\n                        quantity: {\r\n                            $sum: '$quantity'\r\n                        },\r\n                        itemName: {\r\n                            $push: '$itemName'\r\n                        },\r\n                        unitCostPrice: {\r\n                            $push: '$unitCostPrice'\r\n                        },\r\n                        unitSellingPrice: {\r\n                            $push: '$unitSellingPrice'\r\n                        },\r\n                        createdAt: {\r\n                            $push: '$createdAt'\r\n                        },\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: {\r\n                            $arrayElemAt: ['$id', 0]\r\n                        },\r\n                        itemName: {\r\n                            $arrayElemAt: ['$itemName', 0]\r\n                        },\r\n                        quantity: '$quantity',\r\n                        unitCostPrice: {\r\n                            $arrayElemAt: ['$unitCostPrice', 0]\r\n                        },\r\n                        unitSellingPrice: {\r\n                            $arrayElemAt: ['$unitSellingPrice', 0]\r\n                        },\r\n                        createdAt: {\r\n                            $arrayElemAt: ['$createdAt', 0]\r\n                        },\r\n                        expiryDate: {\r\n                            $arrayElemAt: ['$expiryDate', 0]\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n        });\r\n    }\r\n    // getAllStocks() {\r\n    //   return this.stockItemModel.find({}).sort({itemName: 1})\r\n    // }\r\n    getActiveStocks(type = 'single') {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (type == 'multiple')\r\n                return this.stockItemModel.find({\r\n                    quantity: {\r\n                        $gte: 1\r\n                    }\r\n                }).sort({\r\n                    itemName: 1,\r\n                    createdAt: -1\r\n                });\r\n            else\r\n                return this.stockItemModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            quantity: {\r\n                                $gte: 1\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            createdAt: -1\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$itemName',\r\n                            id: {\r\n                                $push: '$_id'\r\n                            },\r\n                            quantity: {\r\n                                $sum: '$quantity'\r\n                            },\r\n                            itemName: {\r\n                                $push: '$itemName'\r\n                            },\r\n                            unitCostPrice: {\r\n                                $push: '$unitCostPrice'\r\n                            },\r\n                            unitSellingPrice: {\r\n                                $push: '$unitSellingPrice'\r\n                            },\r\n                            createdAt: {\r\n                                $push: '$createdAt'\r\n                            },\r\n                            expiryDate: {\r\n                                $push: '$expiryDate'\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: {\r\n                                $arrayElemAt: ['$id', 0]\r\n                            },\r\n                            itemName: {\r\n                                $arrayElemAt: ['$itemName', 0]\r\n                            },\r\n                            quantity: '$quantity',\r\n                            unitCostPrice: {\r\n                                $arrayElemAt: ['$unitCostPrice', 0]\r\n                            },\r\n                            unitSellingPrice: {\r\n                                $arrayElemAt: ['$unitSellingPrice', 0]\r\n                            },\r\n                            createdAt: {\r\n                                $arrayElemAt: ['$createdAt', 0]\r\n                            },\r\n                            expiryDate: {\r\n                                $arrayElemAt: ['$expiryDate', 0]\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            itemName: 1\r\n                        }\r\n                    }\r\n                ]);\r\n        });\r\n    }\r\n    getStockItemPurchase(stockItemId) {\r\n        return this.purchaseModel.findOne({\r\n            itemsPurchased: stockItemId\r\n        })\r\n            .populate([\r\n            {\r\n                path: 'itemsPurchased',\r\n                model: cpt_db_model_1.ECptDbModels.stockItemModel,\r\n            },\r\n            {\r\n                path: 'userAccount',\r\n                model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                select: 'acctType email userName firstName surName appModule shopBranch',\r\n                options: { withDeleted: true },\r\n            },\r\n        ]);\r\n    }\r\n    getOldStockItems() {\r\n        return this.stockItemModel.aggregate([\r\n            {\r\n                $sort: {\r\n                    createdAt: -1,\r\n                },\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: '$itemName',\r\n                    unitCostPrice: { $addToSet: '$unitCostPrice' },\r\n                    unitSellingPrice: { $addToSet: '$unitSellingPrice' },\r\n                },\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: '$_id',\r\n                    unitCostPrice: { $arrayElemAt: ['$unitCostPrice', 0] },\r\n                    unitSellingPrice: { $arrayElemAt: ['$unitSellingPrice', 0] },\r\n                },\r\n            },\r\n        ]);\r\n    }\r\n    getOutOfStock(osType) {\r\n        var _a, _b;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const outOfStocks = [];\r\n            const sales = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: {\r\n                            $gte: (0, date_fns_1.subWeeks)(new Date(), 6),\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    $unwind: '$saleItems',\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$saleItems.itemName',\r\n                        quantity: { $push: '$saleItems.quantity' }\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        quantity: {\r\n                            $add: [{ $toInt: { $avg: '$quantity' } }, 1]\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            for (let i = 0; i < sales.length; i++) {\r\n                const stockItem = yield this.stockItemModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            itemName: (_a = sales[i]) === null || _a === void 0 ? void 0 : _a._id,\r\n                        },\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            createdAt: -1,\r\n                        },\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$itemName',\r\n                            quantity: { $sum: '$quantity' },\r\n                            createdAt: { $push: '$createdAt' },\r\n                            expiryDate: { $push: '$expiryDate' },\r\n                            unitCostPrice: { $push: '$unitCostPrice' },\r\n                        },\r\n                    },\r\n                    {\r\n                        $match: {\r\n                            quantity: osType == 'os'\r\n                                ? { $lte: 0 }\r\n                                : { $lte: (_b = sales[i]) === null || _b === void 0 ? void 0 : _b.quantity, $gt: 0 },\r\n                        },\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            quantity: '$quantity',\r\n                            expiryDate: { $arrayElemAt: ['$expiryDate', 0] },\r\n                            createdAt: { $arrayElemAt: ['$createdAt', 0] },\r\n                            unitCostPrice: { $avg: '$unitCostPrice' },\r\n                        },\r\n                    },\r\n                ]);\r\n                if (stockItem && stockItem.length) {\r\n                    stockItem[0].avgCons = sales[0].quantity,\r\n                        stockItem[0].avgCost =\r\n                            stockItem[0].unitCostPrice * stockItem[0].avgCons;\r\n                    outOfStocks.push(stockItem[0]);\r\n                }\r\n            }\r\n            // console.log(osType, outOfStocks);\r\n            return outOfStocks;\r\n        });\r\n    }\r\n    getPreviousVendors() {\r\n        return this.purchaseModel.aggregate([\r\n            {\r\n                $group: {\r\n                    _id: '$vendor'\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n    getDashboardSale(sDate, eDate) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            let dateRangeFilter = {};\r\n            if (!sDate || !eDate) {\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Daily') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                    };\r\n                }\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Weekly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                    };\r\n                }\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Monthly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n                };\r\n            }\r\n            const saleByPayMethod = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'saleItems.deleted': { $exists: false } },\r\n                                    { 'saleItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'saleItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$saleItems.payMethod',\r\n                        amount: {\r\n                            $sum: '$saleItems.amount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const saleTotal = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'saleItems.deleted': { $exists: false } },\r\n                                    { 'saleItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'saleItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: '$saleItems.amount',\r\n                        },\r\n                        profit: {\r\n                            $sum: {\r\n                                $subtract: [\r\n                                    '$saleItems.amount',\r\n                                    {\r\n                                        $multiply: [\r\n                                            '$saleItems.unitCostPrice',\r\n                                            '$saleItems.quantity',\r\n                                        ],\r\n                                    },\r\n                                ],\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const sales = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'saleItems.deleted': { $exists: false } },\r\n                                    { 'saleItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'saleItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: cpt_db_model_1.ECptDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                        localField: 'userAccount',\r\n                        foreignField: '_id', as: 'userAccount'\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$saleItems._id',\r\n                        invoiceId: { $push: '$invoiceId' },\r\n                        batchId: { $push: '$_id' },\r\n                        itemName: { $push: '$saleItems.itemName' },\r\n                        itemId: { $push: '$saleItems.itemId' },\r\n                        quantity: { $push: '$saleItems.quantity' },\r\n                        payMethod: { $push: '$saleItems.payMethod' },\r\n                        unitCostPrice: { $push: '$saleItems.unitCostPrice' },\r\n                        unitSellingPrice: { $push: '$saleItems.unitSellingPrice' },\r\n                        amount: { $push: '$saleItems.amount' },\r\n                        userAccount: {\r\n                            $push: '$userAccount.firstName'\r\n                        },\r\n                        createdAt: { $push: '$createdAt' },\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        invoiceId: { $arrayElemAt: ['$invoiceId', -1] },\r\n                        batchId: { $arrayElemAt: ['$batchId', -1] },\r\n                        itemName: { $arrayElemAt: ['$itemName', -1] },\r\n                        itemId: { $arrayElemAt: ['$itemId', -1] },\r\n                        quantity: { $arrayElemAt: ['$quantity', -1] },\r\n                        unitCostPrice: { $arrayElemAt: ['$unitCostPrice', -1] },\r\n                        unitSellingPrice: { $arrayElemAt: ['$unitSellingPrice', -1] },\r\n                        amount: { $arrayElemAt: ['$amount', -1] },\r\n                        payMethod: { $arrayElemAt: ['$payMethod', -1] },\r\n                        userAccount: { $arrayElemAt: [{ $arrayElemAt: ['$userAccount', -1] }, -1] },\r\n                        createdAt: { $arrayElemAt: ['$createdAt', -1] },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1\r\n                    }\r\n                }\r\n            ]);\r\n            return {\r\n                main: (saleTotal === null || saleTotal === void 0 ? void 0 : saleTotal.length) ? saleTotal[0] : {},\r\n                byPayMethod: saleByPayMethod,\r\n                sales\r\n            };\r\n        });\r\n    }\r\n};\r\nStocksQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.stockItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.saleModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.systemConfigModel)),\r\n    tslib_1.__param(3, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.purchaseModel)),\r\n    tslib_1.__param(4, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.serviceRenderedModel)),\r\n    tslib_1.__param(5, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.gamePlayedModel)),\r\n    tslib_1.__param(6, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.expenditureModel)),\r\n    tslib_1.__param(7, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.staffPayModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _d : Object, typeof (_e = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _e : Object, typeof (_f = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _f : Object, typeof (_g = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _g : Object, typeof (_h = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _h : Object])\r\n], StocksQueryService);\r\nexports.StocksQueryService = StocksQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nconst date_fns_1 = require(\"date-fns\");\r\nlet StocksStoreService = class StocksStoreService {\r\n    constructor(stockItemModel, purchaseModel, saleModel, cls) {\r\n        this.stockItemModel = stockItemModel;\r\n        this.purchaseModel = purchaseModel;\r\n        this.saleModel = saleModel;\r\n        this.cls = cls;\r\n    }\r\n    savePurchase(purchase) {\r\n        var _a, _b;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (purchase === null || purchase === void 0 ? void 0 : purchase.id) {\r\n                const items = [];\r\n                const stockItemsToEdit = purchase.itemsPurchased.filter((item) => item === null || item === void 0 ? void 0 : item.id);\r\n                const stockItemsToCreate = purchase.itemsPurchased.filter((item) => !(item === null || item === void 0 ? void 0 : item.id));\r\n                if (stockItemsToCreate === null || stockItemsToCreate === void 0 ? void 0 : stockItemsToCreate.length) {\r\n                    const itemsToCreate = yield this.stockItemModel.create(stockItemsToCreate);\r\n                    console.log(itemsToCreate);\r\n                    return;\r\n                    itemsToCreate === null || itemsToCreate === void 0 ? void 0 : itemsToCreate.forEach((item) => {\r\n                        delete item['id'];\r\n                        items.push(item._id);\r\n                    });\r\n                }\r\n                if (stockItemsToEdit === null || stockItemsToEdit === void 0 ? void 0 : stockItemsToEdit.length) {\r\n                    for (let i = 0; i < stockItemsToEdit.length; i++) {\r\n                        const itemToEdit = yield this.stockItemModel.findByIdAndUpdate((_a = stockItemsToEdit[i]) === null || _a === void 0 ? void 0 : _a.id, stockItemsToEdit[i], {\r\n                            new: true\r\n                        });\r\n                        itemToEdit ? items.push(itemToEdit === null || itemToEdit === void 0 ? void 0 : itemToEdit._id) : null;\r\n                    }\r\n                }\r\n                purchase.userAccount = this.cls.get('contextUser._id');\r\n                purchase.itemsPurchased = items;\r\n                return this.purchaseModel\r\n                    .findByIdAndUpdate(purchase.id, purchase, {\r\n                    new: true,\r\n                })\r\n                    .populate([\r\n                    {\r\n                        path: 'itemsPurchased',\r\n                        model: cpt_db_model_1.ECptDbModels.stockItemModel,\r\n                    },\r\n                    {\r\n                        path: 'userAccount',\r\n                        model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                        select: 'acctType email userName firstName surName appModule shopBranch',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                ]);\r\n            }\r\n            else {\r\n                const purchaseExist = yield this.purchaseModel.find({\r\n                    vendor: purchase.vendor,\r\n                    itemsPurchased: { $size: purchase.itemsPurchased.length },\r\n                    createdAt: {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date())\r\n                    }\r\n                });\r\n                if (purchaseExist) {\r\n                    for (let i = 0; i < purchaseExist.length; i++) {\r\n                        const minuteDiff = (0, date_fns_1.differenceInMinutes)(new Date(), new Date(purchaseExist[i].createdAt));\r\n                        console.log(minuteDiff, purchaseExist[i].createdAt);\r\n                        if (minuteDiff < 10) {\r\n                            throw new common_1.BadRequestException(\"This is likely a duplicate, please try again in next \"\r\n                                + (10 - minuteDiff) + ' minutes.');\r\n                        }\r\n                    }\r\n                    // console.log(purchaseExist, timeNow);\r\n                }\r\n                (_b = purchase.itemsPurchased) === null || _b === void 0 ? void 0 : _b.forEach((item) => {\r\n                    delete item['id'];\r\n                });\r\n                const itemItems = yield this.stockItemModel.create(purchase.itemsPurchased);\r\n                // console.log(purchase.itemsPurchased);\r\n                // return purchase.itemsPurchased;\r\n                // console.log(itemItems);\r\n                // return purchase.itemsPurchased;\r\n                purchase.itemsPurchased = itemItems.map((item) => item === null || item === void 0 ? void 0 : item._id);\r\n                purchase.userAccount = this.cls.get('contextUser._id');\r\n                return (yield this.purchaseModel.create(purchase)).populate([\r\n                    {\r\n                        path: 'itemsPurchased',\r\n                        model: cpt_db_model_1.ECptDbModels.stockItemModel,\r\n                    },\r\n                    {\r\n                        path: 'userAccount',\r\n                        model: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                        select: 'acctType email userName firstName surName appModule shopBranch',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                ]);\r\n            }\r\n            ;\r\n        });\r\n    }\r\n    saveStockItem(stock) {\r\n        if (stock === null || stock === void 0 ? void 0 : stock._id) {\r\n            return this.stockItemModel.findByIdAndUpdate(stock._id, stock, { new: true });\r\n        }\r\n        else {\r\n            return this.stockItemModel.create(stock);\r\n        }\r\n    }\r\n    deleteStockItem(itemId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const stock = yield this.stockItemModel.deleteById(itemId, this.cls.get('contextUser._id'));\r\n            if (stock === null || stock === void 0 ? void 0 : stock.modifiedCount)\r\n                return this.stockItemModel.find({});\r\n        });\r\n    }\r\n    sellStock(stockSale) {\r\n        var _a, _b, _c;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const saleItemsNames = stockSale.saleItems.map((item) => item.itemName);\r\n            // console.log(stockSale);\r\n            // return\r\n            const items = yield this.stockItemModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        quantity: { $gte: 1 },\r\n                        itemName: { $in: saleItemsNames },\r\n                    },\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1,\r\n                    },\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$_id',\r\n                        itemName: { $addToSet: '$itemName' },\r\n                        quantity: { $sum: '$quantity' },\r\n                        createdAt: { $addToSet: '$createdAt' },\r\n                    },\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        itemName: {\r\n                            $arrayElemAt: ['$itemName', 0],\r\n                        },\r\n                        createdAt: {\r\n                            $arrayElemAt: ['$createdAt', 0],\r\n                        },\r\n                        quantity: '$quantity'\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1,\r\n                        itemName: 1,\r\n                    }\r\n                }\r\n            ]);\r\n            let stockItems = [];\r\n            stockSale.saleItems.forEach((item) => {\r\n                let qttyInputted = parseInt(item.quantity);\r\n                const totQttyAvail = items.filter((itm) => itm.itemName == item.itemName).reduce((tot, cur) => tot + cur.quantity, 0);\r\n                if (qttyInputted > totQttyAvail) {\r\n                    throw new common_1.ConflictException(item.itemName + 'remains ' + totQttyAvail);\r\n                }\r\n                const itemVariants = items.filter((itm) => itm.itemName == item.itemName)\r\n                    .sort((a, b) => new Date(a.createdAt).getTime() < new Date(b.createdAt).getTime() ? -1 : 1);\r\n                let qttyToDeduct = qttyInputted;\r\n                itemVariants.forEach((itm) => {\r\n                    if (itm.quantity >= qttyInputted) {\r\n                        qttyToDeduct = qttyInputted;\r\n                        qttyInputted -= qttyToDeduct;\r\n                    }\r\n                    else {\r\n                        qttyToDeduct = itm.quantity;\r\n                        qttyInputted -= qttyToDeduct;\r\n                    }\r\n                    if (qttyToDeduct > 0) {\r\n                        stockItems.push({\r\n                            itemId: itm._id,\r\n                            itemName: itm.itemName,\r\n                            quantity: qttyToDeduct,\r\n                            unitCostPrice: item.unitCostPrice,\r\n                            unitSellingPrice: item.unitSellingPrice,\r\n                            amount: qttyToDeduct * item.unitSellingPrice,\r\n                            payMethod: item.payMethod\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n            stockSale.invoiceId = (0, lib_xUtils_1.randomChars)('numbers', 4);\r\n            stockSale.userAccount = (_a = this.cls.get('contextUser')) === null || _a === void 0 ? void 0 : _a._id;\r\n            stockSale.saleItems = stockItems;\r\n            const sale = yield this.saleModel.create(stockSale);\r\n            if (sale._id) {\r\n                for (let i = 0; i < ((_b = sale.saleItems) === null || _b === void 0 ? void 0 : _b.length); i++) {\r\n                    yield this.stockItemModel.findByIdAndUpdate(sale.saleItems[i].itemId, {\r\n                        $inc: {\r\n                            quantity: -((_c = sale.saleItems[i]) === null || _c === void 0 ? void 0 : _c.quantity)\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            return sale;\r\n        });\r\n    }\r\n    deleteSoldStock(batchId, stockId, type) {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (type == 'single') {\r\n                const deletion = yield this.saleModel.findOneAndUpdate({\r\n                    'saleItems._id': { $in: [stockId] }\r\n                }, {\r\n                    $set: {\r\n                        'saleItems.$.deleted': true,\r\n                        'saleItems.$.deletedBy': this.cls.get('contextUser._id'),\r\n                        'saleItems.$.deletedAt': new Date(),\r\n                    }\r\n                }, {\r\n                    new: true,\r\n                    strict: false,\r\n                    strictQuery: false\r\n                });\r\n                if (!deletion)\r\n                    throw new Error(\"Error, item can not be deleted.\");\r\n                const deleteItem = (_a = deletion === null || deletion === void 0 ? void 0 : deletion.saleItems) === null || _a === void 0 ? void 0 : _a.find((item) => item._id.toString() == stockId && new mongoose_1.Types.ObjectId(item.deleted));\r\n                // console.log(deleteItem);\r\n                let returnQtty;\r\n                if (deleteItem) {\r\n                    returnQtty = yield this.stockItemModel.findByIdAndUpdate(deleteItem.itemId, {\r\n                        $inc: {\r\n                            quantity: deleteItem.quantity\r\n                        }\r\n                    }, { new: true });\r\n                }\r\n                return returnQtty ? deleteItem : null;\r\n                // return this.saleModel.findByIdAndUpdate(batchId,\r\n                //   {\r\n                //     $pull: {saleItems: {_id: stockId}}\r\n                //   },\r\n                //   {\r\n                //     new: true\r\n                //   }\r\n                // )\r\n            }\r\n            else {\r\n                return this.saleModel.deleteById(batchId, this.cls.get('contextUser._id'));\r\n                //.findByIdAndDelete({_id: batchId}, {new: true});\r\n            }\r\n        });\r\n    }\r\n};\r\nStocksStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.stockItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.purchaseModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.saleModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _d : Object])\r\n], StocksStoreService);\r\nexports.StocksStoreService = StocksStoreService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst stocks_store_controller_1 = require(\"./controllers/stocks-store.controller\");\r\nconst stocks_query_controller_1 = require(\"./controllers/stocks-query.controller\");\r\nconst stocks_store_service_1 = require(\"./services/stocks-store.service\");\r\nconst stocks_query_service_1 = require(\"./services/stocks-query.service\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst cpt_db_model_1 = require(\"../../cpt-db.model\");\r\nconst stocks_schema_1 = require(\"./stocks.schema\");\r\nconst settings_schema_1 = require(\"../settings/settings.schema\");\r\nconst services_schema_1 = require(\"../services/services.schema\");\r\nconst game_schema_1 = require(\"../game/game.schema\");\r\nlet StocksModule = class StocksModule {\r\n};\r\nStocksModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        controllers: [stocks_store_controller_1.StocksStoreController, stocks_query_controller_1.StocksQueryController],\r\n        providers: [stocks_store_service_1.StocksStoreService, stocks_query_service_1.StocksQueryService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.purchaseModel,\r\n                modelSchema: stocks_schema_1.StockPurchaseSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.stockItemModel,\r\n                modelSchema: stocks_schema_1.stockItemSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.saleModel,\r\n                modelSchema: stocks_schema_1.stockSaleSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.saleItemModel,\r\n                modelSchema: stocks_schema_1.saleItemSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.systemConfigModel,\r\n                modelSchema: settings_schema_1.systemConfigSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.serviceRenderedModel,\r\n                modelSchema: services_schema_1.serviceRenderedSchema,\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.gamePlayedModel,\r\n                modelSchema: game_schema_1.gamePlayedSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.expenditureModel,\r\n                modelSchema: settings_schema_1.expenditureSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.staffPayModel,\r\n                modelSchema: settings_schema_1.staffPaySchema\r\n            }),\r\n        ],\r\n    })\r\n], StocksModule);\r\nexports.StocksModule = StocksModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.stockSaleSchema = exports.StockPurchaseSchema = exports.saleItemSchema = exports.stockItemSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst cpt_db_model_1 = require(\"../../cpt-db.model\");\r\nexports.stockItemSchema = new mongoose_1.Schema({\r\n    itemName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    quantity: {\r\n        type: Number,\r\n        required: true,\r\n        min: 0,\r\n    },\r\n    unitCostPrice: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    unitSellingPrice: {\r\n        type: Number,\r\n        required: true\r\n    }\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.saleItemSchema = new mongoose_1.Schema({\r\n    itemId: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    itemName: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    quantity: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    unitCostPrice: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    unitSellingPrice: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    amount: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    payMethod: String,\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.StockPurchaseSchema = new mongoose_1.Schema({\r\n    vendor: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    itemsPurchased: [\r\n        {\r\n            type: mongoose_1.Types.ObjectId,\r\n            ref: cpt_db_model_1.ECptDbModels.stockItemModel\r\n        }\r\n    ],\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n    },\r\n}, { timestamps: true });\r\nexports.stockSaleSchema = new mongoose_1.Schema({\r\n    invoiceId: String,\r\n    saleItems: [exports.saleItemSchema],\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: cpt_db_model_1.ECptDbModels.userAccountModel\r\n    }\r\n}, {\r\n    timestamps: true\r\n});\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.accountSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nexports.accountSchema = new mongoose_1.Schema({\r\n    acctType: {\r\n        type: String,\r\n        enum: ['Super', 'Standard', 'Basic']\r\n    },\r\n    firstName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    surName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    email: {\r\n        type: String,\r\n        unique: true\r\n    },\r\n    passWord: {\r\n        type: String,\r\n    },\r\n    salt: String,\r\n}, {\r\n    timestamps: true\r\n});\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst user_account_query_service_1 = require(\"../services/user-account-query.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet UserAccountQueryController = class UserAccountQueryController {\r\n    constructor(accountQueryService) {\r\n        this.accountQueryService = accountQueryService;\r\n    }\r\n    login(body) {\r\n        return this.accountQueryService.loginStaffAccount(body);\r\n    }\r\n    getUserAccounts() {\r\n        return this.accountQueryService.getAccounts();\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(lib_xUtils_1.EAccountQuery.staffProfileLogin),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountQueryController.prototype, \"login\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)('*', '*'),\r\n    (0, common_1.Get)(lib_xUtils_1.EAccountQuery.staffProfiles),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountQueryController.prototype, \"getUserAccounts\", null);\r\nUserAccountQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EAccountQuery.accountQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof user_account_query_service_1.UserAccountQueryService !== \"undefined\" && user_account_query_service_1.UserAccountQueryService) === \"function\" ? _a : Object])\r\n], UserAccountQueryController);\r\nexports.UserAccountQueryController = UserAccountQueryController;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst user_account_store_service_1 = require(\"../services/user-account-store.service\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet UserAccountStoreController = class UserAccountStoreController {\r\n    constructor(accountStoreService) {\r\n        this.accountStoreService = accountStoreService;\r\n    }\r\n    saveAccount(body) {\r\n        return this.accountStoreService.saveAccount(body);\r\n    }\r\n    deleteAccount(accountId) {\r\n        return this.accountStoreService.deleteAccount(accountId);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.EAccountStore.profile),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountStoreController.prototype, \"saveAccount\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Delete)(lib_xUtils_1.EAccountStore.profile + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountStoreController.prototype, \"deleteAccount\", null);\r\nUserAccountStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EAccountStore.accountStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof user_account_store_service_1.UserAccountStoreService !== \"undefined\" && user_account_store_service_1.UserAccountStoreService) === \"function\" ? _a : Object])\r\n], UserAccountStoreController);\r\nexports.UserAccountStoreController = UserAccountStoreController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet UserAccountQueryService = class UserAccountQueryService {\r\n    constructor(userAccountModel, accountService, jwtService, cls) {\r\n        this.userAccountModel = userAccountModel;\r\n        this.accountService = accountService;\r\n        this.jwtService = jwtService;\r\n        this.cls = cls;\r\n        this.accountService.accountModelCpt = this.userAccountModel;\r\n        this.accountService.accountUserKey = 'email';\r\n    }\r\n    loginStaffAccount(staff) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const user = yield this.userAccountModel.findOne({\r\n                email: staff.email,\r\n            });\r\n            if (!user)\r\n                throw new common_1.ForbiddenException('Invalid user credentials, please try again.');\r\n            const userInfo = yield this.userAccountModel.findOne({\r\n                _id: user === null || user === void 0 ? void 0 : user._id,\r\n            }, { salt: 0, passWord: 0 });\r\n            console.log(userInfo.email, ' Logged In!');\r\n            return {\r\n                token: this.jwtService.jwtSign(this.accountService.decryptAccountPassword(user, staff.passWord), 'email'),\r\n                staff: userInfo,\r\n            };\r\n        });\r\n    }\r\n    getAccounts() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const accounts = yield this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n            return accounts.filter((account) => account.email !== 'ibnadam.net@gmail.com');\r\n        });\r\n    }\r\n};\r\nUserAccountQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.userAccountModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof lib_nest_modules_1.AccountService !== \"undefined\" && lib_nest_modules_1.AccountService) === \"function\" ? _b : Object, typeof (_c = typeof lib_serverConfig_1.JwtService !== \"undefined\" && lib_serverConfig_1.JwtService) === \"function\" ? _c : Object, typeof (_d = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _d : Object])\r\n], UserAccountQueryService);\r\nexports.UserAccountQueryService = UserAccountQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst cpt_db_model_1 = require(\"../../../cpt-db.model\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet UserAccountStoreService = class UserAccountStoreService {\r\n    constructor(userAccountModel, accountService, cls) {\r\n        this.userAccountModel = userAccountModel;\r\n        this.accountService = accountService;\r\n        this.cls = cls;\r\n        this.accountService.accountModelCpt = this.userAccountModel;\r\n    }\r\n    saveAccount(accountForm) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (accountForm === null || accountForm === void 0 ? void 0 : accountForm._id) {\r\n                const account = yield this.userAccountModel.findByIdAndUpdate(accountForm._id, this.accountService.encryptAccountPassword(accountForm));\r\n                if (account === null || account === void 0 ? void 0 : account._id) {\r\n                    const accounts = yield this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n                    return accounts.filter((account) => account.email !== 'ibnadam.net@gmail.com');\r\n                    return this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n                }\r\n            }\r\n            else {\r\n                const account = yield this.userAccountModel.create(this.accountService.encryptAccountPassword(accountForm));\r\n                if (account === null || account === void 0 ? void 0 : account._id) {\r\n                    const accounts = yield this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n                    return accounts.filter((account) => account.email !== 'ibnadam.net@gmail.com');\r\n                }\r\n                // return this.userAccountModel.find({}, {salt: 0, passWord: 0});\r\n            }\r\n        });\r\n    }\r\n    deleteAccount(accountId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const accountToDelete = yield this.userAccountModel.findById(accountId);\r\n            if (accountToDelete.email == 'ibnadam.net@gmail.com')\r\n                return;\r\n            const account = yield this.userAccountModel.deleteById(accountId, this.cls.get('contextUser._id'));\r\n            if (account === null || account === void 0 ? void 0 : account.modifiedCount)\r\n                return this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n            throw new common_1.NotFoundException(\"Error occured, account not deleted please try again.\");\r\n        });\r\n    }\r\n};\r\nUserAccountStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(cpt_db_model_1.ECptDbModels.userAccountModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof lib_nest_modules_1.AccountService !== \"undefined\" && lib_nest_modules_1.AccountService) === \"function\" ? _b : Object, typeof (_c = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _c : Object])\r\n], UserAccountStoreService);\r\nexports.UserAccountStoreService = UserAccountStoreService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst user_account_query_controller_1 = require(\"./controllers/user-account-query.controller\");\r\nconst user_account_store_controller_1 = require(\"./controllers/user-account-store.controller\");\r\nconst user_account_store_service_1 = require(\"./services/user-account-store.service\");\r\nconst user_account_query_service_1 = require(\"./services/user-account-query.service\");\r\nconst db_providers_1 = require(\"libs/lib-db-config/src/lib/db.providers\");\r\nconst cpt_db_model_1 = require(\"../../cpt-db.model\");\r\nconst account_schema_1 = require(\"./account.schema\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet UserAccountModule = class UserAccountModule {\r\n};\r\nUserAccountModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [lib_nest_modules_1.AccountModule],\r\n        controllers: [user_account_query_controller_1.UserAccountQueryController, user_account_store_controller_1.UserAccountStoreController],\r\n        providers: [user_account_store_service_1.UserAccountStoreService, user_account_query_service_1.UserAccountQueryService,\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: cpt_db_model_1.ECptDbModels.userAccountModel,\r\n                modelSchema: account_schema_1.accountSchema\r\n            })\r\n        ],\r\n    })\r\n], UserAccountModule);\r\nexports.UserAccountModule = UserAccountModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ECptDbModels = void 0;\r\nvar ECptDbModels;\r\n(function (ECptDbModels) {\r\n    ECptDbModels[\"userAccountModel\"] = \"CPT_UserAccount\";\r\n    ECptDbModels[\"systemConfigModel\"] = \"CPT_SystemConfig\";\r\n    ECptDbModels[\"stockItemModel\"] = \"CPT_StockItem\";\r\n    ECptDbModels[\"purchaseModel\"] = \"CPT_Purchase\";\r\n    ECptDbModels[\"saleModel\"] = \"CPT_Sale\";\r\n    ECptDbModels[\"saleItemModel\"] = \"CPT_SaleItem\";\r\n    ECptDbModels[\"serviceItemModel\"] = \"CPT_ServiceItem\";\r\n    ECptDbModels[\"serviceRenderedModel\"] = \"CPT_ServiceRendered\";\r\n    ECptDbModels[\"serviceRenderedItemModel\"] = \"CPT_ServiceRenderedItem\";\r\n    ECptDbModels[\"expenditureModel\"] = \"CPT_EXPENDITURE\";\r\n    ECptDbModels[\"gameModel\"] = \"CPT_GAME\";\r\n    ECptDbModels[\"gamePlayedModel\"] = \"CPT_GAME_PLAYED\";\r\n    ECptDbModels[\"todoModel\"] = \"CPT_TODO\";\r\n    ECptDbModels[\"staffPayModel\"] = \"CPT_SAFF_PAY\";\r\n})(ECptDbModels = exports.ECptDbModels || (exports.ECptDbModels = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CptModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst user_account_module_1 = require(\"./common/user-account/user-account.module\");\r\nconst stocks_module_1 = require(\"./common/stocks/stocks.module\");\r\nconst settings_module_1 = require(\"./common/settings/settings-module\");\r\nconst services_module_1 = require(\"./common/services/services.module\");\r\nconst game_module_1 = require(\"./common/game/game.module\");\r\nlet CptModule = class CptModule {\r\n};\r\nCptModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [\r\n            user_account_module_1.UserAccountModule,\r\n            stocks_module_1.StocksModule,\r\n            settings_module_1.SettingsModule,\r\n            services_module_1.ServicesModule,\r\n            game_module_1.GameModule,\r\n        ]\r\n    })\r\n], CptModule);\r\nexports.CptModule = CptModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CptModuleRoute = void 0;\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst cpt_module_1 = require(\"./cpt.module\");\r\nconst user_account_module_1 = require(\"./common/user-account/user-account.module\");\r\nconst stocks_module_1 = require(\"./common/stocks/stocks.module\");\r\nconst settings_module_1 = require(\"./common/settings/settings-module\");\r\nconst services_module_1 = require(\"./common/services/services.module\");\r\nconst game_module_1 = require(\"./common/game/game.module\");\r\nexports.CptModuleRoute = [\r\n    {\r\n        path: 'cpt',\r\n        module: cpt_module_1.CptModule,\r\n        children: [\r\n            {\r\n                path: lib_xUtils_1.EFeatureAppModule.GAME.toLowerCase(),\r\n                module: game_module_1.GameModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.EFeatureAppModule.SERVICE.toLowerCase(),\r\n                module: services_module_1.ServicesModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.ECommonAppModule.Account.toLowerCase(),\r\n                module: user_account_module_1.UserAccountModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.EFeatureAppModule.STOCK.toLowerCase(),\r\n                module: stocks_module_1.StocksModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.EFeatureAppModule.Setting.toLowerCase(),\r\n                module: settings_module_1.SettingsModule\r\n            }\r\n        ]\r\n    }\r\n];\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst account_store_controller_1 = require(\"./controllers/account-store.controller\");\r\nconst account_query_controller_1 = require(\"./controllers/account-query.controller\");\r\nconst account_query_service_1 = require(\"./services/account-query.service\");\r\nconst account_store_service_1 = require(\"./services/account-store.service\");\r\nconst account_schema_1 = require(\"./account.schema\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst dvt_db_model_1 = require(\"../../dvt-db.model\");\r\nconst settings_schema_1 = require(\"../settings/settings.schema\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet UserAccountModule = class UserAccountModule {\r\n};\r\nUserAccountModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [],\r\n        controllers: [account_store_controller_1.AccountStoreController, account_query_controller_1.AccountQueryController],\r\n        providers: [account_query_service_1.AccountQueryService, account_store_service_1.AccountStoreService, lib_nest_modules_1.FileManagerService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                modelSchema: account_schema_1.accountSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                modelSchema: settings_schema_1.ShopBranchSchema\r\n            })\r\n        ],\r\n    })\r\n], UserAccountModule);\r\nexports.UserAccountModule = UserAccountModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.accountSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst dvt_db_model_1 = require(\"../../dvt-db.model\");\r\nexports.accountSchema = new mongoose_1.Schema({\r\n    firstName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    surName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    userName: {\r\n        type: String,\r\n        unique: true\r\n    },\r\n    email: {\r\n        type: String,\r\n    },\r\n    passWord: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    acctType: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    shopBranch: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n        required: true\r\n    },\r\n    avatar: {},\r\n    salt: String,\r\n});\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AccountQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst account_query_service_1 = require(\"./../services/account-query.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet AccountQueryController = class AccountQueryController {\r\n    constructor(accountQueryService) {\r\n        this.accountQueryService = accountQueryService;\r\n    }\r\n    login(body) {\r\n        return this.accountQueryService.loginStaffAccount(body);\r\n    }\r\n    getUserAccounts() {\r\n        return this.accountQueryService.getAccounts();\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(lib_xUtils_1.EAccountQuery.staffProfileLogin),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], AccountQueryController.prototype, \"login\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)('*', '*'),\r\n    (0, common_1.Get)(lib_xUtils_1.EAccountQuery.staffProfiles),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], AccountQueryController.prototype, \"getUserAccounts\", null);\r\nAccountQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EAccountQuery.accountQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof account_query_service_1.AccountQueryService !== \"undefined\" && account_query_service_1.AccountQueryService) === \"function\" ? _a : Object])\r\n], AccountQueryController);\r\nexports.AccountQueryController = AccountQueryController;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AccountStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst account_store_service_1 = require(\"./../services/account-store.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet AccountStoreController = class AccountStoreController {\r\n    constructor(accountStoreService) {\r\n        this.accountStoreService = accountStoreService;\r\n    }\r\n    saveAccount(body) {\r\n        return this.accountStoreService.saveAccount(body);\r\n    }\r\n    deleteAccount(accountId) {\r\n        return this.accountStoreService.deleteAccount(accountId);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.EAccountStore.profile),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], AccountStoreController.prototype, \"saveAccount\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Delete)(lib_xUtils_1.EAccountStore.profile + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], AccountStoreController.prototype, \"deleteAccount\", null);\r\nAccountStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EAccountStore.accountStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof account_store_service_1.AccountStoreService !== \"undefined\" && account_store_service_1.AccountStoreService) === \"function\" ? _a : Object])\r\n], AccountStoreController);\r\nexports.AccountStoreController = AccountStoreController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AccountQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst dvt_db_model_1 = require(\"../../../dvt-db.model\");\r\nlet AccountQueryService = class AccountQueryService {\r\n    constructor(userAccountModel, accountService, jwtService, cls) {\r\n        this.userAccountModel = userAccountModel;\r\n        this.accountService = accountService;\r\n        this.jwtService = jwtService;\r\n        this.cls = cls;\r\n        this.accountService.accountModelDvt = userAccountModel;\r\n    }\r\n    loginStaffAccount(staff) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const user = yield this.userAccountModel.findOne({\r\n                userName: staff.userName,\r\n            });\r\n            if (!user)\r\n                throw new common_1.ForbiddenException('Invalid user credentials, please try again.');\r\n            const userInfo = yield this.userAccountModel.findOne({\r\n                _id: user === null || user === void 0 ? void 0 : user._id,\r\n            }, { salt: 0, passWord: 0 }).populate([\r\n                {\r\n                    model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                    path: 'shopBranch',\r\n                    select: 'branchName',\r\n                    options: { withDeleted: true }\r\n                }\r\n            ]);\r\n            return {\r\n                token: this.jwtService.jwtSign(this.accountService.decryptAccountPassword(user, staff.passWord), 'shopBranch', 'email'),\r\n                staff: userInfo,\r\n            };\r\n        });\r\n    }\r\n    getAccounts() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const accounts = yield this.userAccountModel.find({}, { salt: 0, passWord: 0 }).populate([\r\n                {\r\n                    path: 'shopBranch',\r\n                    model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                    select: 'branchName',\r\n                    options: { withDeleted: true },\r\n                }\r\n            ]);\r\n            return accounts;\r\n            // .filter((account)=>account.email !== 'ibnadam.net@gmail.com')\r\n        });\r\n    }\r\n};\r\nAccountQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.userAccountModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof lib_nest_modules_1.AccountService !== \"undefined\" && lib_nest_modules_1.AccountService) === \"function\" ? _b : Object, typeof (_c = typeof lib_serverConfig_1.JwtService !== \"undefined\" && lib_serverConfig_1.JwtService) === \"function\" ? _c : Object, typeof (_d = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _d : Object])\r\n], AccountQueryService);\r\nexports.AccountQueryService = AccountQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AccountStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst dvt_db_model_1 = require(\"../../../dvt-db.model\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet AccountStoreService = class AccountStoreService {\r\n    constructor(shopBranchModel, userAccountModel, accountService, fileManagerService) {\r\n        this.shopBranchModel = shopBranchModel;\r\n        this.userAccountModel = userAccountModel;\r\n        this.accountService = accountService;\r\n        this.fileManagerService = fileManagerService;\r\n        this.accountService.accountModelDvt = this.userAccountModel;\r\n    }\r\n    saveAccount(accountForm) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            this.fileManagerService.model = this.userAccountModel;\r\n            const shopBranch = yield this.shopBranchModel.findOne({ branchName: accountForm.shopBranch });\r\n            accountForm.shopBranch = shopBranch === null || shopBranch === void 0 ? void 0 : shopBranch._id;\r\n            if (accountForm === null || accountForm === void 0 ? void 0 : accountForm._id) {\r\n                const account = yield this.userAccountModel.findByIdAndUpdate(accountForm._id, this.accountService.encryptAccountPassword(accountForm));\r\n                if (account === null || account === void 0 ? void 0 : account._id)\r\n                    return this.userAccountModel.find({}, { salt: 0, passWord: 0 }).populate([\r\n                        {\r\n                            path: 'shopBranch',\r\n                            model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                            select: 'branchName',\r\n                            options: { withDeleted: true },\r\n                        }\r\n                    ]);\r\n            }\r\n            else {\r\n                const account = yield this.userAccountModel.create(this.accountService.encryptAccountPassword(accountForm));\r\n                if (account === null || account === void 0 ? void 0 : account._id)\r\n                    return this.userAccountModel.find({}, { salt: 0, passWord: 0 }).populate([\r\n                        {\r\n                            path: 'shopBranch',\r\n                            model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                            select: 'branchName',\r\n                            options: { withDeleted: true },\r\n                        }\r\n                    ]);\r\n            }\r\n        });\r\n    }\r\n    deleteAccount(accountId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const accountToDelete = yield this.userAccountModel.findById(accountId);\r\n            if (accountToDelete.email == 'ibnadam.net@gmail.com')\r\n                return;\r\n            const account = yield this.userAccountModel.findByIdAndDelete(accountId, { new: true });\r\n            if (account === null || account === void 0 ? void 0 : account._id)\r\n                return this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n            throw new common_1.NotFoundException(\"Error occured, account not deleted please try again.\");\r\n        });\r\n    }\r\n};\r\nAccountStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.shopBranchModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.userAccountModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof lib_nest_modules_1.AccountService !== \"undefined\" && lib_nest_modules_1.AccountService) === \"function\" ? _c : Object, typeof (_d = typeof lib_nest_modules_1.FileManagerService !== \"undefined\" && lib_nest_modules_1.FileManagerService) === \"function\" ? _d : Object])\r\n], AccountStoreService);\r\nexports.AccountStoreService = AccountStoreService;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst settings_query_service_1 = require(\"./../services/settings-query.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet SettingsQueryController = class SettingsQueryController {\r\n    constructor(settingsQueryService) {\r\n        this.settingsQueryService = settingsQueryService;\r\n    }\r\n    getShopBranches() {\r\n        return this.settingsQueryService.getShopBranches();\r\n    }\r\n    getShopExpenditures(sDate, eDate, shopBranch) {\r\n        return this.settingsQueryService.getShopExpenditures(JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}'), shopBranch);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.shopBranch),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getShopBranches\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.expenditure),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__param(2, (0, common_1.Query)('shopBranch')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getShopExpenditures\", null);\r\nSettingsQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ESettingsQuery.settingsQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof settings_query_service_1.SettingsQueryService !== \"undefined\" && settings_query_service_1.SettingsQueryService) === \"function\" ? _a : Object])\r\n], SettingsQueryController);\r\nexports.SettingsQueryController = SettingsQueryController;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst settings_store_service_1 = require(\"./../services/settings-store.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet SettingsStoreController = class SettingsStoreController {\r\n    constructor(settingsStoreService) {\r\n        this.settingsStoreService = settingsStoreService;\r\n    }\r\n    saveShopBranch(branch) {\r\n        return this.settingsStoreService.saveShopBranch(branch);\r\n    }\r\n    assignToShop(shopBranchId) {\r\n        return this.settingsStoreService.asignToShop(shopBranchId);\r\n    }\r\n    save(expense) {\r\n        return this.settingsStoreService.saveShopExpenditure(expense);\r\n    }\r\n    deleteBranch(branchId) {\r\n        return this.settingsStoreService.deleteShopBranch(branchId);\r\n    }\r\n    deleteExpenditure(expenseId) {\r\n        return this.settingsStoreService.deleteExpenditure(expenseId);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.shopBranch),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.IShopBranch !== \"undefined\" && lib_xUtils_1.IShopBranch) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"saveShopBranch\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Put)(lib_xUtils_1.ESettingsStore.shopBranch + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"assignToShop\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.expenditure),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = typeof lib_xUtils_1.IVetExpenditure !== \"undefined\" && lib_xUtils_1.IVetExpenditure) === \"function\" ? _c : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"save\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ESettingsStore.shopBranch + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"deleteBranch\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ESettingsStore.expenditure + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"deleteExpenditure\", null);\r\nSettingsStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ESettingsStore.settingsStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof settings_store_service_1.SettingsStoreService !== \"undefined\" && settings_store_service_1.SettingsStoreService) === \"function\" ? _a : Object])\r\n], SettingsStoreController);\r\nexports.SettingsStoreController = SettingsStoreController;\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst dvt_db_model_1 = require(\"../../../dvt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nlet SettingsQueryService = class SettingsQueryService {\r\n    constructor(shopBranchModel, shopExpenditureModel) {\r\n        this.shopBranchModel = shopBranchModel;\r\n        this.shopExpenditureModel = shopExpenditureModel;\r\n    }\r\n    getShopBranches() {\r\n        return this.shopBranchModel.find({});\r\n    }\r\n    getShopExpenditures(sDate, eDate, branch) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const shopBranch = yield this.shopBranchModel.findOne({ branchName: branch });\r\n            if (shopBranch)\r\n                return this.shopExpenditureModel.find({\r\n                    shopBranch: new mongoose_1.Types.ObjectId(shopBranch._id),\r\n                    expenseDate: {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate)),\r\n                    }\r\n                }).populate([\r\n                    {\r\n                        path: 'shopBranch',\r\n                        model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                        select: 'branchName',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                    {\r\n                        path: 'userAccount',\r\n                        model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                        select: 'userName firstName surName',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                ]);\r\n            return this.shopExpenditureModel.find({\r\n                expenseDate: {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate)),\r\n                }\r\n            }).populate([\r\n                {\r\n                    path: 'shopBranch',\r\n                    model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                    select: 'branchName',\r\n                    options: { withDeleted: true },\r\n                },\r\n                {\r\n                    path: 'userAccount',\r\n                    model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                    select: 'userName firstName surName',\r\n                    options: { withDeleted: true },\r\n                },\r\n            ]);\r\n        });\r\n    }\r\n};\r\nSettingsQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.shopBranchModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.shopExpenditureModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object])\r\n], SettingsQueryService);\r\nexports.SettingsQueryService = SettingsQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e, _f;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst dvt_db_model_1 = require(\"../../../dvt-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet SettingsStoreService = class SettingsStoreService {\r\n    constructor(shopBranchModel, shopExpenditureModel, cls, stockItemModel, purchaseModel, saleModel) {\r\n        this.shopBranchModel = shopBranchModel;\r\n        this.shopExpenditureModel = shopExpenditureModel;\r\n        this.cls = cls;\r\n        this.stockItemModel = stockItemModel;\r\n        this.purchaseModel = purchaseModel;\r\n        this.saleModel = saleModel;\r\n    }\r\n    saveShopBranch(branch) {\r\n        if (branch === null || branch === void 0 ? void 0 : branch._id) {\r\n            return this.shopBranchModel.findByIdAndUpdate(branch._id, branch, {\r\n                new: true\r\n            });\r\n        }\r\n        else {\r\n            return this.shopBranchModel.create(branch);\r\n        }\r\n    }\r\n    saveShopExpenditure(expense) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const shopBranch = yield this.shopBranchModel.findOne({ branchName: expense.shopBranch });\r\n            expense.userAccount = this.cls.get('contextUser._id');\r\n            expense.shopBranch = shopBranch === null || shopBranch === void 0 ? void 0 : shopBranch._id;\r\n            return this.shopExpenditureModel.create(expense);\r\n        });\r\n    }\r\n    asignToShop(branchId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const shopBranch = yield this.shopBranchModel.findById(branchId);\r\n            const updateAllPurchases = yield this.purchaseModel.updateMany({}, {\r\n                $set: {\r\n                    shopBranch: shopBranch._id\r\n                }\r\n            });\r\n            const updateAllStockItems = yield this.stockItemModel.updateMany({}, {\r\n                $set: {\r\n                    shopBranch: shopBranch._id\r\n                }\r\n            });\r\n            const updateAllSales = yield this.saleModel.updateMany({}, {\r\n                $set: {\r\n                    shopBranch: shopBranch._id\r\n                }\r\n            });\r\n            return {\r\n                updateAllPurchases,\r\n                updateAllStockItems,\r\n                updateAllSales\r\n            };\r\n        });\r\n    }\r\n    deleteShopBranch(branchId) {\r\n        return this.shopBranchModel.findByIdAndDelete(branchId, { new: true });\r\n    }\r\n    deleteExpenditure(expenseId) {\r\n        return this.shopExpenditureModel.findByIdAndDelete(expenseId, { new: true });\r\n    }\r\n};\r\nSettingsStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.shopBranchModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.shopExpenditureModel)),\r\n    tslib_1.__param(3, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.stockItemModel)),\r\n    tslib_1.__param(4, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.purchaseModel)),\r\n    tslib_1.__param(5, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.saleModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _c : Object, typeof (_d = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _d : Object, typeof (_e = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _e : Object, typeof (_f = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _f : Object])\r\n], SettingsStoreService);\r\nexports.SettingsStoreService = SettingsStoreService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst settings_query_service_1 = require(\"./services/settings-query.service\");\r\nconst settings_store_service_1 = require(\"./services/settings-store.service\");\r\nconst settings_store_controller_1 = require(\"./controllers/settings-store.controller\");\r\nconst settings_query_controller_1 = require(\"./controllers/settings-query.controller\");\r\nconst dvt_db_model_1 = require(\"../../dvt-db.model\");\r\nconst settings_schema_1 = require(\"./settings.schema\");\r\nconst db_providers_1 = require(\"libs/lib-db-config/src/lib/db.providers\");\r\nconst inventory_schema_1 = require(\"../../core/inventory/inventory.schema\");\r\nconst dispensary_schema_1 = require(\"../../core/dispensary/dispensary.schema\");\r\nlet SettingsModule = class SettingsModule {\r\n};\r\nSettingsModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [],\r\n        providers: [\r\n            settings_query_service_1.SettingsQueryService,\r\n            settings_store_service_1.SettingsStoreService,\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                modelSchema: settings_schema_1.ShopBranchSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.shopExpenditureModel,\r\n                modelSchema: settings_schema_1.ShopExpenditureSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.stockItemModel,\r\n                modelSchema: inventory_schema_1.StockItemSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.saleModel,\r\n                modelSchema: dispensary_schema_1.saleSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.purchaseModel,\r\n                modelSchema: inventory_schema_1.StockPurchaseSchema,\r\n            }),\r\n        ],\r\n        controllers: [\r\n            settings_store_controller_1.SettingsStoreController,\r\n            settings_query_controller_1.SettingsQueryController\r\n        ]\r\n    })\r\n], SettingsModule);\r\nexports.SettingsModule = SettingsModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ShopExpenditureSchema = exports.ShopBranchSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst dvt_db_model_1 = require(\"../../dvt-db.model\");\r\nexports.ShopBranchSchema = new mongoose_1.Schema({\r\n    branchName: {\r\n        required: true,\r\n        type: String,\r\n        unique: true\r\n    },\r\n    branchLocation: String,\r\n    branchContact: String\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.ShopExpenditureSchema = new mongoose_1.Schema({\r\n    expenseAmount: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    expenseRemark: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    expenseDate: {\r\n        type: Date,\r\n        required: true\r\n    },\r\n    shopBranch: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n        required: true\r\n    },\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: dvt_db_model_1.EVetDbModels.userAccountModel\r\n    }\r\n}, { timestamps: true });\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DispensaryQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst dispensary_query_service_1 = require(\"../services/dispensary-query.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet DispensaryQueryController = class DispensaryQueryController {\r\n    constructor(dispensaryQueryService) {\r\n        this.dispensaryQueryService = dispensaryQueryService;\r\n    }\r\n    getSaleItems(branch) {\r\n        // console.log('Query ', branch);\r\n        return this.dispensaryQueryService.getSaleItems(branch);\r\n    }\r\n    getSalesHistory(date, branch) {\r\n        return this.dispensaryQueryService.getSalesHistory(JSON.parse(date), branch);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EVetDispensaryQuery.saleItems),\r\n    tslib_1.__param(0, (0, common_1.Query)('branch')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DispensaryQueryController.prototype, \"getSaleItems\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EVetDispensaryQuery.saleHistory),\r\n    tslib_1.__param(0, (0, common_1.Query)('date')),\r\n    tslib_1.__param(1, (0, common_1.Query)('branch')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DispensaryQueryController.prototype, \"getSalesHistory\", null);\r\nDispensaryQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EVetDispensaryQuery.dispensaryQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof dispensary_query_service_1.DispensaryQueryService !== \"undefined\" && dispensary_query_service_1.DispensaryQueryService) === \"function\" ? _a : Object])\r\n], DispensaryQueryController);\r\nexports.DispensaryQueryController = DispensaryQueryController;\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DispensaryStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst dispensary_store_service_1 = require(\"../services/dispensary-store.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet DispensaryStoreController = class DispensaryStoreController {\r\n    constructor(dispensaryStoreService) {\r\n        this.dispensaryStoreService = dispensaryStoreService;\r\n    }\r\n    saveSale(sale) {\r\n        return this.dispensaryStoreService.saveSale(sale);\r\n    }\r\n    DeleteSaleItem(soldItemId, itemId) {\r\n        return this.dispensaryStoreService.deleteSaleItem(soldItemId, itemId);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)('*', '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.EVetDispensaryStore.sale),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.IVetSale !== \"undefined\" && lib_xUtils_1.IVetSale) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DispensaryStoreController.prototype, \"saveSale\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Delete)(lib_xUtils_1.EVetDispensaryStore.sale + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__param(1, (0, common_1.Query)('itemId')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String, String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DispensaryStoreController.prototype, \"DeleteSaleItem\", null);\r\nDispensaryStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EVetDispensaryStore.dispensaryStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof dispensary_store_service_1.DispensaryStoreService !== \"undefined\" && dispensary_store_service_1.DispensaryStoreService) === \"function\" ? _a : Object])\r\n], DispensaryStoreController);\r\nexports.DispensaryStoreController = DispensaryStoreController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DispensaryModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst dispensary_store_controller_1 = require(\"./controllers/dispensary-store.controller\");\r\nconst dispensary_query_controller_1 = require(\"./controllers/dispensary-query.controller\");\r\nconst dispensary_store_service_1 = require(\"./services/dispensary-store.service\");\r\nconst dispensary_query_service_1 = require(\"./services/dispensary-query.service\");\r\nconst inventory_schema_1 = require(\"../inventory/inventory.schema\");\r\nconst dispensary_schema_1 = require(\"./dispensary.schema\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst dvt_db_model_1 = require(\"../../dvt-db.model\");\r\nconst settings_schema_1 = require(\"../../common/settings/settings.schema\");\r\nlet DispensaryModule = class DispensaryModule {\r\n};\r\nDispensaryModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        controllers: [dispensary_store_controller_1.DispensaryStoreController, dispensary_query_controller_1.DispensaryQueryController],\r\n        providers: [\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.stockItemModel,\r\n                modelSchema: inventory_schema_1.StockItemSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.saleModel,\r\n                modelSchema: dispensary_schema_1.saleSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.saleItemModel,\r\n                modelSchema: dispensary_schema_1.saleItemSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                modelSchema: settings_schema_1.ShopBranchSchema\r\n            }),\r\n            dispensary_store_service_1.DispensaryStoreService, dispensary_query_service_1.DispensaryQueryService,\r\n        ]\r\n    })\r\n], DispensaryModule);\r\nexports.DispensaryModule = DispensaryModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.saleSchema = exports.saleItemSchema = void 0;\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst dvt_db_model_1 = require(\"../../dvt-db.model\");\r\nexports.saleItemSchema = new mongoose_1.Schema({\r\n    id: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: lib_dbConfig_1.EVetModelProvider.stockItemModel\r\n    },\r\n    itemName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    quantity: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    quantityRemaining: Number,\r\n    unitCostPrice: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    unitSellingPrice: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    amount: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    deleted: Boolean\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.saleSchema = new mongoose_1.Schema({\r\n    invoiceNo: String,\r\n    payMethod: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    shopBranch: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n        required: true\r\n    },\r\n    saleItems: [exports.saleItemSchema],\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: lib_dbConfig_1.EVetModelProvider.userAccountModel\r\n    }\r\n}, { timestamps: true });\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DispensaryQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst dvt_db_model_1 = require(\"../../../dvt-db.model\");\r\nlet DispensaryQueryService = class DispensaryQueryService {\r\n    constructor(stockItemModel, saleModel, shopBranchModel) {\r\n        this.stockItemModel = stockItemModel;\r\n        this.saleModel = saleModel;\r\n        this.shopBranchModel = shopBranchModel;\r\n    }\r\n    getSaleItems(branch) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const shopBranch = yield this.shopBranchModel.findOne({ branchName: branch });\r\n            if (!shopBranch) {\r\n                console.log('Error in verifying branch origin.', branch, ' = ', shopBranch);\r\n                return;\r\n            }\r\n            const stockItems = yield this.stockItemModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        shopBranch: shopBranch._id,\r\n                        quantity: {\r\n                            $gte: 1\r\n                        },\r\n                        expiryDate: {\r\n                            $gte: new Date()\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$itemName',\r\n                        id: {\r\n                            $push: '$_id'\r\n                        },\r\n                        quantity: {\r\n                            $sum: '$quantity'\r\n                        },\r\n                        itemName: {\r\n                            $push: '$itemName'\r\n                        },\r\n                        unitCostPrice: {\r\n                            $push: '$unitCostPrice'\r\n                        },\r\n                        unitSellingPrice: {\r\n                            $push: '$unitSellingPrice'\r\n                        },\r\n                        createdAt: {\r\n                            $push: '$createdAt'\r\n                        },\r\n                        expiryDate: {\r\n                            $push: '$expiryDate'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: {\r\n                            $arrayElemAt: ['$id', 0]\r\n                        },\r\n                        itemName: {\r\n                            $arrayElemAt: ['$itemName', 0]\r\n                        },\r\n                        quantity: '$quantity',\r\n                        unitCostPrice: {\r\n                            $arrayElemAt: ['$unitCostPrice', 0]\r\n                        },\r\n                        unitSellingPrice: {\r\n                            $arrayElemAt: ['$unitSellingPrice', 0]\r\n                        },\r\n                        createdAt: {\r\n                            $arrayElemAt: ['$createdAt', 0]\r\n                        },\r\n                        expiryDate: {\r\n                            $arrayElemAt: ['$expiryDate', 0]\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            return stockItems;\r\n            console.log(stockItems, stockItems.length);\r\n        });\r\n    }\r\n    getSalesHistory(dates, branch) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const shopBranch = yield this.shopBranchModel.findOne({ branchName: branch });\r\n            if (branch && shopBranch) {\r\n                return this.saleModel.find({\r\n                    shopBranch: shopBranch._id,\r\n                    createdAt: {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1]))\r\n                    }\r\n                }).sort({\r\n                    createdAt: -1\r\n                }).populate([\r\n                    {\r\n                        path: 'shopBranch',\r\n                        model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                        select: 'branchName',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                    {\r\n                        path: 'userAccount',\r\n                        model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                        select: 'email userName firstName surName',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                    {\r\n                        path: 'saleItems.deletedBy',\r\n                        model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                        select: 'email userName firstName surName',\r\n                        options: { withDeleted: true },\r\n                    }\r\n                ]);\r\n            }\r\n            return this.saleModel.find({\r\n                createdAt: {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1]))\r\n                }\r\n            }).sort({\r\n                createdAt: -1\r\n            }).populate([\r\n                {\r\n                    path: 'shopBranch',\r\n                    model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                    select: 'branchName',\r\n                    options: { withDeleted: true },\r\n                },\r\n                {\r\n                    path: 'userAccount',\r\n                    model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                    select: 'email userName firstName surName',\r\n                    options: { withDeleted: true },\r\n                },\r\n                {\r\n                    path: 'saleItems.deletedBy',\r\n                    model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                    select: 'email userName firstName surName',\r\n                    options: { withDeleted: true },\r\n                }\r\n            ]);\r\n        });\r\n    }\r\n};\r\nDispensaryQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.stockItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.saleModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.shopBranchModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object])\r\n], DispensaryQueryService);\r\nexports.DispensaryQueryService = DispensaryQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DispensaryStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst date_fns_1 = require(\"date-fns\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst dvt_db_model_1 = require(\"../../../dvt-db.model\");\r\nlet DispensaryStoreService = class DispensaryStoreService {\r\n    constructor(saleModel, stockItemModel, cls) {\r\n        this.saleModel = saleModel;\r\n        this.stockItemModel = stockItemModel;\r\n        this.cls = cls;\r\n    }\r\n    saveSale(sale) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const saleItemsNames = sale.saleItems.map((item) => item.itemName);\r\n            const items = yield this.stockItemModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        shopBranch: new mongoose_1.Types.ObjectId(sale.shopBranch),\r\n                        quantity: { $gte: 1 },\r\n                        expiryDate: { $gte: new Date() },\r\n                        itemName: { $in: saleItemsNames },\r\n                    },\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1,\r\n                    },\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$_id',\r\n                        itemName: { $addToSet: '$itemName' },\r\n                        quantity: { $sum: '$quantity' },\r\n                        createdAt: { $addToSet: '$createdAt' },\r\n                    },\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        itemName: {\r\n                            $arrayElemAt: ['$itemName', 0],\r\n                        },\r\n                        createdAt: {\r\n                            $arrayElemAt: ['$createdAt', 0],\r\n                        },\r\n                        quantity: '$quantity'\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1,\r\n                        itemName: 1,\r\n                    }\r\n                }\r\n            ]);\r\n            let stockItems = [];\r\n            sale.saleItems.forEach((item) => {\r\n                let qttyInputted = parseInt(item.quantity);\r\n                const totQttyAvail = items.filter((itm) => itm.itemName == item.itemName).reduce((tot, cur) => tot + cur.quantity, 0);\r\n                // console.log(items);\r\n                // return\r\n                if (qttyInputted > totQttyAvail) {\r\n                    // // console.log(qttyInputted, totQttyAvail);\r\n                    // return\r\n                    throw new common_1.ConflictException(item.itemName + ' remains ' + totQttyAvail //item.quantity,\r\n                    );\r\n                }\r\n                const itemVariants = items.filter((itm) => itm.itemName == item.itemName)\r\n                    .sort((a, b) => new Date(a.createdAt).getTime() < new Date(b.createdAt).getTime() ? -1 : 1);\r\n                let qttyToDeduct = qttyInputted;\r\n                itemVariants.forEach((itm) => {\r\n                    if (itm.quantity >= qttyInputted) {\r\n                        // itm.quantity -= qttyInputted\r\n                        qttyToDeduct = qttyInputted;\r\n                        qttyInputted -= qttyToDeduct;\r\n                        // //\r\n                        //   console.log(qttyToDeduct);\r\n                        // qttyInputted = qttyInputted -\r\n                    }\r\n                    else {\r\n                        qttyToDeduct = itm.quantity;\r\n                        qttyInputted -= qttyToDeduct;\r\n                    }\r\n                    // console.log(itm.itemName, '=', itm.quantity, qttyToDeduct, itm.quantity - qttyToDeduct);\r\n                    // return\r\n                    if (qttyToDeduct > 0) {\r\n                        stockItems.push({\r\n                            id: itm._id,\r\n                            itemName: itm.itemName,\r\n                            quantity: qttyToDeduct,\r\n                            quantityRemaining: itm.quantity - qttyToDeduct,\r\n                            unitCostPrice: item.unitCostPrice,\r\n                            unitSellingPrice: item.unitSellingPrice,\r\n                            amount: qttyToDeduct * item.unitSellingPrice\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n            // return\r\n            let invoiceSerial = yield this.saleModel.find({\r\n                createdAt: {\r\n                    $gte: (0, date_fns_1.startOfDay)(new Date()),\r\n                    $lte: (0, date_fns_1.endOfDay)(new Date())\r\n                }\r\n            });\r\n            invoiceSerial = invoiceSerial.length + 1;\r\n            sale.saleItems = stockItems;\r\n            sale.invoiceNo = (0, lib_xUtils_1.padNumber)(invoiceSerial, 3, '0');\r\n            sale.userAccount = this.cls.get('contextUser._id');\r\n            const saveSale = yield this.saleModel.create(sale);\r\n            if (saveSale === null || saveSale === void 0 ? void 0 : saveSale._id) {\r\n                for (let i = 0; i < stockItems.length; i++) {\r\n                    yield this.stockItemModel.findOneAndUpdate({\r\n                        _id: stockItems[i].id,\r\n                        shopBranch: new mongoose_1.Types.ObjectId(sale.shopBranch)\r\n                    }, {\r\n                        $inc: {\r\n                            quantity: -stockItems[i].quantity,\r\n                        },\r\n                    }, {\r\n                        strict: true,\r\n                    });\r\n                }\r\n            }\r\n            return saveSale;\r\n        });\r\n    }\r\n    deleteSaleItem(soldItemId, itemId) {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const deletion = yield this.saleModel.findOneAndUpdate({\r\n                'saleItems._id': { $in: [soldItemId] }\r\n            }, {\r\n                $set: {\r\n                    'saleItems.$.deleted': true,\r\n                    'saleItems.$.deletedBy': this.cls.get('contextUser._id'),\r\n                    'saleItems.$.deletedAt': new Date(),\r\n                }\r\n            }, {\r\n                new: true,\r\n                strict: false,\r\n                strictQuery: false\r\n            });\r\n            if (!deletion)\r\n                throw new Error(\"Error, item can not be deleted.\");\r\n            const deleteItem = (_a = deletion === null || deletion === void 0 ? void 0 : deletion.saleItems) === null || _a === void 0 ? void 0 : _a.find((item) => item._id.toString() == soldItemId && item.deleted);\r\n            let returnQtty;\r\n            if (deleteItem) {\r\n                returnQtty = yield this.stockItemModel.findByIdAndUpdate(itemId, {\r\n                    $inc: {\r\n                        quantity: deleteItem.quantity\r\n                    }\r\n                }, { new: true });\r\n            }\r\n            return returnQtty ? deleteItem : null;\r\n        });\r\n    }\r\n};\r\nDispensaryStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.saleModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.stockItemModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _c : Object])\r\n], DispensaryStoreService);\r\nexports.DispensaryStoreService = DispensaryStoreService;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DashboardController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst dashboard_service_1 = require(\"../services/dashboard.service\");\r\nlet DashboardController = class DashboardController {\r\n    constructor(dashboardService) {\r\n        this.dashboardService = dashboardService;\r\n    }\r\n    dashboardOverview(sDate, eDate) {\r\n        return this.dashboardService.getStoreWorth();\r\n    }\r\n    dashboardIncome(sDate, eDate) {\r\n        return this.dashboardService.getIncome([JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}')]);\r\n    }\r\n    dashboardCharts(sDate, eDate, range) {\r\n        return this.dashboardService.dashboardCharts([JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}')], range);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EVetDashboardQuery.overview),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DashboardController.prototype, \"dashboardOverview\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EVetDashboardQuery.income),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DashboardController.prototype, \"dashboardIncome\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EVetDashboardQuery.dashboard),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__param(2, (0, common_1.Query)('range')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DashboardController.prototype, \"dashboardCharts\", null);\r\nDashboardController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EVetDashboardQuery.dashboardQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof dashboard_service_1.DashboardService !== \"undefined\" && dashboard_service_1.DashboardService) === \"function\" ? _a : Object])\r\n], DashboardController);\r\nexports.DashboardController = DashboardController;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StockQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst stock_query_service_1 = require(\"../services/stock-query.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet StockQueryController = class StockQueryController {\r\n    constructor(stockQueryService) {\r\n        this.stockQueryService = stockQueryService;\r\n    }\r\n    getPurchases(stockItemId) {\r\n        if (stockItemId)\r\n            return this.stockQueryService.getStockItemPurchase(stockItemId);\r\n        return this.stockQueryService.getPurchases();\r\n    }\r\n    getActiveStockItems(queryType, branch) {\r\n        return this.stockQueryService.getActiveStocks(queryType, branch);\r\n    }\r\n    getOldStockItems() {\r\n        return this.stockQueryService.getOldStockItems();\r\n    }\r\n    getOutOfStock(osType, branch) {\r\n        return this.stockQueryService.getOutOfStock(osType, branch);\r\n    }\r\n    getPreviousVendors() {\r\n        return this.stockQueryService.getPreviousVendors();\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Standard', 'Super'], '*'),\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.stockPurchase),\r\n    tslib_1.__param(0, (0, common_1.Query)('stockItemId')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StockQueryController.prototype, \"getPurchases\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Standard', 'Super'], '*'),\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.activeStocks),\r\n    tslib_1.__param(0, (0, common_1.Query)('query-type')),\r\n    tslib_1.__param(1, (0, common_1.Query)('branch')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StockQueryController.prototype, \"getActiveStockItems\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.oldStocks),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StockQueryController.prototype, \"getOldStockItems\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.outOfStocks),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('branch')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StockQueryController.prototype, \"getOutOfStock\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.purchaseVendors),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StockQueryController.prototype, \"getPreviousVendors\", null);\r\nStockQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EInventoryStockQuery.stockQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof stock_query_service_1.StockQueryService !== \"undefined\" && stock_query_service_1.StockQueryService) === \"function\" ? _a : Object])\r\n], StockQueryController);\r\nexports.StockQueryController = StockQueryController;\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StockStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst stock_store_service_1 = require(\"../services/stock-store.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet StockStoreController = class StockStoreController {\r\n    constructor(stockStoreService) {\r\n        this.stockStoreService = stockStoreService;\r\n    }\r\n    savePurchase(purchase) {\r\n        return this.stockStoreService.savePurchase(purchase);\r\n    }\r\n    moderateStockLevel(body) {\r\n        return this.stockStoreService.moderateStockLevel(body);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Standard', 'Super'], '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.EInventoryStockStore.stockPurchase),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.IVetStockPurchase !== \"undefined\" && lib_xUtils_1.IVetStockPurchase) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StockStoreController.prototype, \"savePurchase\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(lib_xUtils_1.EInventoryStockStore.stockLevelModerator),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StockStoreController.prototype, \"moderateStockLevel\", null);\r\nStockStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EInventoryStockStore.stockStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof stock_store_service_1.StockStoreService !== \"undefined\" && stock_store_service_1.StockStoreService) === \"function\" ? _a : Object])\r\n], StockStoreController);\r\nexports.StockStoreController = StockStoreController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.InventoryModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst stock_query_controller_1 = require(\"./controllers/stock-query.controller\");\r\nconst stock_store_controller_1 = require(\"./controllers/stock-store.controller\");\r\nconst stock_store_service_1 = require(\"./services/stock-store.service\");\r\nconst stock_query_service_1 = require(\"./services/stock-query.service\");\r\nconst inventory_schema_1 = require(\"./inventory.schema\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst dispensary_schema_1 = require(\"../dispensary/dispensary.schema\");\r\nconst dashboard_controller_1 = require(\"./controllers/dashboard.controller\");\r\nconst dashboard_service_1 = require(\"./services/dashboard.service\");\r\nconst dvt_db_model_1 = require(\"../../dvt-db.model\");\r\nconst settings_schema_1 = require(\"../../common/settings/settings.schema\");\r\nlet InventoryModule = class InventoryModule {\r\n};\r\nInventoryModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        controllers: [\r\n            stock_query_controller_1.StockQueryController,\r\n            stock_store_controller_1.StockStoreController,\r\n            dashboard_controller_1.DashboardController,\r\n        ],\r\n        providers: [\r\n            stock_store_service_1.StockStoreService,\r\n            stock_query_service_1.StockQueryService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.stockItemModel,\r\n                modelSchema: inventory_schema_1.StockItemSchema,\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.purchaseModel,\r\n                modelSchema: inventory_schema_1.StockPurchaseSchema,\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                modelSchema: settings_schema_1.ShopBranchSchema,\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.saleModel,\r\n                modelSchema: dispensary_schema_1.saleSchema,\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: dvt_db_model_1.EVetDbModels.shopExpenditureModel,\r\n                modelSchema: settings_schema_1.ShopExpenditureSchema\r\n            }),\r\n            dashboard_service_1.DashboardService,\r\n        ],\r\n    })\r\n], InventoryModule);\r\nexports.InventoryModule = InventoryModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StockPurchaseSchema = exports.StockItemSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst dvt_db_model_1 = require(\"../../dvt-db.model\");\r\nexports.StockItemSchema = new mongoose_1.Schema({\r\n    itemName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    expiryDate: Date,\r\n    quantity: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    unitCostPrice: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    unitSellingPrice: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    shopBranch: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n        required: true\r\n    }\r\n}, { timestamps: true });\r\nexports.StockPurchaseSchema = new mongoose_1.Schema({\r\n    shopBranch: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n        required: true\r\n    },\r\n    vendor: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    itemsPurchased: [\r\n        {\r\n            type: mongoose_1.Types.ObjectId,\r\n            ref: dvt_db_model_1.EVetDbModels.stockItemModel\r\n        }\r\n    ],\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n    },\r\n}, { timestamps: true });\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DashboardService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst dvt_db_model_1 = require(\"../../../dvt-db.model\");\r\nlet DashboardService = class DashboardService {\r\n    constructor(stockItemModel, \r\n    // @Inject(EVetDbModels.purchaseModel) private purchaseModel: SoftDeleteModel<StockPurchaseDocument>,\r\n    saleModel, \r\n    // @Inject(EVetDbModels.shopBranchModel) private shopBranchModel: SoftDeleteModel<TShopBranchSchemaDocument>,\r\n    shopExpenditureModel) {\r\n        this.stockItemModel = stockItemModel;\r\n        this.saleModel = saleModel;\r\n        this.shopExpenditureModel = shopExpenditureModel;\r\n    }\r\n    getIncome(dates) {\r\n        var _a, _b, _c;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const salesAndProfit = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: {\r\n                            $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                            $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1])),\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: ((_a = dvt_db_model_1.EVetDbModels.shopBranchModel) === null || _a === void 0 ? void 0 : _a.toLowerCase()) + 'es',\r\n                        foreignField: \"_id\",\r\n                        localField: \"shopBranch\",\r\n                        as: \"shopBranch\"\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        shopBranch: {\r\n                            $arrayElemAt: ['$shopBranch', -1]\r\n                        },\r\n                        saleItems: '$saleItems'\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        // 'saleItems.deleted': {$ne: true}\r\n                        $or: [\r\n                            { 'saleItems.deleted': { $exists: false } },\r\n                            { 'saleItems.deleted': !true },\r\n                        ],\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$shopBranch.branchName',\r\n                        saleAmount: {\r\n                            $sum: '$saleItems.amount'\r\n                        },\r\n                        saleProfit: {\r\n                            $sum: {\r\n                                $subtract: [\r\n                                    '$saleItems.amount',\r\n                                    {\r\n                                        $multiply: [\r\n                                            '$saleItems.unitCostPrice',\r\n                                            '$saleItems.quantity',\r\n                                        ],\r\n                                    },\r\n                                ],\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const salesByPayMethod = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: {\r\n                            $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                            $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1])),\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: ((_b = dvt_db_model_1.EVetDbModels.shopBranchModel) === null || _b === void 0 ? void 0 : _b.toLowerCase()) + 'es',\r\n                        foreignField: \"_id\",\r\n                        localField: \"shopBranch\",\r\n                        as: \"shopBranch\"\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        shopBranch: {\r\n                            $arrayElemAt: ['$shopBranch', -1]\r\n                        },\r\n                        saleItems: '$saleItems',\r\n                        payMethod: '$payMethod',\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        // 'saleItems.deleted': {$ne: true}\r\n                        $or: [\r\n                            { 'saleItems.deleted': { $exists: false } },\r\n                            { 'saleItems.deleted': !true },\r\n                        ],\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            payMethod: '$payMethod',\r\n                            shopBranch: '$shopBranch.branchName'\r\n                        },\r\n                        saleAmount: {\r\n                            $sum: '$saleItems.amount'\r\n                        },\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$_id.shopBranch',\r\n                        cash: {\r\n                            $push: {\r\n                                $cond: {\r\n                                    if: { $eq: ['$_id.payMethod', 'Cash'] },\r\n                                    then: '$saleAmount',\r\n                                    else: null\r\n                                }\r\n                            }\r\n                        },\r\n                        bank: {\r\n                            $push: {\r\n                                $cond: {\r\n                                    if: { $eq: ['$_id.payMethod', 'Bank'] },\r\n                                    then: '$saleAmount',\r\n                                    else: null\r\n                                }\r\n                            }\r\n                        },\r\n                        saleAmount: {\r\n                            $sum: '$saleAmount',\r\n                        },\r\n                        // saleProfit: {\r\n                        //   $sum: '$saleProfit',\r\n                        // }\r\n                    }\r\n                },\r\n            ]);\r\n            const salesByDate = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: {\r\n                            $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                            $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1])),\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: ((_c = dvt_db_model_1.EVetDbModels.shopBranchModel) === null || _c === void 0 ? void 0 : _c.toLowerCase()) + 'es',\r\n                        foreignField: \"_id\",\r\n                        localField: \"shopBranch\",\r\n                        as: \"shopBranch\"\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        shopBranch: {\r\n                            $arrayElemAt: ['$shopBranch', -1]\r\n                        },\r\n                        saleItems: '$saleItems',\r\n                        payMethod: '$payMethod',\r\n                        createdAt: '$createdAt',\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        // 'saleItems.deleted': {$ne: true}\r\n                        $or: [\r\n                            { 'saleItems.deleted': { $exists: false } },\r\n                            { 'saleItems.deleted': !true },\r\n                        ],\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            date: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d',\r\n                                    date: '$createdAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            payMethod: '$payMethod',\r\n                            shopBranch: '$shopBranch.branchName'\r\n                        },\r\n                        saleAmount: {\r\n                            $sum: '$saleItems.amount'\r\n                        },\r\n                        // saleProfit: {\r\n                        //   $sum: {\r\n                        //     $subtract: [\r\n                        //       '$saleItems.amount',\r\n                        //       {\r\n                        //         $multiply: [\r\n                        //           '$saleItems.unitCostPrice',\r\n                        //           '$saleItems.quantity',\r\n                        //         ],\r\n                        //       },\r\n                        //     ],\r\n                        //   }\r\n                        // }\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            date: '$_id.date',\r\n                            shopBranch: '$_id.shopBranch'\r\n                        },\r\n                        cash: {\r\n                            $push: {\r\n                                $cond: {\r\n                                    if: { $eq: ['$_id.payMethod', 'Cash'] },\r\n                                    then: '$saleAmount',\r\n                                    else: null\r\n                                }\r\n                            }\r\n                        },\r\n                        bank: {\r\n                            $push: {\r\n                                $cond: {\r\n                                    if: { $eq: ['$_id.payMethod', 'Bank'] },\r\n                                    then: '$saleAmount',\r\n                                    else: null\r\n                                }\r\n                            }\r\n                        },\r\n                        saleAmount: {\r\n                            $sum: '$saleAmount',\r\n                        },\r\n                        // saleProfit: {\r\n                        //   $sum: '$saleProfit',\r\n                        // }\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        '_id.date': -1,\r\n                    }\r\n                }\r\n            ]);\r\n            return {\r\n                salesAndProfit: salesAndProfit,\r\n                salesByPayMethod,\r\n                salesByDate\r\n            };\r\n        });\r\n    }\r\n    getStoreWorth() {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.stockItemModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        quantity: { $gte: 1 }\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: ((_a = dvt_db_model_1.EVetDbModels.shopBranchModel) === null || _a === void 0 ? void 0 : _a.toLowerCase()) + 'es',\r\n                        foreignField: \"_id\",\r\n                        localField: \"shopBranch\",\r\n                        as: \"shopBranch\"\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$shopBranch.branchName',\r\n                        worth: {\r\n                            $sum: {\r\n                                $multiply: ['$quantity', '$unitCostPrice']\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: {\r\n                            $arrayElemAt: ['$_id', -1]\r\n                        },\r\n                        worth: '$worth'\r\n                    }\r\n                }\r\n            ]);\r\n        });\r\n    }\r\n    dashboardCharts(dates, range = 'Daily') {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const salesProfit = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: {\r\n                            $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                            $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1])),\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: ((_a = dvt_db_model_1.EVetDbModels.shopBranchModel) === null || _a === void 0 ? void 0 : _a.toLowerCase()) + 'es',\r\n                        foreignField: \"_id\",\r\n                        localField: \"shopBranch\",\r\n                        as: \"shopBranch\"\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        shopBranch: {\r\n                            $arrayElemAt: ['$shopBranch', -1]\r\n                        },\r\n                        saleItems: '$saleItems'\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        // 'saleItems.deleted': {$ne: true}\r\n                        $or: [\r\n                            { 'saleItems.deleted': { $exists: false } },\r\n                            { 'saleItems.deleted': !true },\r\n                        ],\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$shopBranch.branchName',\r\n                        saleProfit: {\r\n                            $sum: {\r\n                                $subtract: [\r\n                                    '$saleItems.amount',\r\n                                    {\r\n                                        $multiply: [\r\n                                            '$saleItems.unitCostPrice',\r\n                                            '$saleItems.quantity',\r\n                                        ],\r\n                                    },\r\n                                ],\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const expenses = yield ((_b = this.shopExpenditureModel) === null || _b === void 0 ? void 0 : _b.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: {\r\n                            $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                            $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1])),\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: ((_c = dvt_db_model_1.EVetDbModels.shopBranchModel) === null || _c === void 0 ? void 0 : _c.toLowerCase()) + 'es',\r\n                        foreignField: \"_id\",\r\n                        localField: \"shopBranch\",\r\n                        as: \"shopBranch\"\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        shopBranch: {\r\n                            $arrayElemAt: ['$shopBranch', -1]\r\n                        },\r\n                        expenseAmount: '$expenseAmount'\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$shopBranch.branchName',\r\n                        expenseAmount: {\r\n                            $sum: '$expenseAmount'\r\n                        }\r\n                    }\r\n                }\r\n            ]));\r\n            let rangeSales;\r\n            if (range == 'Daily') {\r\n                rangeSales = yield this.saleModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            createdAt: {\r\n                                $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                                $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1])),\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: ((_d = dvt_db_model_1.EVetDbModels.shopBranchModel) === null || _d === void 0 ? void 0 : _d.toLowerCase()) + 'es',\r\n                            foreignField: \"_id\",\r\n                            localField: \"shopBranch\",\r\n                            as: \"shopBranch\"\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            shopBranch: {\r\n                                $arrayElemAt: ['$shopBranch', -1]\r\n                            },\r\n                            saleItems: '$saleItems',\r\n                            createdAt: '$createdAt',\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$saleItems'\r\n                    },\r\n                    {\r\n                        $match: {\r\n                            // 'saleItems.deleted': {$ne: true}\r\n                            $or: [\r\n                                { 'saleItems.deleted': { $exists: false } },\r\n                                { 'saleItems.deleted': !true },\r\n                            ],\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: {\r\n                                date: {\r\n                                    $dateToString: {\r\n                                        format: '%Y-%m-%d',\r\n                                        date: '$createdAt',\r\n                                        timezone: 'Africa/Lagos'\r\n                                    },\r\n                                },\r\n                                shopBranch: '$shopBranch.branchName'\r\n                            },\r\n                            saleAmount: {\r\n                                $sum: '$saleItems.amount'\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id.date',\r\n                            shopBranch: '$_id.shopBranch',\r\n                            saleAmount: '$saleAmount'\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            _id: 1\r\n                        }\r\n                    },\r\n                    {\r\n                        $limit: 7\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$shopBranch',\r\n                            dates: {\r\n                                $push: '$$ROOT'\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            '_id': 1,\r\n                        }\r\n                    }\r\n                ]);\r\n            }\r\n            else if (range == 'Weekly') {\r\n                rangeSales = yield this.saleModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            createdAt: {\r\n                                $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                                $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1])),\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: ((_e = dvt_db_model_1.EVetDbModels.shopBranchModel) === null || _e === void 0 ? void 0 : _e.toLowerCase()) + 'es',\r\n                            foreignField: \"_id\",\r\n                            localField: \"shopBranch\",\r\n                            as: \"shopBranch\"\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            shopBranch: {\r\n                                $arrayElemAt: ['$shopBranch', -1]\r\n                            },\r\n                            saleItems: '$saleItems',\r\n                            createdAt: '$createdAt',\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$saleItems'\r\n                    },\r\n                    {\r\n                        $match: {\r\n                            // 'saleItems.deleted': {$ne: true}\r\n                            $or: [\r\n                                { 'saleItems.deleted': { $exists: false } },\r\n                                { 'saleItems.deleted': !true },\r\n                            ],\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: {\r\n                                date: {\r\n                                    $dateToString: {\r\n                                        format: '%Y-%m-%d',\r\n                                        date: '$createdAt',\r\n                                        timezone: 'Africa/Lagos'\r\n                                    },\r\n                                },\r\n                                shopBranch: '$shopBranch.branchName',\r\n                                week: { $week: { $toDate: '$createdAt' } },\r\n                            },\r\n                            saleAmount: {\r\n                                $sum: '$saleItems.amount'\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: { week: '$_id.week', shopBranch: '$_id.shopBranch' },\r\n                            saleAmount: { $sum: '$saleAmount' }\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id.week',\r\n                            shopBranch: '$_id.shopBranch',\r\n                            saleAmount: '$saleAmount'\r\n                        }\r\n                    },\r\n                    {\r\n                        $limit: 12\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$shopBranch',\r\n                            dates: {\r\n                                $push: '$$ROOT'\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            '_id': 1,\r\n                        }\r\n                    }\r\n                ]);\r\n            }\r\n            else if (range == 'Monthly') {\r\n                rangeSales = yield this.saleModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            createdAt: {\r\n                                $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(dates[0])),\r\n                                $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(dates[1])),\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: ((_f = dvt_db_model_1.EVetDbModels.shopBranchModel) === null || _f === void 0 ? void 0 : _f.toLowerCase()) + 'es',\r\n                            foreignField: \"_id\",\r\n                            localField: \"shopBranch\",\r\n                            as: \"shopBranch\"\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            shopBranch: {\r\n                                $arrayElemAt: ['$shopBranch', -1]\r\n                            },\r\n                            saleItems: '$saleItems',\r\n                            createdAt: '$createdAt',\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$saleItems'\r\n                    },\r\n                    {\r\n                        $match: {\r\n                            // 'saleItems.deleted': {$ne: true}\r\n                            $or: [\r\n                                { 'saleItems.deleted': { $exists: false } },\r\n                                { 'saleItems.deleted': !true },\r\n                            ],\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: {\r\n                                date: {\r\n                                    $dateToString: {\r\n                                        format: '%Y-%m-%d',\r\n                                        date: '$createdAt',\r\n                                        timezone: 'Africa/Lagos'\r\n                                    },\r\n                                },\r\n                                shopBranch: '$shopBranch.branchName',\r\n                                month: { $month: { $toDate: '$createdAt' } },\r\n                            },\r\n                            saleAmount: {\r\n                                $sum: '$saleItems.amount'\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: { month: '$_id.month', shopBranch: '$_id.shopBranch' },\r\n                            saleAmount: { $sum: '$saleAmount' }\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id.month',\r\n                            shopBranch: '$_id.shopBranch',\r\n                            saleAmount: '$saleAmount'\r\n                        }\r\n                    },\r\n                    {\r\n                        $limit: 12\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$shopBranch',\r\n                            dates: {\r\n                                $push: '$$ROOT'\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            '_id': 1,\r\n                        }\r\n                    }\r\n                ]);\r\n            }\r\n            return {\r\n                profitAndExpenditure: [...salesProfit || [], ...expenses || []],\r\n                branchDateRangeSales: rangeSales || []\r\n            };\r\n        });\r\n    }\r\n};\r\nDashboardService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.stockItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.saleModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.shopExpenditureModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object])\r\n], DashboardService);\r\nexports.DashboardService = DashboardService;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StockQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\n// import { EVetDbModels, IHealmahClsStore } from '@healmah-nest';\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\n// import { saleDocument } from '../../dispensary/dispensary.schema';\r\nconst date_fns_1 = require(\"date-fns\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst dvt_db_model_1 = require(\"../../../dvt-db.model\");\r\nlet StockQueryService = class StockQueryService {\r\n    constructor(stockItemModel, purchaseModel, shopBranchModel, saleModel, cls) {\r\n        this.stockItemModel = stockItemModel;\r\n        this.purchaseModel = purchaseModel;\r\n        this.shopBranchModel = shopBranchModel;\r\n        this.saleModel = saleModel;\r\n        this.cls = cls;\r\n    }\r\n    getPurchases() {\r\n        return this.purchaseModel.find({}).sort({ createdAt: -1 })\r\n            .populate([\r\n            {\r\n                path: 'itemsPurchased',\r\n                model: dvt_db_model_1.EVetDbModels.stockItemModel,\r\n            },\r\n            {\r\n                path: 'shopBranch',\r\n                model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                select: 'branchName',\r\n                options: { withDeleted: true },\r\n            },\r\n            {\r\n                path: 'userAccount',\r\n                model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                select: 'acctType email userName firstName surName appModule shopBranch',\r\n                options: { withDeleted: true },\r\n            },\r\n        ]);\r\n        ;\r\n    }\r\n    getActiveStocks(type = 'single', branch) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            console.log(type, branch);\r\n            const shopBranch = yield this.shopBranchModel.findOne({ branchName: branch });\r\n            if (branch && shopBranch) {\r\n                if (type == 'multiple')\r\n                    return this.stockItemModel.find({\r\n                        shopBranch: shopBranch._id,\r\n                        quantity: {\r\n                            $gte: 1\r\n                        }\r\n                    }).sort({\r\n                        itemName: 1,\r\n                        createdAt: -1\r\n                    });\r\n                else\r\n                    return this.stockItemModel.aggregate([\r\n                        {\r\n                            $match: {\r\n                                shopBranch: shopBranch._id,\r\n                                quantity: {\r\n                                    $gte: 1\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            $sort: {\r\n                                createdAt: -1\r\n                            }\r\n                        },\r\n                        {\r\n                            $group: {\r\n                                _id: '$itemName',\r\n                                id: {\r\n                                    $push: '$_id'\r\n                                },\r\n                                quantity: {\r\n                                    $sum: '$quantity'\r\n                                },\r\n                                itemName: {\r\n                                    $push: '$itemName'\r\n                                },\r\n                                unitCostPrice: {\r\n                                    $push: '$unitCostPrice'\r\n                                },\r\n                                unitSellingPrice: {\r\n                                    $push: '$unitSellingPrice'\r\n                                },\r\n                                createdAt: {\r\n                                    $push: '$createdAt'\r\n                                },\r\n                                expiryDate: {\r\n                                    $push: '$expiryDate'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            $project: {\r\n                                _id: {\r\n                                    $arrayElemAt: ['$id', 0]\r\n                                },\r\n                                itemName: {\r\n                                    $arrayElemAt: ['$itemName', 0]\r\n                                },\r\n                                quantity: '$quantity',\r\n                                unitCostPrice: {\r\n                                    $arrayElemAt: ['$unitCostPrice', 0]\r\n                                },\r\n                                unitSellingPrice: {\r\n                                    $arrayElemAt: ['$unitSellingPrice', 0]\r\n                                },\r\n                                createdAt: {\r\n                                    $arrayElemAt: ['$createdAt', 0]\r\n                                },\r\n                                expiryDate: {\r\n                                    $arrayElemAt: ['$expiryDate', 0]\r\n                                },\r\n                            }\r\n                        },\r\n                        {\r\n                            $sort: {\r\n                                itemName: 1\r\n                            }\r\n                        }\r\n                    ]);\r\n            }\r\n            else {\r\n                if (type == 'multiple')\r\n                    return this.stockItemModel.find({\r\n                        quantity: {\r\n                            $gte: 1\r\n                        }\r\n                    }).sort({\r\n                        itemName: 1,\r\n                        createdAt: -1\r\n                    });\r\n                else\r\n                    return this.stockItemModel.aggregate([\r\n                        {\r\n                            $match: {\r\n                                quantity: {\r\n                                    $gte: 1\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            $sort: {\r\n                                createdAt: -1\r\n                            }\r\n                        },\r\n                        {\r\n                            $group: {\r\n                                _id: '$itemName',\r\n                                id: {\r\n                                    $push: '$_id'\r\n                                },\r\n                                quantity: {\r\n                                    $sum: '$quantity'\r\n                                },\r\n                                itemName: {\r\n                                    $push: '$itemName'\r\n                                },\r\n                                unitCostPrice: {\r\n                                    $push: '$unitCostPrice'\r\n                                },\r\n                                unitSellingPrice: {\r\n                                    $push: '$unitSellingPrice'\r\n                                },\r\n                                createdAt: {\r\n                                    $push: '$createdAt'\r\n                                },\r\n                                expiryDate: {\r\n                                    $push: '$expiryDate'\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            $project: {\r\n                                _id: {\r\n                                    $arrayElemAt: ['$id', 0]\r\n                                },\r\n                                itemName: {\r\n                                    $arrayElemAt: ['$itemName', 0]\r\n                                },\r\n                                quantity: '$quantity',\r\n                                unitCostPrice: {\r\n                                    $arrayElemAt: ['$unitCostPrice', 0]\r\n                                },\r\n                                unitSellingPrice: {\r\n                                    $arrayElemAt: ['$unitSellingPrice', 0]\r\n                                },\r\n                                createdAt: {\r\n                                    $arrayElemAt: ['$createdAt', 0]\r\n                                },\r\n                                expiryDate: {\r\n                                    $arrayElemAt: ['$expiryDate', 0]\r\n                                },\r\n                            }\r\n                        },\r\n                        {\r\n                            $sort: {\r\n                                itemName: 1\r\n                            }\r\n                        }\r\n                    ]);\r\n            }\r\n        });\r\n    }\r\n    getStockItemPurchase(stockItemId) {\r\n        return this.purchaseModel.findOne({\r\n            itemsPurchased: stockItemId\r\n        })\r\n            .populate([\r\n            {\r\n                path: 'itemsPurchased',\r\n                model: dvt_db_model_1.EVetDbModels.stockItemModel,\r\n            },\r\n            {\r\n                path: 'shopBranch',\r\n                model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                select: 'branchName',\r\n                options: { withDeleted: true },\r\n            },\r\n            {\r\n                path: 'userAccount',\r\n                model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                select: 'acctType email userName firstName surName appModule shopBranch',\r\n                options: { withDeleted: true },\r\n            },\r\n        ]);\r\n    }\r\n    getOldStockItems() {\r\n        // console.log('Old for Preview');\r\n        return this.stockItemModel.aggregate([\r\n            {\r\n                $sort: {\r\n                    createdAt: -1,\r\n                },\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: '$itemName',\r\n                    items: { $push: '$$ROOT' }\r\n                    // unitCostPrice: { $addToSet: '$unitCostPrice' },\r\n                    // unitSellingPrice: { $addToSet: '$unitSellingPrice' },\r\n                },\r\n            },\r\n            {\r\n                $unwind: '$items'\r\n            },\r\n            {\r\n                $sort: {\r\n                    'items.itemName': -1,\r\n                    'items.createdAt': -1\r\n                }\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: '$items.itemName',\r\n                    unitCostPrice: { $push: '$items.unitCostPrice' },\r\n                    unitSellingPrice: { $push: '$items.unitSellingPrice' },\r\n                },\r\n            },\r\n            {\r\n                $sort: {\r\n                    '_id': -1,\r\n                }\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: '$_id',\r\n                    unitCostPrice: { $arrayElemAt: ['$unitCostPrice', 0] },\r\n                    unitSellingPrice: { $arrayElemAt: ['$unitSellingPrice', 0] },\r\n                },\r\n            },\r\n        ]);\r\n    }\r\n    getOutOfStock(osType, branch) {\r\n        var _a, _b, _c, _d;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const outOfStocks = [];\r\n            const shopBranch = yield this.shopBranchModel.findOne({ branchName: branch });\r\n            if (shopBranch) {\r\n                const sales = yield this.saleModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            shopBranch: new mongoose_1.Types.ObjectId(shopBranch._id),\r\n                            createdAt: {\r\n                                $gte: (0, date_fns_1.subWeeks)(new Date(), 6),\r\n                            },\r\n                        },\r\n                    },\r\n                    {\r\n                        $unwind: '$saleItems',\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$saleItems.itemName',\r\n                            quantity: { $push: '$saleItems.quantity' }\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            quantity: {\r\n                                $add: [{ $toInt: { $avg: '$quantity' } }, 1]\r\n                            }\r\n                        }\r\n                    }\r\n                ]);\r\n                for (let i = 0; i < sales.length; i++) {\r\n                    const stockItem = yield this.stockItemModel.aggregate([\r\n                        {\r\n                            $match: {\r\n                                shopBranch: new mongoose_1.Types.ObjectId(shopBranch._id),\r\n                                itemName: (_a = sales[i]) === null || _a === void 0 ? void 0 : _a._id,\r\n                            },\r\n                        },\r\n                        {\r\n                            $sort: {\r\n                                createdAt: -1,\r\n                            },\r\n                        },\r\n                        {\r\n                            $group: {\r\n                                _id: '$itemName',\r\n                                quantity: { $sum: '$quantity' },\r\n                                createdAt: { $push: '$createdAt' },\r\n                                expiryDate: { $push: '$expiryDate' },\r\n                                unitCostPrice: { $push: '$unitCostPrice' },\r\n                            },\r\n                        },\r\n                        {\r\n                            $match: {\r\n                                quantity: osType == 'os'\r\n                                    ? { $lte: 0 }\r\n                                    : { $lte: (_b = sales[i]) === null || _b === void 0 ? void 0 : _b.quantity, $gt: 0 },\r\n                            },\r\n                        },\r\n                        {\r\n                            $project: {\r\n                                _id: '$_id',\r\n                                quantity: '$quantity',\r\n                                expiryDate: { $arrayElemAt: ['$expiryDate', 0] },\r\n                                createdAt: { $arrayElemAt: ['$createdAt', 0] },\r\n                                unitCostPrice: { $avg: '$unitCostPrice' },\r\n                            },\r\n                        },\r\n                    ]);\r\n                    if (stockItem && stockItem.length) {\r\n                        stockItem[0].avgCons = sales[0].quantity,\r\n                            stockItem[0].avgCost =\r\n                                stockItem[0].unitCostPrice * stockItem[0].avgCons;\r\n                        outOfStocks.push(stockItem[0]);\r\n                    }\r\n                }\r\n                return outOfStocks;\r\n            }\r\n            const sales = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: {\r\n                            $gte: (0, date_fns_1.subWeeks)(new Date(), 6),\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    $unwind: '$saleItems',\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$saleItems.itemName',\r\n                        quantity: { $push: '$saleItems.quantity' }\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        quantity: {\r\n                            $add: [{ $toInt: { $avg: '$quantity' } }, 1]\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            for (let i = 0; i < sales.length; i++) {\r\n                const stockItem = yield this.stockItemModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            itemName: (_c = sales[i]) === null || _c === void 0 ? void 0 : _c._id,\r\n                        },\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            createdAt: -1,\r\n                        },\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$itemName',\r\n                            quantity: { $sum: '$quantity' },\r\n                            createdAt: { $push: '$createdAt' },\r\n                            expiryDate: { $push: '$expiryDate' },\r\n                            unitCostPrice: { $push: '$unitCostPrice' },\r\n                        },\r\n                    },\r\n                    {\r\n                        $match: {\r\n                            quantity: osType == 'os'\r\n                                ? { $lte: 0 }\r\n                                : { $lte: (_d = sales[i]) === null || _d === void 0 ? void 0 : _d.quantity, $gt: 0 },\r\n                        },\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            quantity: '$quantity',\r\n                            expiryDate: { $arrayElemAt: ['$expiryDate', 0] },\r\n                            createdAt: { $arrayElemAt: ['$createdAt', 0] },\r\n                            unitCostPrice: { $avg: '$unitCostPrice' },\r\n                        },\r\n                    },\r\n                ]);\r\n                if (stockItem && stockItem.length) {\r\n                    stockItem[0].avgCons = sales[0].quantity,\r\n                        stockItem[0].avgCost =\r\n                            stockItem[0].unitCostPrice * stockItem[0].avgCons;\r\n                    outOfStocks.push(stockItem[0]);\r\n                }\r\n            }\r\n            return outOfStocks;\r\n        });\r\n    }\r\n    getPreviousVendors() {\r\n        return this.purchaseModel.aggregate([\r\n            {\r\n                $group: {\r\n                    _id: '$vendor'\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n};\r\nStockQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.stockItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.purchaseModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.shopBranchModel)),\r\n    tslib_1.__param(3, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.saleModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _d : Object, typeof (_e = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _e : Object])\r\n], StockQueryService);\r\nexports.StockQueryService = StockQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StockStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nconst dvt_db_model_1 = require(\"../../../dvt-db.model\");\r\nlet StockStoreService = class StockStoreService {\r\n    constructor(stockItemModel, purchaseModel, shopBranchModel, cls) {\r\n        this.stockItemModel = stockItemModel;\r\n        this.purchaseModel = purchaseModel;\r\n        this.shopBranchModel = shopBranchModel;\r\n        this.cls = cls;\r\n    }\r\n    savePurchase(purchase) {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            console.log('Save Purchase Now');\r\n            const shopBranch = yield this.shopBranchModel.findOne({ branchName: purchase.shopBranch });\r\n            if (shopBranch) {\r\n                purchase.shopBranch = shopBranch._id;\r\n                purchase.itemsPurchased.forEach((item) => {\r\n                    delete item['id'];\r\n                    return item.shopBranch = shopBranch._id;\r\n                });\r\n            }\r\n            else {\r\n                throw new Error(\"Branch not found!\");\r\n            }\r\n            if (purchase === null || purchase === void 0 ? void 0 : purchase.id) {\r\n                const items = [];\r\n                const stockItemsToEdit = purchase.itemsPurchased.filter((item) => item === null || item === void 0 ? void 0 : item.id);\r\n                const stockItemsToCreate = purchase.itemsPurchased.filter((item) => !(item === null || item === void 0 ? void 0 : item.id));\r\n                if (stockItemsToCreate === null || stockItemsToCreate === void 0 ? void 0 : stockItemsToCreate.length) {\r\n                    const itemsToCreate = yield this.stockItemModel.create(stockItemsToCreate);\r\n                    itemsToCreate === null || itemsToCreate === void 0 ? void 0 : itemsToCreate.forEach((item) => items.push(item._id));\r\n                }\r\n                if (stockItemsToEdit === null || stockItemsToEdit === void 0 ? void 0 : stockItemsToEdit.length) {\r\n                    for (let i = 0; i < stockItemsToEdit.length; i++) {\r\n                        const itemToEdit = yield this.stockItemModel.findByIdAndUpdate((_a = stockItemsToEdit[i]) === null || _a === void 0 ? void 0 : _a.id, stockItemsToEdit[i], {\r\n                            new: true\r\n                        });\r\n                        if (itemToEdit)\r\n                            items.push(itemToEdit === null || itemToEdit === void 0 ? void 0 : itemToEdit._id);\r\n                    }\r\n                }\r\n                purchase.userAccount = this.cls.get('contextUser._id');\r\n                purchase.itemsPurchased = items;\r\n                return this.purchaseModel\r\n                    .findByIdAndUpdate(purchase.id, purchase, {\r\n                    new: true,\r\n                })\r\n                    .populate([\r\n                    {\r\n                        path: 'itemsPurchased',\r\n                        model: dvt_db_model_1.EVetDbModels.stockItemModel,\r\n                    },\r\n                    {\r\n                        path: 'shopBranch',\r\n                        model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                        select: 'branchName',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                    {\r\n                        path: 'userAccount',\r\n                        model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                        select: 'acctType email userName firstName surName appModule shopBranch',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                ]);\r\n            }\r\n            else {\r\n                // const purchaseExist = await this.purchaseModel.find({\r\n                //   vendor: purchase.vendor,\r\n                //   itemsPurchased: {$size: purchase.itemsPurchased.length},\r\n                //   createdAt: {\r\n                //     $gte: getZonedStartOfDay(new Date())\r\n                //   }\r\n                // });\r\n                // if(purchaseExist) {\r\n                //   for(let i = 0; i < purchaseExist.length; i++) {\r\n                //     const minuteDiff = differenceInMinutes( new Date(), new Date(purchaseExist[i].createdAt))\r\n                //     console.log(minuteDiff, purchaseExist[i].createdAt);\r\n                //     if(minuteDiff < 10) {\r\n                //       throw new BadRequestException(\r\n                //         \"This is likely a duplicate, please try again in next \"\r\n                //         + (10 - minuteDiff) +' minutes.'\r\n                //         );\r\n                //     }\r\n                //   }\r\n                //   // console.log(purchaseExist, timeNow);\r\n                // }\r\n                // const items: any[] = [];\r\n                // for(let i = 0; i < purchase.itemsPurchased.length; i++) {\r\n                //   const itemsToCreate = await this.stockItemModel.create(purchase.itemsPurchased[i]);\r\n                //   itemsToCreate ? items.push(itemsToCreate._id) : null;\r\n                // }\r\n                const itemItems = yield this.stockItemModel.create(purchase.itemsPurchased);\r\n                purchase.itemsPurchased = itemItems.map((item) => item === null || item === void 0 ? void 0 : item._id); //items;\r\n                purchase.userAccount = this.cls.get('contextUser._id');\r\n                // const saved = await this.purchaseModel.create(purchase);\r\n                // return saved.populate([\r\n                //   {\r\n                //     path: 'itemsPurchased',\r\n                //     model: EVetDbModels.stockItemModel,\r\n                //   },\r\n                //   {\r\n                //     path: 'shopBranch',\r\n                //     model: EVetDbModels.shopBranchModel,\r\n                //     select: 'branchName',\r\n                //     options: { withDeleted: true },\r\n                //   },\r\n                //   {\r\n                //     path: 'userAccount',\r\n                //     model: EVetDbModels.userAccountModel,\r\n                //     select: 'acctType email userName firstName surName appModule shopBranch',\r\n                //     options: { withDeleted: true },\r\n                //   },\r\n                // ]);\r\n                return (yield this.purchaseModel.create(purchase)).populate([\r\n                    {\r\n                        path: 'itemsPurchased',\r\n                        model: dvt_db_model_1.EVetDbModels.stockItemModel,\r\n                    },\r\n                    {\r\n                        path: 'shopBranch',\r\n                        model: dvt_db_model_1.EVetDbModels.shopBranchModel,\r\n                        select: 'branchName',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                    {\r\n                        path: 'userAccount',\r\n                        model: dvt_db_model_1.EVetDbModels.userAccountModel,\r\n                        select: 'acctType email userName firstName surName appModule shopBranch',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                ]);\r\n            }\r\n            ;\r\n        });\r\n    }\r\n    moderateStockLevel(body) {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const shopBranch = yield this.shopBranchModel.findOne({ branchName: body.shopBranch });\r\n            if (body.updateType == 'itemName' && body.newItemName) {\r\n                return this.stockItemModel.updateMany({ itemName: body.itemName, shopBranch: shopBranch === null || shopBranch === void 0 ? void 0 : shopBranch._id }, {\r\n                    $set: {\r\n                        itemName: body.newItemName,\r\n                    }\r\n                }, { new: true, multi: true });\r\n            }\r\n            else if (body.updateType == 'quantity' &&\r\n                (parseInt(body.newQtty) >= 0) ||\r\n                (parseInt(body.unitCostPrice) >= 0 && parseInt(body.unitSellingPrice) >= 0)) {\r\n                const stockItemVariants = yield this.stockItemModel.find({\r\n                    itemName: body.itemName,\r\n                    shopBranch: shopBranch === null || shopBranch === void 0 ? void 0 : shopBranch._id,\r\n                    quantity: {\r\n                        $gte: 1\r\n                    }\r\n                }).sort({ createdAt: -1 });\r\n                const firstItem = stockItemVariants[0];\r\n                const restItems = stockItemVariants.slice(1);\r\n                if (restItems === null || restItems === void 0 ? void 0 : restItems.length) {\r\n                    yield this.stockItemModel.updateMany({\r\n                        itemName: firstItem.itemName,\r\n                        shopBranch: shopBranch === null || shopBranch === void 0 ? void 0 : shopBranch._id,\r\n                        quantity: {\r\n                            $gte: 1\r\n                        }\r\n                    }, {\r\n                        $set: {\r\n                            quantity: 0,\r\n                            unitCostPrice: body.unitCostPrice,\r\n                            unitSellingPrice: body.unitSellingPrice\r\n                        },\r\n                    }, {\r\n                        new: true,\r\n                        multi: true\r\n                    });\r\n                }\r\n                if (firstItem === null || firstItem === void 0 ? void 0 : firstItem._id) {\r\n                    return yield this.stockItemModel.findOneAndUpdate({\r\n                        _id: firstItem === null || firstItem === void 0 ? void 0 : firstItem._id,\r\n                        shopBranch: shopBranch === null || shopBranch === void 0 ? void 0 : shopBranch._id\r\n                    }, {\r\n                        $set: {\r\n                            quantity: (_a = body === null || body === void 0 ? void 0 : body.newQtty) !== null && _a !== void 0 ? _a : body === null || body === void 0 ? void 0 : body.currentQtty,\r\n                            unitCostPrice: body.unitCostPrice,\r\n                            unitSellingPrice: body.unitSellingPrice\r\n                        },\r\n                    }, {\r\n                        new: true\r\n                    });\r\n                }\r\n            }\r\n            return;\r\n        });\r\n    }\r\n};\r\nStockStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.stockItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.purchaseModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(dvt_db_model_1.EVetDbModels.shopBranchModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _d : Object])\r\n], StockStoreService);\r\nexports.StockStoreService = StockStoreService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EVetDbModels = void 0;\r\nvar EVetDbModels;\r\n(function (EVetDbModels) {\r\n    EVetDbModels[\"userAccountModel\"] = \"Vatma_UserAccount\";\r\n    EVetDbModels[\"shopBranchModel\"] = \"Vatma_SHOP_BRANCH\";\r\n    EVetDbModels[\"shopExpenditureModel\"] = \"Vatma_SHOP_EXPENDITURE\";\r\n    EVetDbModels[\"stockItemModel\"] = \"Vatma_StockItem\";\r\n    EVetDbModels[\"saleModel\"] = \"Vatma_Sale\";\r\n    EVetDbModels[\"saleItemModel\"] = \"Vatma_SALE_ITEM\";\r\n    EVetDbModels[\"purchaseModel\"] = \"Vatma_Purchase\";\r\n})(EVetDbModels = exports.EVetDbModels || (exports.EVetDbModels = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DvtModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst account_module_1 = require(\"./common/account/account.module\");\r\nconst settings_module_1 = require(\"./common/settings/settings-module\");\r\nconst dispensary_module_1 = require(\"./core/dispensary/dispensary.module\");\r\nconst inventory_module_1 = require(\"./core/inventory/inventory.module\");\r\nlet DvtModule = class DvtModule {\r\n};\r\nDvtModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [\r\n            account_module_1.UserAccountModule,\r\n            settings_module_1.SettingsModule,\r\n            dispensary_module_1.DispensaryModule,\r\n            inventory_module_1.InventoryModule\r\n        ]\r\n    })\r\n], DvtModule);\r\nexports.DvtModule = DvtModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DvtModuleRouting = void 0;\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst dvt_module_1 = require(\"./dvt.module\");\r\nconst account_module_1 = require(\"./common/account/account.module\");\r\nconst settings_module_1 = require(\"./common/settings/settings-module\");\r\nconst dispensary_module_1 = require(\"./core/dispensary/dispensary.module\");\r\nconst inventory_module_1 = require(\"./core/inventory/inventory.module\");\r\nexports.DvtModuleRouting = [\r\n    {\r\n        path: 'dvt',\r\n        module: dvt_module_1.DvtModule,\r\n        children: [\r\n            {\r\n                path: lib_xUtils_1.ECommonAppModule.Account.toLowerCase(),\r\n                module: account_module_1.UserAccountModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.EFeatureAppModule.Setting.toLowerCase(),\r\n                module: settings_module_1.SettingsModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.ECoreAppModule.Dispensary.toLowerCase(),\r\n                module: dispensary_module_1.DispensaryModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.ECoreAppModule.Inventory.toLowerCase(),\r\n                module: inventory_module_1.InventoryModule\r\n            }\r\n        ]\r\n    }\r\n];\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DataEntryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst data_entry_service_1 = require(\"../services/data-entry.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet DataEntryController = class DataEntryController {\r\n    constructor(dataEntryService) {\r\n        this.dataEntryService = dataEntryService;\r\n    }\r\n    saveDataEntry(body) {\r\n        return this.dataEntryService.saveDataEntry(body);\r\n    }\r\n    getDataEntry(query) {\r\n        return this.dataEntryService.getDataEntries(JSON.parse(query || '{}'));\r\n    }\r\n    deleteDataEntry(id) {\r\n        return this.dataEntryService.deleteDataEntry(id);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DataEntryController.prototype, \"saveDataEntry\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(),\r\n    tslib_1.__param(0, (0, common_1.Query)('query')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DataEntryController.prototype, \"getDataEntry\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)('Admin', '*'),\r\n    (0, common_1.Delete)('/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DataEntryController.prototype, \"deleteDataEntry\", null);\r\nDataEntryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ePlanixRoutes.dataEntry),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof data_entry_service_1.DataEntryService !== \"undefined\" && data_entry_service_1.DataEntryService) === \"function\" ? _a : Object])\r\n], DataEntryController);\r\nexports.DataEntryController = DataEntryController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DataEntryModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst data_entry_controller_1 = require(\"./controllers/data-entry.controller\");\r\nconst data_entry_service_1 = require(\"./services/data-entry.service\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst nix_db_model_1 = require(\"../../nix-db.model\");\r\nconst data_entry_schema_1 = require(\"./data-entry.schema\");\r\nlet DataEntryModule = class DataEntryModule {\r\n};\r\nDataEntryModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        controllers: [\r\n            data_entry_controller_1.DataEntryController\r\n        ],\r\n        providers: [\r\n            data_entry_service_1.DataEntryService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: nix_db_model_1.ENixDbModels.dataEntryModel,\r\n                modelSchema: data_entry_schema_1.dataEntrysSchema\r\n            }),\r\n        ],\r\n    })\r\n], DataEntryModule);\r\nexports.DataEntryModule = DataEntryModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.dataEntrysSchema = exports.dataEntryOutcomeIndicatorSchema = exports.outputIndicatorsInputsSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst nix_db_model_1 = require(\"../../nix-db.model\");\r\nexports.outputIndicatorsInputsSchema = new mongoose_1.Schema({\r\n    inputValue: String,\r\n    inputLabel: String,\r\n    inputType: String,\r\n    inputRequired: String,\r\n    inputOptions: String\r\n});\r\nexports.dataEntryOutcomeIndicatorSchema = new mongoose_1.Schema({\r\n    outcomeIndicator: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    outputIndicatorsInputs: {\r\n        type: [exports.outputIndicatorsInputsSchema],\r\n        required: true\r\n    }\r\n});\r\nexports.dataEntrysSchema = new mongoose_1.Schema({\r\n    entryType: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    sector: {\r\n        required: true,\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: nix_db_model_1.ENixDbModels.sectorsModel,\r\n    },\r\n    lga: {\r\n        // required: true,\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: nix_db_model_1.ENixDbModels.lgaModel,\r\n    },\r\n    lgaWard: String,\r\n    collectionDate: {\r\n        type: Date,\r\n        required: true\r\n    },\r\n    outcomeIndicators: {\r\n        type: [exports.dataEntryOutcomeIndicatorSchema]\r\n    },\r\n    outcomeOutputIndicators: {\r\n        type: [exports.dataEntryOutcomeIndicatorSchema]\r\n    }\r\n}, { timestamps: true });\r\n// @Schema({\r\n//   timestamps: true\r\n// })\r\n// export class DataEntry {\r\n//   @Prop({\r\n//     type: String,\r\n//     required: true\r\n//   })\r\n//   sectorName: string;\r\n//   @Prop({\r\n//     type: String,\r\n//     required: true\r\n//   })\r\n//   lgaName: string;\r\n//   @Prop({\r\n//     type: String,\r\n//     required: true\r\n//   })\r\n//   lgaWard: string;\r\n//   @Prop({\r\n//     type: Date,\r\n//     required: true\r\n//   })\r\n//   collectionDate: Date;\r\n//   @Prop({\r\n//     type: [dataEntryOutcomeIndicator],\r\n//     required: true\r\n//   })\r\n//   outcomeIndicators: dataEntryOutcomeIndicator[];\r\n// }\r\n// export type TDataEntryDocument = HydratedDocument<DataEntry>;\r\n// export const dataEntrysSchema = SchemaFactory.createForClass(DataEntry);\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DataEntryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nix_db_model_1 = require(\"../../../nix-db.model\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nlet DataEntryService = class DataEntryService {\r\n    constructor(dataEntryModel) {\r\n        this.dataEntryModel = dataEntryModel;\r\n    }\r\n    saveDataEntry(dataEntry) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (dataEntry === null || dataEntry === void 0 ? void 0 : dataEntry._id)\r\n                return this.dataEntryModel.findByIdAndUpdate(dataEntry._id, dataEntry, { new: true });\r\n            return this.dataEntryModel.create(dataEntry);\r\n        });\r\n    }\r\n    ;\r\n    getDataEntries(query) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const match = (query === null || query === void 0 ? void 0 : query.sector) == 'All' ? {\r\n                entryType: query === null || query === void 0 ? void 0 : query.type,\r\n                collectionDate: {\r\n                    $gte: new Date(query === null || query === void 0 ? void 0 : query.sDate),\r\n                    $lte: new Date(query === null || query === void 0 ? void 0 : query.eDate)\r\n                }\r\n            } : {\r\n                entryType: query === null || query === void 0 ? void 0 : query.type,\r\n                sector: new mongoose_1.Types.ObjectId(query === null || query === void 0 ? void 0 : query.sector),\r\n                collectionDate: {\r\n                    $gte: new Date(query === null || query === void 0 ? void 0 : query.sDate),\r\n                    $lte: new Date(query === null || query === void 0 ? void 0 : query.eDate)\r\n                }\r\n            };\r\n            return this.dataEntryModel.find(match, null, {\r\n                sort: {\r\n                    collectionDate: 'asc'\r\n                }\r\n            }).populate([\r\n                {\r\n                    path: 'sector',\r\n                    model: nix_db_model_1.ENixDbModels.sectorsModel,\r\n                    select: 'sectorName',\r\n                },\r\n                {\r\n                    path: 'lga',\r\n                    model: nix_db_model_1.ENixDbModels.lgaModel,\r\n                    select: 'lgaName',\r\n                },\r\n            ]);\r\n            ;\r\n        });\r\n    }\r\n    deleteDataEntry(id) {\r\n        return this.dataEntryModel.findByIdAndDelete(id, { new: true });\r\n    }\r\n};\r\nDataEntryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(nix_db_model_1.ENixDbModels.dataEntryModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object])\r\n], DataEntryService);\r\nexports.DataEntryService = DataEntryService;\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst account_service_1 = require(\"./../services/account.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet UserAccountController = class UserAccountController {\r\n    constructor(accountService) {\r\n        this.accountService = accountService;\r\n    }\r\n    generateAccountCode(body) {\r\n        return this.accountService.generateAccountCode(body);\r\n    }\r\n    saveAccountCode(body) {\r\n        return this.accountService.saveAccountCode(body);\r\n    }\r\n    getAccountCodes() {\r\n        return this.accountService.getAccountCodes();\r\n    }\r\n    deleteAccountCode(id) {\r\n        return this.accountService.deleteAccountCode(id);\r\n    }\r\n    getUserAccount(data) {\r\n        return this.accountService.getUserAccount(data.email);\r\n    }\r\n    // @UseGuards(AuthGuard('jwt'))\r\n    getUserAccounts() {\r\n        return this.accountService.getUserAccounts();\r\n    }\r\n    deleteUserAccount(id) {\r\n        return this.accountService.deleteUserAccount(id);\r\n    }\r\n    ///////////////// LGA\r\n    saveLga(body) {\r\n        return this.accountService.saveLga(body);\r\n    }\r\n    getLga() {\r\n        return this.accountService.getLgas();\r\n    }\r\n    deleteLga(id) {\r\n        return this.accountService.deleteLga(id);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(lib_xUtils_1.ePlanixSettingsStore.code),\r\n    tslib_1.__param(0, (0, common_1.Query)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"generateAccountCode\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Put)(lib_xUtils_1.ePlanixSettingsStore.code + '/:body'),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"saveAccountCode\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ePlanixSettingsStore.code),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"getAccountCodes\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Delete)(lib_xUtils_1.ePlanixSettingsStore.code + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"deleteAccountCode\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(),\r\n    tslib_1.__param(0, (0, common_1.Query)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof Pick !== \"undefined\" && Pick) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"getUserAccount\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ePlanixSettingsStore.account),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"getUserAccounts\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Delete)(lib_xUtils_1.ePlanixSettingsStore.account + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"deleteUserAccount\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(lib_xUtils_1.ePlanixSettingsStore.lga),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"saveLga\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ePlanixSettingsStore.lga),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"getLga\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Delete)(lib_xUtils_1.ePlanixSettingsStore.lga + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountController.prototype, \"deleteLga\", null);\r\nUserAccountController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ePlanixSettingsStore.account),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof account_service_1.UserAccountService !== \"undefined\" && account_service_1.UserAccountService) === \"function\" ? _a : Object])\r\n], UserAccountController);\r\nexports.UserAccountController = UserAccountController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\n// import { TAccountCodeDocument, TUserAccountDocument, UserAccount } from '../user-account.schema';\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst nix_db_model_1 = require(\"../../../nix-db.model\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet UserAccountService = class UserAccountService {\r\n    constructor(accountService, userAccountModel, accountCodeModel, lgaModel, sectorsModel) {\r\n        this.accountService = accountService;\r\n        this.userAccountModel = userAccountModel;\r\n        this.accountCodeModel = accountCodeModel;\r\n        this.lgaModel = lgaModel;\r\n        this.sectorsModel = sectorsModel;\r\n        this.accountService.accountModel = this.userAccountModel;\r\n        this.accountService.accountUserKey = 'email';\r\n    }\r\n    registerAccount(user) {\r\n        // console.log(user);\r\n        // return\r\n        if (user === null || user === void 0 ? void 0 : user._id)\r\n            return this.userAccountModel.findByIdAndUpdate(user._id, user);\r\n        return this.userAccountModel.create(user);\r\n    }\r\n    ;\r\n    getUserAccounts() {\r\n        return this.userAccountModel.find({}).populate([\r\n            {\r\n                path: 'acctCode',\r\n                select: 'acctCode'\r\n            },\r\n            {\r\n                path: 'sector',\r\n                select: 'sectorName'\r\n            },\r\n        ]);\r\n        // .populate(\r\n        //   [\r\n        //     {\r\n        //       path: 'acctCode',\r\n        //       model: ENixDbModels.userAccountCodeModel?.toLowerCase()+'s',\r\n        //       options: { withDeleted: true },\r\n        //     }\r\n        //   ]\r\n        // )\r\n    }\r\n    updateRefressToken(userId, update) {\r\n        return this.userAccountModel.findByIdAndUpdate(userId, update);\r\n    }\r\n    findAccount(userData, type) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const userExists = yield this.userAccountModel.findOne({ email: userData.email });\r\n            if (userExists && type == 'signUp' && !userData._id)\r\n                throw new common_1.BadRequestException('User already exists');\r\n            if (type == 'signUp') {\r\n                const acctCodes = yield this.accountCodeModel.find({});\r\n                const acctUsers = yield this.userAccountModel.find({});\r\n                if ((acctUsers === null || acctUsers === void 0 ? void 0 : acctUsers.length) && type == 'signUp' && !(userData === null || userData === void 0 ? void 0 : userData.acctCode)) {\r\n                    console.log(\"acctUsers?.length && type == 'signUp' && !userData?.acctCode\");\r\n                    throw new common_1.BadRequestException('Account registration denied - No code provided, please contact Admin');\r\n                }\r\n                if (!acctCodes.length) {\r\n                    const defaultSector = yield this.sectorsModel.create({\r\n                        sectorName: 'All'\r\n                    });\r\n                    const defaultAcctCode = yield this.accountCodeModel.create({\r\n                        acctCode: '12345',\r\n                        sector: defaultSector === null || defaultSector === void 0 ? void 0 : defaultSector._id,\r\n                        acctType: 'Admin'\r\n                    });\r\n                    // userData.acctType = 'Admin';\r\n                    // userData.sector = 'All';\r\n                    userData.acctCode = defaultAcctCode.acctCode;\r\n                }\r\n                const userHasCode = yield this.accountCodeModel.findOne({ acctCode: userData.acctCode });\r\n                // return\r\n                if (!(userHasCode === null || userHasCode === void 0 ? void 0 : userHasCode._id)) {\r\n                    console.log(\"!userHasCode\");\r\n                    throw new common_1.BadRequestException('Account registration denied - No code provided, please contact Admin');\r\n                }\r\n                // console.log(userData);\r\n                // console.log(userHasCode);\r\n                // return\r\n                // const acctCode = await this.accountCodeModel.findOne({acctCode: userData.acctCode});\r\n                const codeAlreadyUsed = yield this.userAccountModel.findOne({ acctCode: userHasCode === null || userHasCode === void 0 ? void 0 : userHasCode._id });\r\n                if (codeAlreadyUsed && !(userData === null || userData === void 0 ? void 0 : userData._id)) {\r\n                    throw new common_1.BadRequestException('RegCode already used, please contact Admin');\r\n                }\r\n                userData.sector = userHasCode.sector;\r\n                userData.acctType = userHasCode.acctType;\r\n                userData.acctCode = userHasCode._id;\r\n                return userData;\r\n            }\r\n            return userExists;\r\n        });\r\n    }\r\n    generateAccountCode(body) {\r\n        body.acctCode = (0, lib_xUtils_1.randomChars)('mixed', 6);\r\n        return body;\r\n    }\r\n    saveAccountCode(body) {\r\n        return this.accountCodeModel.create(body);\r\n    }\r\n    getAccountCodes() {\r\n        var _a;\r\n        return this.accountCodeModel.aggregate([\r\n            {\r\n                $project: {\r\n                    _id: '$_id',\r\n                    acctCode: '$acctCode',\r\n                    sector: '$sector',\r\n                    acctType: '$acctType',\r\n                    createdAt: '$createdAt',\r\n                }\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: ((_a = nix_db_model_1.ENixDbModels.sectorsModel) === null || _a === void 0 ? void 0 : _a.toLowerCase()) + 's',\r\n                    localField: 'sector',\r\n                    foreignField: '_id',\r\n                    as: 'sector'\r\n                }\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: '$_id',\r\n                    acctCode: '$acctCode',\r\n                    sector: '$sector.sectorName',\r\n                    acctType: '$acctType',\r\n                    createdAt: '$createdAt',\r\n                }\r\n            },\r\n        ]);\r\n    }\r\n    getUserAccount(email) {\r\n        return this.userAccountModel.findOne({ email: email }, { passWord: 0, refreshToken: 0, salt: 0 }).populate([\r\n            {\r\n                path: 'acctCode',\r\n                select: 'acctCode'\r\n            },\r\n            {\r\n                path: 'sector',\r\n                select: 'sectorName'\r\n            },\r\n        ]);\r\n    }\r\n    deleteUserAccount(id) {\r\n        return this.userAccountModel.findByIdAndDelete(id, { new: true });\r\n    }\r\n    deleteAccountCode(id) {\r\n        return this.accountCodeModel.findByIdAndDelete(id, { new: true });\r\n    }\r\n    saveLga(lga) {\r\n        if (lga === null || lga === void 0 ? void 0 : lga._id)\r\n            return this.lgaModel.findByIdAndUpdate(lga._id, lga);\r\n        return this.lgaModel.create(lga);\r\n    }\r\n    ;\r\n    getLgas() {\r\n        return this.lgaModel.find({});\r\n    }\r\n    deleteLga(id) {\r\n        return this.lgaModel.findByIdAndDelete(id, { new: true });\r\n    }\r\n};\r\nUserAccountService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(1, (0, common_1.Inject)(nix_db_model_1.ENixDbModels.userAccountModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(nix_db_model_1.ENixDbModels.userAccountCodeModel)),\r\n    tslib_1.__param(3, (0, common_1.Inject)(nix_db_model_1.ENixDbModels.lgaModel)),\r\n    tslib_1.__param(4, (0, common_1.Inject)(nix_db_model_1.ENixDbModels.sectorsModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof lib_nest_modules_1.AccountService !== \"undefined\" && lib_nest_modules_1.AccountService) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _d : Object, typeof (_e = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _e : Object])\r\n], UserAccountService);\r\nexports.UserAccountService = UserAccountService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst account_controller_1 = require(\"./controllers/account.controller\");\r\nconst account_service_1 = require(\"./services/account.service\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst nix_db_model_1 = require(\"../../nix-db.model\");\r\nconst user_account_schema_1 = require(\"./user-account.schema\");\r\nconst sectors_schema_1 = require(\"../../core/sectors/sectors.schema\");\r\nlet UserAccountModule = class UserAccountModule {\r\n};\r\nUserAccountModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        controllers: [\r\n            account_controller_1.UserAccountController\r\n        ],\r\n        providers: [\r\n            account_service_1.UserAccountService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: nix_db_model_1.ENixDbModels.userAccountModel,\r\n                modelSchema: user_account_schema_1.UserAccountSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: nix_db_model_1.ENixDbModels.userAccountCodeModel,\r\n                modelSchema: user_account_schema_1.UserAccountCodeSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: nix_db_model_1.ENixDbModels.lgaModel,\r\n                modelSchema: user_account_schema_1.LgaSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: nix_db_model_1.ENixDbModels.sectorsModel,\r\n                modelSchema: sectors_schema_1.sectorsSchema\r\n            }),\r\n        ],\r\n        exports: [account_service_1.UserAccountService]\r\n    })\r\n], UserAccountModule);\r\nexports.UserAccountModule = UserAccountModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LgaSchema = exports.UserAccountSchema = exports.UserAccountCodeSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst nix_db_model_1 = require(\"../../nix-db.model\");\r\n// @Schema({\r\n//   timestamps: true\r\n// })\r\n// export class UserAccountCode {\r\n//   @Prop({\r\n//     type: String,\r\n//     required: true\r\n//   })\r\n//   acctCode: string;\r\n//   @Prop({\r\n//     type: String,\r\n//     required: true\r\n//   })\r\n//   sector: string;\r\n//   @Prop({\r\n//     type: String,\r\n//     required: true\r\n//   })\r\n//   acctType: string;\r\n// }\r\n// export type TAccountCodeDocument = HydratedDocument<UserAccountCode>;\r\n// export const UserAccountCodeSchema = SchemaFactory.createForClass(UserAccountCode)\r\nexports.UserAccountCodeSchema = new mongoose_1.Schema({\r\n    acctCode: {\r\n        type: String,\r\n        required: true,\r\n        unique: true\r\n    },\r\n    sector: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: nix_db_model_1.ENixDbModels.sectorsModel,\r\n        required: true\r\n    },\r\n    acctType: {\r\n        type: String,\r\n        required: true\r\n    }\r\n}, { timestamps: true });\r\nexports.UserAccountSchema = new mongoose_1.Schema({\r\n    firstName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    surName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    sector: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        required: true,\r\n        ref: nix_db_model_1.ENixDbModels.sectorsModel,\r\n    },\r\n    acctType: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    acctCode: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: nix_db_model_1.ENixDbModels.userAccountCodeModel\r\n    },\r\n    passWord: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    salt: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    refreshToken: {\r\n        type: String\r\n    },\r\n}, { timestamps: true });\r\nexports.LgaSchema = new mongoose_1.Schema({\r\n    lgaName: {\r\n        required: true,\r\n        type: String\r\n    },\r\n    wards: {\r\n        required: true,\r\n        type: [String]\r\n    }\r\n}, { timestamps: true });\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DashboardController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst dashboard_service_1 = require(\"../services/dashboard.service\");\r\nlet DashboardController = class DashboardController {\r\n    constructor(dashbaordService) {\r\n        this.dashbaordService = dashbaordService;\r\n    }\r\n    getDashboard(body) {\r\n        return this.dashbaordService.getDashboardQuery(body);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DashboardController.prototype, \"getDashboard\", null);\r\nDashboardController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ePlanixRoutes.dashboard),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof dashboard_service_1.DashboardService !== \"undefined\" && dashboard_service_1.DashboardService) === \"function\" ? _a : Object])\r\n], DashboardController);\r\nexports.DashboardController = DashboardController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DashboardModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst dashboard_service_1 = require(\"./services/dashboard.service\");\r\nconst dashboard_controller_1 = require(\"./controllers/dashboard.controller\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst nix_db_model_1 = require(\"../../nix-db.model\");\r\nconst data_entry_schema_1 = require(\"../../common/data-entry/data-entry.schema\");\r\nlet DashboardModule = class DashboardModule {\r\n};\r\nDashboardModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [],\r\n        providers: [\r\n            dashboard_service_1.DashboardService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: nix_db_model_1.ENixDbModels.dataEntryModel,\r\n                modelSchema: data_entry_schema_1.dataEntrysSchema\r\n            })\r\n        ],\r\n        controllers: [dashboard_controller_1.DashboardController]\r\n    })\r\n], DashboardModule);\r\nexports.DashboardModule = DashboardModule;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DashboardService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nix_db_model_1 = require(\"../../../nix-db.model\");\r\nlet DashboardService = class DashboardService {\r\n    constructor(dataEntryModel) {\r\n        this.dataEntryModel = dataEntryModel;\r\n    }\r\n    getDashboardQuery(query) {\r\n        // console.log(query);\r\n        var _a, _b;\r\n        const match = {\r\n            collectionDate: { $gte: new Date(query.sDate), $lte: new Date(query.eDate) },\r\n            entryType: query.dataSource\r\n        };\r\n        if (query.sector !== null && query.sector !== '') {\r\n            match.sector = new mongoose_1.Types.ObjectId(query.sector);\r\n        }\r\n        if (query.dataSource == 'outputEntry') {\r\n            if (query.lga !== null && query.lga !== '') {\r\n                match.lga = new mongoose_1.Types.ObjectId(query.lga);\r\n            }\r\n            if (query.lgaWard !== null && query.lgaWard !== '') {\r\n                match.lgaWard = query.lgaWard;\r\n            }\r\n        }\r\n        const unwind = query.dataSource == 'outcomeEntry' ?\r\n            {\r\n                $unwind: '$outcomeIndicators'\r\n            } : {\r\n            $unwind: '$outcomeOutputIndicators'\r\n        };\r\n        let _id = {\r\n            sectorName: '$sectorName',\r\n            collectionDate: { $dateTrunc: { date: \"$collectionDate\", unit: (_a = query.viewBy.replace('ly', '')) === null || _a === void 0 ? void 0 : _a.toLowerCase() } },\r\n            lgaName: '$lgaName',\r\n            lgaWard: '$lgaWard',\r\n        };\r\n        if (query.dataSource == 'outputEntry' && query.resultType == 'Charts') {\r\n            _id = {\r\n                sectorName: '$sectorName',\r\n                collectionDate: { $dateTrunc: { date: \"$collectionDate\", unit: (_b = query.viewBy.replace('ly', '')) === null || _b === void 0 ? void 0 : _b.toLowerCase() } },\r\n                lgaName: '$lgaName'\r\n            };\r\n        }\r\n        let group = {\r\n            _id: _id\r\n        };\r\n        if (query.dataSource == 'outcomeEntry') {\r\n            group.indicators = { $push: '$outcomeIndicators' };\r\n        }\r\n        else {\r\n            group.indicators = { $push: '$outcomeOutputIndicators' };\r\n        }\r\n        let viewByDate;\r\n        let lastGroupStage = {\r\n            data: {\r\n                $push: {\r\n                    collectionDate: '$collectionDate',\r\n                    sectorName: '$sectorName',\r\n                    lgaName: '$lgaName',\r\n                    lgaWard: '$lgaWard',\r\n                    indicators: '$indicators'\r\n                }\r\n            }\r\n        };\r\n        if (query.viewBy == 'Quarterly') {\r\n            viewByDate = {\r\n                $trunc: {\r\n                    $add: [\r\n                        {\r\n                            $divide: [\r\n                                {\r\n                                    $subtract: [\r\n                                        { $month: \"$_id.collectionDate\" },\r\n                                        1\r\n                                    ]\r\n                                },\r\n                                3\r\n                            ]\r\n                        },\r\n                        1\r\n                    ]\r\n                }\r\n            };\r\n            lastGroupStage._id = {\r\n                $concat: [\r\n                    'Q',\r\n                    { $toString: '$_id' },\r\n                    ', ',\r\n                    {\r\n                        $dateToString: {\r\n                            format: '%Y',\r\n                            date: '$collectionDate'\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        else if (query.viewBy == 'Monthly') {\r\n            viewByDate = {\r\n                $dateToString: {\r\n                    format: '%b',\r\n                    date: '$_id.collectionDate'\r\n                }\r\n            };\r\n            lastGroupStage._id = {\r\n                $concat: [\r\n                    { $toString: '$_id' },\r\n                    ', ',\r\n                    {\r\n                        $dateToString: {\r\n                            format: '%Y',\r\n                            date: '$collectionDate'\r\n                        }\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        else if (query.viewBy == 'Yearly') {\r\n            viewByDate = {\r\n                $dateToString: {\r\n                    format: '%Y',\r\n                    date: '$_id.collectionDate'\r\n                }\r\n            };\r\n            lastGroupStage._id = '$_id';\r\n        }\r\n        if (query.resultType == 'Charts') {\r\n            return this.dataEntryModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: 'nix_sectors',\r\n                        localField: 'sector',\r\n                        foreignField: '_id',\r\n                        as: 'sector',\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: 'nix_lgas',\r\n                        localField: 'lga',\r\n                        foreignField: '_id',\r\n                        as: 'lga',\r\n                    }\r\n                },\r\n                unwind,\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        collectionDate: '$collectionDate',\r\n                        sectorName: {\r\n                            $arrayElemAt: ['$sector.sectorName', 0]\r\n                        },\r\n                        lgaName: {\r\n                            $arrayElemAt: ['$lga.lgaName', 0]\r\n                        },\r\n                        lgaWard: '$lgaWard',\r\n                        outcomeIndicators: '$outcomeIndicators',\r\n                        outcomeOutputIndicators: '$outcomeOutputIndicators',\r\n                    }\r\n                },\r\n                {\r\n                    $group: group\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: viewByDate,\r\n                        sectorName: '$_id.sectorName',\r\n                        lgaName: '$_id.lgaName',\r\n                        lgaWard: '$_id.lgaWard',\r\n                        collectionDate: '$_id.collectionDate',\r\n                        indicators: {\r\n                            $function: {\r\n                                body: function (indicators, lgaName, id) {\r\n                                    const groupObjArrayByAttr = (array, attr, k) => {\r\n                                        return array\r\n                                            .sort((a, b) => a.y - b.y)\r\n                                            .reduce((r, a) => {\r\n                                            const y = k ? a[attr][k] : a[attr];\r\n                                            r[y] = r[y] || [];\r\n                                            r[y].push(a);\r\n                                            return r;\r\n                                        }, Object.create(null));\r\n                                    };\r\n                                    indicators = indicators === null || indicators === void 0 ? void 0 : indicators.map((indicator) => {\r\n                                        let outputInputs = indicator.outputIndicatorsInputs;\r\n                                        outputInputs = outputInputs === null || outputInputs === void 0 ? void 0 : outputInputs.map((input) => {\r\n                                            if (input.inputType == 'Number' && !isNaN(input.inputValue)) {\r\n                                                input.inputValue = parseFloat(input.inputValue);\r\n                                            }\r\n                                            return {\r\n                                                inputLabel: input.inputLabel,\r\n                                                inputValue: input.inputValue,\r\n                                            };\r\n                                        });\r\n                                        return {\r\n                                            outcomeIndicator: indicator.outcomeIndicator,\r\n                                            outputIndicatorsInputs: outputInputs\r\n                                        };\r\n                                    });\r\n                                    const groupedIndicator = groupObjArrayByAttr(indicators, 'outcomeIndicator');\r\n                                    const sumOutputGroup = [];\r\n                                    for (const [key, value] of Object.entries(groupedIndicator)) {\r\n                                        const val = value;\r\n                                        let vals = [];\r\n                                        val === null || val === void 0 ? void 0 : val.forEach((val) => { var _a; return vals = [...vals !== null && vals !== void 0 ? vals : [], ...(_a = val.outputIndicatorsInputs) !== null && _a !== void 0 ? _a : []]; });\r\n                                        const label = 'inputLabel';\r\n                                        vals = Object.values(vals.reduce((acc, curr) => {\r\n                                            var _a;\r\n                                            var _b;\r\n                                            (_a = acc[_b = curr[label]]) !== null && _a !== void 0 ? _a : (acc[_b] = { [label]: curr[label] });\r\n                                            Object.keys(curr).filter(k => k !== label).forEach(k => acc[curr[label]][k] = (acc[curr[label]][k] || 0) + curr[k]);\r\n                                            return acc;\r\n                                        }, {}));\r\n                                        sumOutputGroup.push({\r\n                                            outcomeIndicator: key,\r\n                                            outputIndicatorsInputs: vals\r\n                                        });\r\n                                    }\r\n                                    return sumOutputGroup;\r\n                                },\r\n                                args: ['$indicators', '$_id.lgaName', '$_id'],\r\n                                lang: 'js'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $group: lastGroupStage\r\n                },\r\n                {\r\n                    $unwind: {\r\n                        path: '$data',\r\n                        preserveNullAndEmptyArrays: true\r\n                    },\r\n                },\r\n                {\r\n                    $unwind: {\r\n                        path: '$data.indicators',\r\n                        preserveNullAndEmptyArrays: true\r\n                    },\r\n                },\r\n                {\r\n                    $unwind: {\r\n                        path: '$data.indicators.outputIndicatorsInputs',\r\n                        preserveNullAndEmptyArrays: true\r\n                    },\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            outcome: '$data.indicators.outcomeIndicator',\r\n                            lgaName: '$data.lgaName',\r\n                            date: '$_id'\r\n                        },\r\n                        root: { $push: '$$ROOT' },\r\n                        indicators: { $push: '$data.indicators.outputIndicatorsInputs' }\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        indicators: {\r\n                            $function: {\r\n                                body: function (indicators, id) {\r\n                                    return indicators.map((indic) => {\r\n                                        var _a, _b;\r\n                                        return {\r\n                                            title: id.outcome + ' - ' + id.date,\r\n                                            subTitle: indic.inputLabel + ' - ' + id.lgaName,\r\n                                            groupTitle: indic.inputLabel + ' - ' + id.date,\r\n                                            date: id.date,\r\n                                            byDate: (_b = (_a = id.date) === null || _a === void 0 ? void 0 : _a.split(' ')) === null || _b === void 0 ? void 0 : _b.at(-1),\r\n                                            outcome: id.outcome,\r\n                                            lgaName: id.lgaName,\r\n                                            group: id.outcome + ' - ' + id.date + ' - ' + indic.inputLabel,\r\n                                            inputLabel: indic.inputLabel,\r\n                                            inputValue: indic.inputValue,\r\n                                        };\r\n                                    });\r\n                                },\r\n                                args: ['$indicators', '$_id'],\r\n                                lang: 'js'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: {\r\n                        path: '$indicators',\r\n                        preserveNullAndEmptyArrays: true\r\n                    },\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            date: '$_id.date',\r\n                            lgaName: '$indicators.lgaName',\r\n                            label: '$indicators.inputLabel',\r\n                        },\r\n                        value: { $sum: '$indicators.inputValue' },\r\n                        inputs: {\r\n                            $push: '$$ROOT.indicators'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: {\r\n                            lgaName: '$_id.lgaName',\r\n                            label: '$_id.label',\r\n                        },\r\n                        value: { $sum: '$value' },\r\n                        inputs: {\r\n                            $push: '$$ROOT.inputs'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        '_id.label': 1\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        value: '$value',\r\n                        inputs: {\r\n                            $arrayElemAt: ['$inputs', 0]\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: {\r\n                        path: '$inputs',\r\n                        preserveNullAndEmptyArrays: true\r\n                    },\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: { $concat: ['$inputs.outcome', ' - ', '$inputs.date'] },\r\n                        lgaNames: { $addToSet: '$inputs.lgaName' },\r\n                        inputs: {\r\n                            $push: '$inputs'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        // _id: 1,\r\n                        'inputs.byDate': 1\r\n                    }\r\n                }\r\n                // {\r\n                //   $group: {\r\n                //     _id: viewByDate,\r\n                //     otherIds: {\r\n                //       $addToSet: {\r\n                //         sector: '$_id.sectorName',\r\n                //         lgaName: '$_id.lgaName'\r\n                //       }\r\n                //     },\r\n                //     indicators: {\r\n                //       $push:'$indicators'\r\n                //     }\r\n                //   }\r\n                // },\r\n                // {\r\n                //   $unwind: '$otherIds'\r\n                // },\r\n                // {\r\n                //   $group: {\r\n                //     _id: {\r\n                //       date: '$_id',\r\n                //       lgaName: '$otherIds.lgaName'\r\n                //     },\r\n                //     indicators: {\r\n                //       $addToSet: '$indicators'\r\n                //     }\r\n                //   }\r\n                // },\r\n                // {\r\n                //   $project: {\r\n                //     _id: '$_id',\r\n                //     indicators: {\r\n                //       $function: {\r\n                //         body: function(indicators: any[], _id:any){\r\n                //           indicators = indicators.flat();\r\n                //           const groupObjArrayByAttr = (array: any[], attr: any, k?: any): any[] => {\r\n                //             return array\r\n                //               .sort((a,b)=> a.y - b.y)\r\n                //               .reduce((r,a)=>{\r\n                //                 const y = k ? a[attr][k] : a[attr];\r\n                //                 r[y] = r[y] || [];\r\n                //                 r[y].push(a);\r\n                //                 return r;\r\n                //               }, Object.create(null))\r\n                //           }\r\n                //           indicators = indicators?.map((indicator: any)=>{\r\n                //             let outputInputs: any = indicator.outputIndicatorsInputs;\r\n                //             // outputInputs = outputInputs?.map((input: any)=>{\r\n                //             if(outputInputs.inputType == 'Number' && !isNaN(outputInputs.inputValue)) {\r\n                //               outputInputs.inputValue = parseFloat(outputInputs.inputValue)\r\n                //             }\r\n                //             // return {\r\n                //             //   inputLabel: outputInputs.inputLabel,\r\n                //             //   inputValue: outputInputs.inputValue,\r\n                //             //   // [input.inputLabel]: input.inputValue,\r\n                //             // };\r\n                //             // })\r\n                //             return {\r\n                //               outcomeIndicator: indicator.outcomeIndicator,\r\n                //               outputIndicatorsInputs: outputInputs\r\n                //             }\r\n                //           });\r\n                //           const groupedIndicator = groupObjArrayByAttr(indicators, 'outcomeIndicator')\r\n                //           const sumOutputGroup: any[] = [];\r\n                //           // let sum = 0;\r\n                //           for (const [key, value] of Object.entries(groupedIndicator)) {\r\n                //             let outputIndicatorsInputs: any[] = value;\r\n                //             outputIndicatorsInputs = outputIndicatorsInputs.map((output)=>{\r\n                //               return output.outputIndicatorsInputs\r\n                //             })\r\n                //             const outputsGrouped = groupObjArrayByAttr(outputIndicatorsInputs, 'inputLabel')\r\n                //             let inputs: any[] = [];\r\n                //             for (const [key, value] of Object.entries(outputsGrouped)) {\r\n                //               let sum = 0\r\n                //               if(Array.isArray(value)) {\r\n                //                 for(let i = 0; i < value.length; i++) {\r\n                //                   sum += value[i].inputValue;\r\n                //                 }\r\n                //               }\r\n                //               inputs.push({\r\n                //                 date: _id.date,\r\n                //                 lgaName: _id.lgaName,\r\n                //                 outcome: key,\r\n                //                 label: key,\r\n                //                 value: sum\r\n                //               })\r\n                //             }\r\n                //             sumOutputGroup.push({\r\n                //               date: _id.date,\r\n                //               lgaName: _id.lgaName,\r\n                //               outcome: key,\r\n                //               outputs: inputs\r\n                //             });\r\n                //           }\r\n                //           return sumOutputGroup;\r\n                //           return groupedIndicator;\r\n                //           return indicators\r\n                //         },\r\n                //         args: ['$indicators', '$_id'],\r\n                //         lang: 'js'\r\n                //       }\r\n                //     }\r\n                //   }\r\n                // },\r\n                // {\r\n                //   $unwind: '$indicators'\r\n                // },\r\n                // {\r\n                //   $unwind: '$indicators.outputs'\r\n                // },\r\n                // {\r\n                //   $group: {\r\n                //     _id: '$indicators.outcome',\r\n                //     indicators: {$push:'$indicators.outputs'}\r\n                //   }\r\n                // }\r\n            ]);\r\n        }\r\n        else\r\n            return this.dataEntryModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: 'nix_sectors',\r\n                        localField: 'sector',\r\n                        foreignField: '_id',\r\n                        as: 'sector',\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: 'nix_lgas',\r\n                        localField: 'lga',\r\n                        foreignField: '_id',\r\n                        as: 'lga',\r\n                    }\r\n                },\r\n                unwind,\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        collectionDate: '$collectionDate',\r\n                        sectorName: {\r\n                            $arrayElemAt: ['$sector.sectorName', 0]\r\n                        },\r\n                        lgaName: {\r\n                            $arrayElemAt: ['$lga.lgaName', 0]\r\n                        },\r\n                        lgaWard: '$lgaWard',\r\n                        outcomeIndicators: '$outcomeIndicators',\r\n                        outcomeOutputIndicators: '$outcomeOutputIndicators',\r\n                    }\r\n                },\r\n                {\r\n                    $group: group\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: viewByDate,\r\n                        sectorName: '$_id.sectorName',\r\n                        lgaName: '$_id.lgaName',\r\n                        lgaWard: '$_id.lgaWard',\r\n                        collectionDate: '$_id.collectionDate',\r\n                        indicators: {\r\n                            $function: {\r\n                                body: function (indicators) {\r\n                                    const groupObjArrayByAttr = (array, attr, k) => {\r\n                                        return array\r\n                                            .sort((a, b) => a.y - b.y)\r\n                                            .reduce((r, a) => {\r\n                                            const y = k ? a[attr][k] : a[attr];\r\n                                            r[y] = r[y] || [];\r\n                                            r[y].push(a);\r\n                                            return r;\r\n                                        }, Object.create(null));\r\n                                    };\r\n                                    indicators = indicators === null || indicators === void 0 ? void 0 : indicators.map((indicator) => {\r\n                                        let outputInputs = indicator.outputIndicatorsInputs;\r\n                                        outputInputs = outputInputs === null || outputInputs === void 0 ? void 0 : outputInputs.map((input) => {\r\n                                            if (input.inputType == 'Number' && !isNaN(input.inputValue)) {\r\n                                                input.inputValue = parseFloat(input.inputValue);\r\n                                            }\r\n                                            return {\r\n                                                inputLabel: input.inputLabel,\r\n                                                inputValue: input.inputValue,\r\n                                                // [input.inputLabel]: input.inputValue,\r\n                                            };\r\n                                        });\r\n                                        return {\r\n                                            outcomeIndicator: indicator.outcomeIndicator,\r\n                                            outputIndicatorsInputs: outputInputs\r\n                                        };\r\n                                    });\r\n                                    const groupedIndicator = groupObjArrayByAttr(indicators, 'outcomeIndicator');\r\n                                    const sumOutputGroup = [];\r\n                                    for (const [key, value] of Object.entries(groupedIndicator)) {\r\n                                        const val = value;\r\n                                        let vals = [];\r\n                                        val === null || val === void 0 ? void 0 : val.forEach((val) => { var _a; return vals = [...vals !== null && vals !== void 0 ? vals : [], ...(_a = val.outputIndicatorsInputs) !== null && _a !== void 0 ? _a : []]; });\r\n                                        const label = 'inputLabel';\r\n                                        vals = Object.values(vals.reduce((acc, curr) => {\r\n                                            var _a;\r\n                                            var _b;\r\n                                            (_a = acc[_b = curr[label]]) !== null && _a !== void 0 ? _a : (acc[_b] = { [label]: curr[label] });\r\n                                            Object.keys(curr).filter(k => k !== label).forEach(k => acc[curr[label]][k] = (acc[curr[label]][k] || 0) + curr[k]);\r\n                                            return acc;\r\n                                        }, {}));\r\n                                        sumOutputGroup.push({\r\n                                            outcomeIndicator: key,\r\n                                            outputIndicatorsInputs: vals\r\n                                        });\r\n                                    }\r\n                                    return sumOutputGroup;\r\n                                },\r\n                                args: ['$indicators'],\r\n                                lang: 'js'\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                // {\r\n                //   $sort: {\r\n                //     'sectorName': 1\r\n                //   }\r\n                // },\r\n                {\r\n                    $group: lastGroupStage\r\n                },\r\n                {\r\n                    $sort: {\r\n                        'data.collectionDate': 1,\r\n                    }\r\n                }\r\n            ]);\r\n    }\r\n};\r\nDashboardService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(nix_db_model_1.ENixDbModels.dataEntryModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object])\r\n], DashboardService);\r\nexports.DashboardService = DashboardService;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DataTemplateController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst data_template_service_1 = require(\"./../service/data-template.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet DataTemplateController = class DataTemplateController {\r\n    constructor(dataTemplateService) {\r\n        this.dataTemplateService = dataTemplateService;\r\n    }\r\n    saveTemplate(body) {\r\n        return this.dataTemplateService.saveTemplate(body);\r\n    }\r\n    getDataTemplate(sectorId) {\r\n        return this.dataTemplateService.getSectorDataTemplate(sectorId);\r\n    }\r\n    deleteTemplate(id) {\r\n        return this.dataTemplateService.deleteTemplate(id);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DataTemplateController.prototype, \"saveTemplate\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(),\r\n    tslib_1.__param(0, (0, common_1.Query)('sectorId')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DataTemplateController.prototype, \"getDataTemplate\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Delete)('/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], DataTemplateController.prototype, \"deleteTemplate\", null);\r\nDataTemplateController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ePlanixRoutes.dataTemplate),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof data_template_service_1.DataTemplateService !== \"undefined\" && data_template_service_1.DataTemplateService) === \"function\" ? _a : Object])\r\n], DataTemplateController);\r\nexports.DataTemplateController = DataTemplateController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DataTemplateModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst data_template_controller_1 = require(\"./controllers/data-template.controller\");\r\nconst data_template_service_1 = require(\"./service/data-template.service\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst nix_db_model_1 = require(\"../../nix-db.model\");\r\nconst data_template_schema_1 = require(\"./data-template.schema\");\r\nlet DataTemplateModule = class DataTemplateModule {\r\n};\r\nDataTemplateModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        controllers: [data_template_controller_1.DataTemplateController],\r\n        providers: [\r\n            data_template_service_1.DataTemplateService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: nix_db_model_1.ENixDbModels.dataTemplateModel,\r\n                modelSchema: data_template_schema_1.dataTetmplatesSchema\r\n            }),\r\n        ],\r\n    })\r\n], DataTemplateModule);\r\nexports.DataTemplateModule = DataTemplateModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.dataTetmplatesSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst nix_db_model_1 = require(\"../../nix-db.model\");\r\n// @Schema({\r\n//   timestamps: true\r\n// })\r\n// export class DataTetmplate {\r\n//   @Prop({\r\n//     type: Types.ObjectId,\r\n//     // ref: ENixDbModels.sectorsModel?.toLowerCase(),\r\n//     ref: Sector.name,\r\n//     required: true\r\n//   })\r\n//   sector: any;\r\n//   @Prop({\r\n//     type: Array,\r\n//     required: true\r\n//   })\r\n//   outcomeIndicators: any[];\r\n//   @Prop({\r\n//     type: Array,\r\n//     required: true\r\n//   })\r\n//   outcomeOutputIndicators: any[];\r\n// }\r\n// export type TDataTetmplateDocument = HydratedDocument<DataTetmplate>;\r\n// export const dataTetmplatesSchema = SchemaFactory.createForClass(DataTetmplate);\r\nexports.dataTetmplatesSchema = new mongoose_1.Schema({\r\n    sector: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: nix_db_model_1.ENixDbModels.sectorsModel,\r\n        required: true\r\n    },\r\n    outcomeIndicators: {\r\n        type: Array\r\n    },\r\n    outcomeOutputIndicators: {\r\n        type: Array,\r\n        required: true\r\n    }\r\n}, { timestamps: true });\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DataTemplateService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst nix_db_model_1 = require(\"../../../nix-db.model\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nlet DataTemplateService = class DataTemplateService {\r\n    constructor(templatesModel) {\r\n        this.templatesModel = templatesModel;\r\n    }\r\n    saveTemplate(Template) {\r\n        if (Template._id)\r\n            return this.templatesModel.findByIdAndUpdate(Template._id, Template, { new: true });\r\n        return this.templatesModel.create(Template);\r\n    }\r\n    getSectorDataTemplate(sectorId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (sectorId == 'All')\r\n                return this.templatesModel.find({}).populate([\r\n                    {\r\n                        path: 'sector',\r\n                        model: nix_db_model_1.ENixDbModels.sectorsModel,\r\n                        select: 'sectorName',\r\n                    }\r\n                ]);\r\n            return this.templatesModel.findOne({ sector: sectorId }).populate([\r\n                {\r\n                    path: 'sector',\r\n                    model: nix_db_model_1.ENixDbModels.sectorsModel,\r\n                    select: 'sectorName',\r\n                }\r\n            ]);\r\n        });\r\n    }\r\n    deleteTemplate(id) {\r\n        return this.templatesModel.findByIdAndDelete(id, { new: true });\r\n    }\r\n};\r\nDataTemplateService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(nix_db_model_1.ENixDbModels.dataTemplateModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_1.Model !== \"undefined\" && mongoose_1.Model) === \"function\" ? _a : Object])\r\n], DataTemplateService);\r\nexports.DataTemplateService = DataTemplateService;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SectorController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst sectors_service_1 = require(\"./../service/sectors.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet SectorController = class SectorController {\r\n    constructor(sectorsService) {\r\n        this.sectorsService = sectorsService;\r\n    }\r\n    saveSector(body) {\r\n        return this.sectorsService.saveSector(body);\r\n    }\r\n    getSectors() {\r\n        return this.sectorsService.getSectors();\r\n    }\r\n    deleteSector(id) {\r\n        return this.sectorsService.deleteSector(id);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SectorController.prototype, \"saveSector\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SectorController.prototype, \"getSectors\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)('Admin', '*'),\r\n    (0, common_1.Delete)('/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SectorController.prototype, \"deleteSector\", null);\r\nSectorController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ePlanixRoutes.sector),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof sectors_service_1.SectorsService !== \"undefined\" && sectors_service_1.SectorsService) === \"function\" ? _a : Object])\r\n], SectorController);\r\nexports.SectorController = SectorController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SectorsModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst sector_controller_1 = require(\"./controllers/sector.controller\");\r\nconst sectors_service_1 = require(\"./service/sectors.service\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst nix_db_model_1 = require(\"../../nix-db.model\");\r\nconst sectors_schema_1 = require(\"./sectors.schema\");\r\nlet SectorsModule = class SectorsModule {\r\n};\r\nSectorsModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        controllers: [sector_controller_1.SectorController],\r\n        providers: [\r\n            sectors_service_1.SectorsService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: nix_db_model_1.ENixDbModels.sectorsModel,\r\n                modelSchema: sectors_schema_1.sectorsSchema\r\n            }),\r\n        ],\r\n    })\r\n], SectorsModule);\r\nexports.SectorsModule = SectorsModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.sectorsSchema = exports.Sector = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst mongoose_1 = require(\"@nestjs/mongoose\");\r\nlet Sector = class Sector {\r\n};\r\ntslib_1.__decorate([\r\n    (0, mongoose_1.Prop)({\r\n        type: String,\r\n        required: true,\r\n        unique: true\r\n    }),\r\n    tslib_1.__metadata(\"design:type\", String)\r\n], Sector.prototype, \"sectorName\", void 0);\r\ntslib_1.__decorate([\r\n    (0, mongoose_1.Prop)({\r\n        type: Array\r\n    }),\r\n    tslib_1.__metadata(\"design:type\", Array)\r\n], Sector.prototype, \"outcomeIndicators\", void 0);\r\nSector = tslib_1.__decorate([\r\n    (0, mongoose_1.Schema)({\r\n        timestamps: true\r\n    })\r\n], Sector);\r\nexports.Sector = Sector;\r\nexports.sectorsSchema = mongoose_1.SchemaFactory.createForClass(Sector);\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SectorsService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst nix_db_model_1 = require(\"../../../nix-db.model\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nlet SectorsService = class SectorsService {\r\n    constructor(sectorsModel) {\r\n        this.sectorsModel = sectorsModel;\r\n    }\r\n    saveSector(sector) {\r\n        if (sector._id)\r\n            return this.sectorsModel.findByIdAndUpdate(sector._id, sector, { new: true });\r\n        return this.sectorsModel.create(sector);\r\n    }\r\n    getSectors() {\r\n        return this.sectorsModel.find({});\r\n        // return this.sectorsModel.find({sectorName: {$ne: 'All'}});\r\n    }\r\n    deleteSector(id) {\r\n        return this.sectorsModel.findByIdAndDelete(id, { new: true });\r\n    }\r\n};\r\nSectorsService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(nix_db_model_1.ENixDbModels.sectorsModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_1.Model !== \"undefined\" && mongoose_1.Model) === \"function\" ? _a : Object])\r\n], SectorsService);\r\nexports.SectorsService = SectorsService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ENixDbModels = void 0;\r\nvar ENixDbModels;\r\n(function (ENixDbModels) {\r\n    ENixDbModels[\"userAccountModel\"] = \"Nix_UserAccount\";\r\n    ENixDbModels[\"userAccountCodeModel\"] = \"Nix_AccountCode\";\r\n    ENixDbModels[\"sectorsModel\"] = \"Nix_Sector\";\r\n    ENixDbModels[\"dataTemplateModel\"] = \"Nix_DataTemplate\";\r\n    ENixDbModels[\"lgaModel\"] = \"Nix_Lga\";\r\n    ENixDbModels[\"dataEntryModel\"] = \"Nix_DataEntry\";\r\n})(ENixDbModels = exports.ENixDbModels || (exports.ENixDbModels = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NixModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst user_account_module_1 = require(\"./common/user-account/user-account.module\");\r\nconst sectors_module_1 = require(\"./core/sectors/sectors.module\");\r\nconst data_template_module_1 = require(\"./core/data-template/data-template.module\");\r\nconst data_entry_module_1 = require(\"./common/data-entry/data-entry.module\");\r\nconst dashboard_module_1 = require(\"./core/dashboard/dashboard.module\");\r\nlet NixModule = class NixModule {\r\n};\r\nNixModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [\r\n            user_account_module_1.UserAccountModule,\r\n            sectors_module_1.SectorsModule,\r\n            data_template_module_1.DataTemplateModule,\r\n            data_entry_module_1.DataEntryModule,\r\n            dashboard_module_1.DashboardModule\r\n        ],\r\n    })\r\n], NixModule);\r\nexports.NixModule = NixModule;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NixModuleRouting = void 0;\r\nconst nix_module_1 = require(\"./nix.module\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst user_account_module_1 = require(\"./common/user-account/user-account.module\");\r\nconst sectors_module_1 = require(\"./core/sectors/sectors.module\");\r\nconst data_template_module_1 = require(\"./core/data-template/data-template.module\");\r\nconst data_entry_module_1 = require(\"./common/data-entry/data-entry.module\");\r\nconst dashboard_module_1 = require(\"./core/dashboard/dashboard.module\");\r\nexports.NixModuleRouting = [\r\n    {\r\n        path: 'nix',\r\n        module: nix_module_1.NixModule,\r\n        children: [\r\n            {\r\n                path: (_a = lib_xUtils_1.ePlanixModules.ADMIN) === null || _a === void 0 ? void 0 : _a.toLowerCase(),\r\n                module: dashboard_module_1.DashboardModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.ECommonAppModule.Settings.toLowerCase(),\r\n                module: user_account_module_1.UserAccountModule\r\n            },\r\n            {\r\n                path: (_b = lib_xUtils_1.ePlanixModules.SECTORS) === null || _b === void 0 ? void 0 : _b.toLowerCase(),\r\n                module: sectors_module_1.SectorsModule\r\n            },\r\n            {\r\n                path: (_c = lib_xUtils_1.ePlanixModules.DATATEMPLATE) === null || _c === void 0 ? void 0 : _c.toLowerCase(),\r\n                module: data_template_module_1.DataTemplateModule\r\n            },\r\n            {\r\n                path: (_d = lib_xUtils_1.ePlanixModules.DATAENTRY) === null || _d === void 0 ? void 0 : _d.toLowerCase(),\r\n                module: data_entry_module_1.DataEntryModule\r\n            },\r\n        ]\r\n    }\r\n];\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst game_query_service_1 = require(\"./../services/game-query.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet GameQueryController = class GameQueryController {\r\n    constructor(gameQueryService) {\r\n        this.gameQueryService = gameQueryService;\r\n    }\r\n    games() {\r\n        return this.gameQueryService.gameList();\r\n    }\r\n    getHistory(sDate, eDate) {\r\n        return this.gameQueryService.gameHistory(sDate !== 'undefined' ? JSON.parse(sDate || '{}') : null, eDate !== 'undefined' ? JSON.parse(eDate || '{}') : null);\r\n    }\r\n    getGameHome() {\r\n        return this.gameQueryService.gameHome();\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EGameQuery.games),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameQueryController.prototype, \"games\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EGameQuery.gameHistory),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameQueryController.prototype, \"getHistory\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EGameQuery.gameHome),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameQueryController.prototype, \"getGameHome\", null);\r\nGameQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EGameQuery.gameQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof game_query_service_1.GameQueryService !== \"undefined\" && game_query_service_1.GameQueryService) === \"function\" ? _a : Object])\r\n], GameQueryController);\r\nexports.GameQueryController = GameQueryController;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst game_store_service_1 = require(\"./../services/game-store.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet GameStoreController = class GameStoreController {\r\n    constructor(gameStoreService) {\r\n        this.gameStoreService = gameStoreService;\r\n    }\r\n    saveGame(game) {\r\n        return this.gameStoreService.save(game);\r\n    }\r\n    deleteGame(gameId) {\r\n        return this.gameStoreService.delete(gameId);\r\n    }\r\n    playGame(game) {\r\n        return this.gameStoreService.playGame(game);\r\n    }\r\n    deleteHistory(type, id) {\r\n        return this.gameStoreService.deleteHistory(id, type);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.EGameStore.game),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.IRmdGame !== \"undefined\" && lib_xUtils_1.IRmdGame) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameStoreController.prototype, \"saveGame\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Delete)(lib_xUtils_1.EGameStore.game + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameStoreController.prototype, \"deleteGame\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)('*', '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.EGameStore.gamePlay),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = typeof lib_xUtils_1.IRmdGamePlay !== \"undefined\" && lib_xUtils_1.IRmdGamePlay) === \"function\" ? _c : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameStoreController.prototype, \"playGame\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Delete)(lib_xUtils_1.EGameStore.gameHistory + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Query)('type')),\r\n    tslib_1.__param(1, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], GameStoreController.prototype, \"deleteHistory\", null);\r\nGameStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EGameStore.gameStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof game_store_service_1.GameStoreService !== \"undefined\" && game_store_service_1.GameStoreService) === \"function\" ? _a : Object])\r\n], GameStoreController);\r\nexports.GameStoreController = GameStoreController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst game_store_controller_1 = require(\"./controllers/game-store.controller\");\r\nconst game_query_controller_1 = require(\"./controllers/game-query.controller\");\r\nconst game_query_service_1 = require(\"./services/game-query.service\");\r\nconst game_store_service_1 = require(\"./services/game-store.service\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst rmd_db_model_1 = require(\"../../rmd-db.model\");\r\nconst game_schema_1 = require(\"./game.schema\");\r\nconst settings_schema_1 = require(\"../settings/settings.schema\");\r\n// healMahTechAtEvenNodeDb\r\nlet GameModule = class GameModule {\r\n};\r\nGameModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [],\r\n        controllers: [game_store_controller_1.GameStoreController, game_query_controller_1.GameQueryController],\r\n        providers: [\r\n            game_store_service_1.GameStoreService,\r\n            game_query_service_1.GameQueryService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.gameModel,\r\n                modelSchema: game_schema_1.gameSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.gamePlayedModel,\r\n                modelSchema: game_schema_1.gamePlayedSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.systemConfigModel,\r\n                modelSchema: settings_schema_1.systemConfigSchema\r\n            }),\r\n        ],\r\n    })\r\n], GameModule);\r\nexports.GameModule = GameModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.gamePlayedSchema = exports.gameSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst rmd_db_model_1 = require(\"../../rmd-db.model\");\r\nexports.gameSchema = new mongoose_1.Schema({\r\n    gameName: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    gameCost: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    numOfTimes: Number,\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel\r\n    },\r\n    payMethod: String,\r\n}, { timestamps: true });\r\nexports.gamePlayedSchema = new mongoose_1.Schema({\r\n    invoiceId: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    player: String,\r\n    gameItems: [exports.gameSchema],\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel\r\n    }\r\n}, { timestamps: true });\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nlet GameQueryService = class GameQueryService {\r\n    constructor(gameModel, gamePlayedModel, systemConfigModel) {\r\n        this.gameModel = gameModel;\r\n        this.gamePlayedModel = gamePlayedModel;\r\n        this.systemConfigModel = systemConfigModel;\r\n    }\r\n    gameList() {\r\n        return this.gameModel.find({});\r\n    }\r\n    gameHistory(sDate, eDate) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            if (!config)\r\n                return;\r\n            let dateRangeFilter = {};\r\n            if (!sDate || !eDate) {\r\n                if (config.commissionRange == 'Daily') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                    };\r\n                }\r\n                if (config.commissionRange == 'Weekly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                    };\r\n                }\r\n                if (config.commissionRange == 'Monthly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n                };\r\n            }\r\n            // const gamesStats = await this.gamePlayedModel.aggregate([\r\n            //   {\r\n            //     $match: {\r\n            //       createdAt: dateRangeFilter\r\n            //     }\r\n            //   },\r\n            //   {\r\n            //     $unwind: '$gameItems'\r\n            //   },\r\n            //   {\r\n            //     $match: {\r\n            //       $and: [\r\n            //         {'deleted': false},\r\n            //         {'gameItems.deleted': false},\r\n            //       ]\r\n            //     }\r\n            //   },\r\n            //   {\r\n            //     $group: {\r\n            //       _id: null,\r\n            //       count: {\r\n            //         $sum: '$gameItems.numOfTimes'\r\n            //       },\r\n            //       amount: {\r\n            //         $sum: {\r\n            //           $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n            //         }\r\n            //       }\r\n            //     }\r\n            //   }\r\n            // ]);\r\n            const gamesByPayMethod = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$gameItems.payMethod',\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const gamesTotalAmount = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const history = yield this.gamePlayedModel.find({\r\n                createdAt: dateRangeFilter,\r\n            }).populate([\r\n                {\r\n                    path: 'userAccount',\r\n                    model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                    select: 'email firstName surName',\r\n                    options: { withDeleted: true },\r\n                },\r\n                {\r\n                    path: 'gameItems.deletedBy',\r\n                    model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                    select: 'email firstName surName',\r\n                    options: { withDeleted: true },\r\n                }\r\n            ]);\r\n            return {\r\n                history,\r\n                gamesTotalAmount: (gamesTotalAmount === null || gamesTotalAmount === void 0 ? void 0 : gamesTotalAmount.length) ? gamesTotalAmount[0] : {},\r\n                gamesByPayMethod\r\n            };\r\n        });\r\n    }\r\n    gameHome() {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            if (!config)\r\n                return;\r\n            let dateRangeFilter = {};\r\n            if (config.commissionRange == 'Daily') {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                };\r\n            }\r\n            if (config.commissionRange == 'Weekly') {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                };\r\n            }\r\n            if (config.commissionRange == 'Monthly') {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                };\r\n            }\r\n            const gamesCount = (_a = (yield this.gameModel.find({}))) === null || _a === void 0 ? void 0 : _a.length;\r\n            const gamesStats = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        count: {\r\n                            $sum: '$gameItems.numOfTimes'\r\n                        },\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const popularGames = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$gameItems.gameName',\r\n                        count: {\r\n                            $sum: '$gameItems.numOfTimes'\r\n                        },\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        count: -1\r\n                    }\r\n                },\r\n                {\r\n                    $limit: 5\r\n                }\r\n            ]);\r\n            return {\r\n                gamesCount: gamesCount,\r\n                gameStats: gamesStats.length ? gamesStats[0] : {},\r\n                popularGames: popularGames\r\n            };\r\n        });\r\n    }\r\n};\r\nGameQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.gameModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.gamePlayedModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.systemConfigModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object])\r\n], GameQueryService);\r\nexports.GameQueryService = GameQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GameStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nlet GameStoreService = class GameStoreService {\r\n    constructor(gameModel, gamePlayedModel, cls) {\r\n        this.gameModel = gameModel;\r\n        this.gamePlayedModel = gamePlayedModel;\r\n        this.cls = cls;\r\n    }\r\n    save(game) {\r\n        if (game === null || game === void 0 ? void 0 : game._id)\r\n            return this.gameModel.findByIdAndUpdate(game === null || game === void 0 ? void 0 : game._id, game);\r\n        return this.gameModel.create(game);\r\n    }\r\n    delete(gameId) {\r\n        if (this.cls.get('contextUser._id'))\r\n            return this.gameModel.deleteById(gameId, this.cls.get('contextUser._id'));\r\n        throw new Error('Invalid Authentication');\r\n    }\r\n    playGame(game) {\r\n        game.userAccount = this.cls.get('contextUser._id');\r\n        game.invoiceId = (0, lib_xUtils_1.randomChars)('numbers', 4);\r\n        return this.gamePlayedModel.create(game);\r\n    }\r\n    deleteHistory(id, type) {\r\n        const userId = this.cls.get('contextUser._id');\r\n        if (type == 'batch') {\r\n            return this.gamePlayedModel.deleteById(id, userId);\r\n        }\r\n        return this.gamePlayedModel.findOneAndUpdate({\r\n            'gameItems._id': { $in: [id] }\r\n        }, {\r\n            $set: {\r\n                'gameItems.$.deleted': true,\r\n                'gameItems.$.deletedBy': this.cls.get('contextUser._id'),\r\n                'gameItems.$.deletedAt': new Date(),\r\n            }\r\n        }, {\r\n            new: true,\r\n            strict: false,\r\n            strictQuery: false\r\n        }).populate([\r\n            {\r\n                path: 'userAccount',\r\n                model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            },\r\n            {\r\n                path: 'gameItems.deletedBy',\r\n                model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            }\r\n        ]);\r\n    }\r\n};\r\nGameStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.gameModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.gamePlayedModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _c : Object])\r\n], GameStoreService);\r\nexports.GameStoreService = GameStoreService;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst services_query_service_1 = require(\"./../services/services-query.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet ServicesQueryController = class ServicesQueryController {\r\n    constructor(servicesQueryService) {\r\n        this.servicesQueryService = servicesQueryService;\r\n    }\r\n    getServices() {\r\n        return this.servicesQueryService.getServices();\r\n    }\r\n    getDashboardServices(sDate, eDate, staffId) {\r\n        return this.servicesQueryService.getRenderedDashboardService(sDate !== 'undefined' ? JSON.parse(sDate || '{}') : null, eDate !== 'undefined' ? JSON.parse(eDate || '{}') : null, staffId);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EServicesQuery.getServices),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesQueryController.prototype, \"getServices\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard', 'Basic'], \"*\"),\r\n    (0, common_1.Get)(lib_xUtils_1.EServicesQuery.getRenderedDashoardService),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__param(2, (0, common_1.Query)('staffId')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesQueryController.prototype, \"getDashboardServices\", null);\r\nServicesQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EServicesQuery.servicesQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof services_query_service_1.ServicesQueryService !== \"undefined\" && services_query_service_1.ServicesQueryService) === \"function\" ? _a : Object])\r\n], ServicesQueryController);\r\nexports.ServicesQueryController = ServicesQueryController;\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst services_store_service_1 = require(\"./../services/services-store.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet ServicesStoreController = class ServicesStoreController {\r\n    constructor(servicesStoreService) {\r\n        this.servicesStoreService = servicesStoreService;\r\n    }\r\n    saveService(serviceForm) {\r\n        return this.servicesStoreService.saveServiceItem(serviceForm);\r\n    }\r\n    deleteService(serviceId) {\r\n        return this.servicesStoreService.deleteService(serviceId);\r\n    }\r\n    renderService(renderedService, renderedBy) {\r\n        renderedService.renderedBy = renderedBy;\r\n        return this.servicesStoreService.renderService(renderedService);\r\n    }\r\n    deleteRenderedService(serviceId, batchId, type) {\r\n        return this.servicesStoreService.deleteRenderedServices(batchId, serviceId, type);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.EServicesStore.saveService),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesStoreController.prototype, \"saveService\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.EServicesStore.deleteService + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesStoreController.prototype, \"deleteService\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.EServicesStore.renderService),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__param(1, (0, common_1.Query)('renderedBy')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.IServiceRendered !== \"undefined\" && lib_xUtils_1.IServiceRendered) === \"function\" ? _b : Object, String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesStoreController.prototype, \"renderService\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.EServicesStore.deleteRenderedService + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__param(1, (0, common_1.Query)('batchId')),\r\n    tslib_1.__param(2, (0, common_1.Query)('type')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], ServicesStoreController.prototype, \"deleteRenderedService\", null);\r\nServicesStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EServicesStore.servicesStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof services_store_service_1.ServicesStoreService !== \"undefined\" && services_store_service_1.ServicesStoreService) === \"function\" ? _a : Object])\r\n], ServicesStoreController);\r\nexports.ServicesStoreController = ServicesStoreController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst services_store_controller_1 = require(\"./controllers/services-store.controller\");\r\nconst services_query_controller_1 = require(\"./controllers/services-query.controller\");\r\nconst services_store_service_1 = require(\"./services/services-store.service\");\r\nconst services_query_service_1 = require(\"./services/services-query.service\");\r\nconst db_providers_1 = require(\"libs/lib-db-config/src/lib/db.providers\");\r\nconst rmd_db_model_1 = require(\"../../rmd-db.model\");\r\nconst services_schema_1 = require(\"./services.schema\");\r\nconst settings_schema_1 = require(\"../settings/settings.schema\");\r\nlet ServicesModule = class ServicesModule {\r\n};\r\nServicesModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [],\r\n        controllers: [services_store_controller_1.ServicesStoreController, services_query_controller_1.ServicesQueryController],\r\n        providers: [services_store_service_1.ServicesStoreService, services_query_service_1.ServicesQueryService,\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.serviceItemModel,\r\n                modelSchema: services_schema_1.serviceItemSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.serviceRenderedItemModel,\r\n                modelSchema: services_schema_1.renderedServiceItemSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.serviceRenderedModel,\r\n                modelSchema: services_schema_1.serviceRenderedSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.systemConfigModel,\r\n                modelSchema: settings_schema_1.systemConfigSchema\r\n            })\r\n        ]\r\n    })\r\n], ServicesModule);\r\nexports.ServicesModule = ServicesModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.serviceRenderedSchema = exports.renderedServiceItemSchema = exports.serviceItemSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst rmd_db_model_1 = require(\"../../rmd-db.model\");\r\nexports.serviceItemSchema = new mongoose_1.Schema({\r\n    serviceName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    serviceCost: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    serviceCommission: {\r\n        type: Number,\r\n        required: true\r\n    }\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.renderedServiceItemSchema = new mongoose_1.Schema({\r\n    serviceName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    serviceCost: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    serviceCommission: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    commissionAmount: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    numOfTimes: {\r\n        type: Number,\r\n        required: true,\r\n        default: 1,\r\n        min: 1\r\n    },\r\n    payMethod: String\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.serviceRenderedSchema = new mongoose_1.Schema({\r\n    invoiceId: String,\r\n    serviceItems: [exports.renderedServiceItemSchema],\r\n    renderedBy: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n        required: true\r\n    },\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel\r\n    }\r\n}, {\r\n    timestamps: true\r\n});\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nlet ServicesQueryService = class ServicesQueryService {\r\n    constructor(serviceItemModel, serviceRenderedModel, systemConfigModel) {\r\n        this.serviceItemModel = serviceItemModel;\r\n        this.serviceRenderedModel = serviceRenderedModel;\r\n        this.systemConfigModel = systemConfigModel;\r\n    }\r\n    getServices() {\r\n        return this.serviceItemModel.find({});\r\n    }\r\n    getRenderedDashboardService(sDate, eDate, staffId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            let dateRangeFilter = {};\r\n            if (!sDate || !eDate) {\r\n                if (config.commissionRange == 'Daily') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                    };\r\n                }\r\n                if (config.commissionRange == 'Weekly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                    };\r\n                }\r\n                if (config.commissionRange == 'Monthly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n                };\r\n            }\r\n            const match = staffId && staffId !== 'undefined' ? {\r\n                deleted: false,\r\n                createdAt: dateRangeFilter,\r\n                renderedBy: new mongoose_1.Types.ObjectId(staffId)\r\n            } : {\r\n                deleted: false,\r\n                createdAt: dateRangeFilter\r\n            };\r\n            // console.log('hair ',dateRangeFilter, config.commissionRange, sDate, eDate, sDate == 'null' as any);\r\n            const totalRenderedAmount = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems',\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        cost: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        commissionAmount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const renderedByCommission = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems.serviceCommission',\r\n                        cost: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        commissionAmount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        _id: 1\r\n                    }\r\n                }\r\n            ]);\r\n            const renderedByPayMethod = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems.payMethod',\r\n                        cost: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        commissionAmount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        _id: 1\r\n                    }\r\n                }\r\n            ]);\r\n            const renderedByStaff = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                        localField: 'renderedBy',\r\n                        foreignField: '_id', as: 'staff'\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: { $arrayElemAt: ['$staff._id', -1] },\r\n                        serviceCost: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        commissionAmount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                        staff: {\r\n                            $addToSet: {\r\n                                $arrayElemAt: ['$staff', -1]\r\n                            }\r\n                        },\r\n                        services: {\r\n                            $push: '$serviceItems'\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        commissionAmount: '$commissionAmount',\r\n                        serviceCost: '$serviceCost',\r\n                        staff: {\r\n                            $arrayElemAt: ['$staff', -1]\r\n                        },\r\n                        staffName: {\r\n                            $concat: [\r\n                                {\r\n                                    $arrayElemAt: ['$staff.firstName', -1]\r\n                                },\r\n                                \" \",\r\n                                {\r\n                                    $arrayElemAt: ['$staff.surName', -1]\r\n                                }\r\n                            ]\r\n                        },\r\n                        services: '$services'\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        _id: 1\r\n                    }\r\n                }\r\n            ]);\r\n            const dashboardServices = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: match\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $sort: { 'createdAt': 1 },\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                        localField: 'renderedBy',\r\n                        foreignField: '_id', as: 'staff'\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                        localField: 'userAccount',\r\n                        foreignField: '_id', as: 'userAccount'\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems._id',\r\n                        batchId: { $push: '$_id' },\r\n                        invoiceId: { $push: '$invoiceId' },\r\n                        renderedBy: { $push: { $arrayElemAt: ['$staff', -1] } },\r\n                        userAccount: { $push: { $arrayElemAt: ['$userAccount', -1] } },\r\n                        serviceName: { $push: '$serviceItems.serviceName' },\r\n                        serviceCost: { $push: '$serviceItems.serviceCost' },\r\n                        serviceCommission: { $push: '$serviceItems.serviceCommission' },\r\n                        commissionAmount: { $push: '$serviceItems.commissionAmount' },\r\n                        numOfTimes: { $push: '$serviceItems.numOfTimes' },\r\n                        payMethod: { $push: '$serviceItems.payMethod' },\r\n                        createdAt: { $push: '$serviceItems.createdAt' },\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        invoiceId: { $arrayElemAt: ['$invoiceId', -1] },\r\n                        batchId: { $arrayElemAt: ['$batchId', -1] },\r\n                        renderedBy: { $arrayElemAt: ['$renderedBy', -1] },\r\n                        userAccount: { $arrayElemAt: ['$userAccount.firstName', -1] },\r\n                        serviceName: { $arrayElemAt: ['$serviceName', -1] },\r\n                        serviceCost: { $arrayElemAt: ['$serviceCost', -1] },\r\n                        serviceCommission: { $arrayElemAt: ['$serviceCommission', -1] },\r\n                        commissionAmount: { $arrayElemAt: ['$commissionAmount', -1] },\r\n                        numOfTimes: { $arrayElemAt: ['$numOfTimes', -1] },\r\n                        payMethod: { $arrayElemAt: ['$payMethod', -1] },\r\n                        createdAt: { $arrayElemAt: ['$createdAt', -1] },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1\r\n                    }\r\n                }\r\n            ]);\r\n            const dashboardbatchServices = yield this.serviceRenderedModel.find(Object.assign({}, match)).populate([\r\n                {\r\n                    path: 'renderedBy',\r\n                    model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                    select: 'email firstName surName',\r\n                    options: { withDeleted: true },\r\n                }\r\n            ]);\r\n            return {\r\n                main: (totalRenderedAmount === null || totalRenderedAmount === void 0 ? void 0 : totalRenderedAmount.length) ? totalRenderedAmount[0] : {},\r\n                byPayMethod: renderedByPayMethod,\r\n                byCommission: renderedByCommission,\r\n                byStaff: renderedByStaff,\r\n                services: dashboardServices,\r\n                byBatch: dashboardbatchServices\r\n            };\r\n        });\r\n    }\r\n};\r\nServicesQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.serviceItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.serviceRenderedModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.systemConfigModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object])\r\n], ServicesQueryService);\r\nexports.ServicesQueryService = ServicesQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet ServicesStoreService = class ServicesStoreService {\r\n    constructor(serviceItemModel, serviceRenderedModel, cls) {\r\n        this.serviceItemModel = serviceItemModel;\r\n        this.serviceRenderedModel = serviceRenderedModel;\r\n        this.cls = cls;\r\n    }\r\n    saveServiceItem(serviceItem) {\r\n        if (serviceItem === null || serviceItem === void 0 ? void 0 : serviceItem._id) {\r\n            return this.serviceItemModel.findByIdAndUpdate(serviceItem._id, serviceItem);\r\n        }\r\n        else {\r\n            return this.serviceItemModel.create(serviceItem);\r\n        }\r\n    }\r\n    deleteService(serviceId) {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const service = yield this.serviceItemModel.deleteById(serviceId, (_a = this.cls.get('contextUser')) === null || _a === void 0 ? void 0 : _a._id);\r\n            if (service === null || service === void 0 ? void 0 : service.modifiedCount)\r\n                return this.serviceItemModel.find({});\r\n        });\r\n    }\r\n    renderService(serviceRendered) {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            console.log('Render Service Now');\r\n            serviceRendered.invoiceId = (0, lib_xUtils_1.randomChars)('numbers', 4);\r\n            serviceRendered.userAccount = (_a = this.cls.get('contextUser')) === null || _a === void 0 ? void 0 : _a._id;\r\n            return (yield this.serviceRenderedModel.create(serviceRendered)).populate([\r\n                {\r\n                    path: 'renderedBy',\r\n                    model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                    select: 'emai firstName surName',\r\n                    options: { withDeleted: true },\r\n                },\r\n            ]);\r\n        });\r\n    }\r\n    deleteRenderedServices(batchId, serviceId, type) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (type == 'single') {\r\n                const deletion = yield this.serviceRenderedModel.findOneAndUpdate({\r\n                    'serviceItems._id': { $in: [serviceId] }\r\n                }, {\r\n                    $set: {\r\n                        'serviceItems.$.deleted': true,\r\n                        'serviceItems.$.deletedBy': this.cls.get('contextUser._id'),\r\n                        'serviceItems.$.deletedAt': new Date(),\r\n                    }\r\n                }, {\r\n                    new: true,\r\n                    strict: false,\r\n                    strictQuery: false\r\n                });\r\n                return deletion;\r\n            }\r\n            else {\r\n                return this.serviceRenderedModel.deleteById(batchId, this.cls.get('contextUser._id'));\r\n            }\r\n        });\r\n    }\r\n};\r\nServicesStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.serviceItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.serviceRenderedModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _c : Object])\r\n], ServicesStoreService);\r\nexports.ServicesStoreService = ServicesStoreService;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst settings_query_service_1 = require(\"./../services/settings-query.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet SettingsQueryController = class SettingsQueryController {\r\n    constructor(settingsQueryService) {\r\n        this.settingsQueryService = settingsQueryService;\r\n    }\r\n    getDeleted(sDate, eDate) {\r\n        return this.settingsQueryService.getDeleted(JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}'));\r\n    }\r\n    getSystemConfig() {\r\n        return this.settingsQueryService.getSystemCnfig();\r\n    }\r\n    getExpenditures(sDate, eDate) {\r\n        return this.settingsQueryService.getExpenditures(JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}'));\r\n    }\r\n    getTodos(sDate, eDate) {\r\n        return this.settingsQueryService.getTodos(JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}'));\r\n    }\r\n    getStaffPay(sDate, eDate) {\r\n        return this.settingsQueryService.getStaffPays(JSON.parse(sDate || '{}'), JSON.parse(eDate || '{}'));\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getDeleted\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.getSettings),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getSystemConfig\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.expenditure),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getExpenditures\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.todo),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getTodos\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ESettingsQuery.staffPay),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsQueryController.prototype, \"getStaffPay\", null);\r\nSettingsQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ESettingsQuery.settingsQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof settings_query_service_1.SettingsQueryService !== \"undefined\" && settings_query_service_1.SettingsQueryService) === \"function\" ? _a : Object])\r\n], SettingsQueryController);\r\nexports.SettingsQueryController = SettingsQueryController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e, _f;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst settings_store_service_1 = require(\"./../services/settings-store.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet SettingsStoreController = class SettingsStoreController {\r\n    constructor(settingsStoreService) {\r\n        this.settingsStoreService = settingsStoreService;\r\n    }\r\n    saveSetting(settings) {\r\n        return this.settingsStoreService.saveSettings(settings);\r\n    }\r\n    saveExpense(expense) {\r\n        return this.settingsStoreService.saveExpenditure(expense);\r\n    }\r\n    deleteExpenditure(expenseId) {\r\n        return this.settingsStoreService.deleteExpenditure(expenseId);\r\n    }\r\n    saveTodo(todo) {\r\n        return this.settingsStoreService.saveTodo(todo);\r\n    }\r\n    markTodoDone(todo) {\r\n        return this.settingsStoreService.markTodoDone(todo);\r\n    }\r\n    deleteTodo(todoId) {\r\n        return this.settingsStoreService.deleteTodo(todoId);\r\n    }\r\n    saveStaffPay(staffPay) {\r\n        return this.settingsStoreService.saveStaffPay(staffPay);\r\n    }\r\n    deleteStaffPay(payId) {\r\n        return this.settingsStoreService.deleteStaffPay(payId);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.saveSettings),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.ISystemConfig !== \"undefined\" && lib_xUtils_1.ISystemConfig) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"saveSetting\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(\"*\", \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.expenditure),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = typeof lib_xUtils_1.IExpenditure !== \"undefined\" && lib_xUtils_1.IExpenditure) === \"function\" ? _c : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"saveExpense\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ESettingsStore.expenditure + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"deleteExpenditure\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.todo),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_d = typeof lib_xUtils_1.ITodo !== \"undefined\" && lib_xUtils_1.ITodo) === \"function\" ? _d : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"saveTodo\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Put)(lib_xUtils_1.ESettingsStore.todo + '/:todo'),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_e = typeof lib_xUtils_1.ITodo !== \"undefined\" && lib_xUtils_1.ITodo) === \"function\" ? _e : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"markTodoDone\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ESettingsStore.todo + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"deleteTodo\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.ESettingsStore.staffPay),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_f = typeof lib_xUtils_1.IRmdStaffPay !== \"undefined\" && lib_xUtils_1.IRmdStaffPay) === \"function\" ? _f : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"saveStaffPay\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ESettingsStore.staffPay + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], SettingsStoreController.prototype, \"deleteStaffPay\", null);\r\nSettingsStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.ESettingsStore.settingsStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof settings_store_service_1.SettingsStoreService !== \"undefined\" && settings_store_service_1.SettingsStoreService) === \"function\" ? _a : Object])\r\n], SettingsStoreController);\r\nexports.SettingsStoreController = SettingsStoreController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nlet SettingsQueryService = class SettingsQueryService {\r\n    constructor(systemConfigModel, expenditureModel, stockItemModel, saleModel, serviceItemModel, serviceRenderedModel, gameModel, gamePlayedModel, userAccountModel, todoModel, staffPayModel) {\r\n        this.systemConfigModel = systemConfigModel;\r\n        this.expenditureModel = expenditureModel;\r\n        this.stockItemModel = stockItemModel;\r\n        this.saleModel = saleModel;\r\n        this.serviceItemModel = serviceItemModel;\r\n        this.serviceRenderedModel = serviceRenderedModel;\r\n        this.gameModel = gameModel;\r\n        this.gamePlayedModel = gamePlayedModel;\r\n        this.userAccountModel = userAccountModel;\r\n        this.todoModel = todoModel;\r\n        this.staffPayModel = staffPayModel;\r\n    }\r\n    getSystemCnfig() {\r\n        return this.systemConfigModel.findOne();\r\n    }\r\n    getExpenditures(sDate, eDate) {\r\n        return this.expenditureModel.find({\r\n            expenseDate: {\r\n                $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate)),\r\n            }\r\n        }).populate([\r\n            {\r\n                path: 'userAccount',\r\n                model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            },\r\n        ])\r\n            .sort({\r\n            createdAt: -1\r\n        });\r\n    }\r\n    getTodos(sDate, eDate) {\r\n        const dateRangeFilter = {\r\n            $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n            $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n        };\r\n        return this.todoModel.find({\r\n            createdAt: dateRangeFilter\r\n        }).populate([\r\n            {\r\n                path: 'userAccount',\r\n                model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            },\r\n            {\r\n                path: 'todoDoneBy',\r\n                model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                select: 'email firstName surName',\r\n                options: { withDeleted: true },\r\n            },\r\n        ])\r\n            .sort({\r\n            todoDone: 1,\r\n            createdAt: -1\r\n        });\r\n    }\r\n    getStaffPays(sDate, eDate) {\r\n        const dateRangeFilter = {\r\n            $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n            $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n        };\r\n        return this.staffPayModel.aggregate([\r\n            {\r\n                $match: {\r\n                    createdAt: dateRangeFilter\r\n                }\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                    localField: 'userAccount',\r\n                    foreignField: '_id',\r\n                    as: 'userAccount'\r\n                }\r\n            },\r\n            {\r\n                $lookup: {\r\n                    from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                    localField: 'staff',\r\n                    foreignField: '_id',\r\n                    as: 'staff'\r\n                }\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: { $arrayElemAt: ['$staff._id', -1] },\r\n                    staffPays: {\r\n                        $addToSet: '$$ROOT'\r\n                    },\r\n                    payAmount: {\r\n                        $sum: '$payAmount'\r\n                    },\r\n                    userAccount: {\r\n                        $addToSet: { $arrayElemAt: ['$userAccount', -1] }\r\n                    },\r\n                    staff: {\r\n                        $addToSet: { $arrayElemAt: ['$staff', -1] }\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                $lookup: {\r\n                    localField: '_id',\r\n                    foreignField: 'renderedBy',\r\n                    from: rmd_db_model_1.ERmdDbModels.serviceRenderedModel.toLocaleLowerCase() + 's',\r\n                    as: 'serviceCom',\r\n                    pipeline: [\r\n                        {\r\n                            $match: {\r\n                                createdAt: dateRangeFilter,\r\n                            }\r\n                        },\r\n                        {\r\n                            $unwind: '$serviceItems'\r\n                        },\r\n                        {\r\n                            $match: {\r\n                                $and: [\r\n                                    { 'deleted': false },\r\n                                    {\r\n                                        $or: [\r\n                                            { 'serviceItems.deleted': { $exists: false } },\r\n                                            { 'serviceItems.deleted': !true },\r\n                                        ],\r\n                                    },\r\n                                ]\r\n                            }\r\n                        },\r\n                        {\r\n                            $group: {\r\n                                _id: null,\r\n                                commissionAmount: {\r\n                                    $sum: {\r\n                                        $multiply: ['$serviceItems.commissionAmount', '$serviceItems.numOfTimes']\r\n                                    },\r\n                                },\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: '$_id',\r\n                    payAmount: '$payAmount',\r\n                    serviceCom: {\r\n                        $cond: [\r\n                            {\r\n                                $ifNull: [{ $arrayElemAt: ['$serviceCom.commissionAmount', -1] }, false] //return value 'false' if null\r\n                            },\r\n                            { $arrayElemAt: ['$serviceCom.commissionAmount', -1] },\r\n                            0, // if 'false'\r\n                        ]\r\n                    },\r\n                    staffPays: '$staffPays',\r\n                    staffName: {\r\n                        $concat: [\r\n                            {\r\n                                $arrayElemAt: ['$staff.firstName', -1]\r\n                            },\r\n                            ' ',\r\n                            {\r\n                                $arrayElemAt: ['$staff.surName', -1]\r\n                            },\r\n                        ]\r\n                    },\r\n                    balance: {\r\n                        $cond: [\r\n                            {\r\n                                $ifNull: [{ $arrayElemAt: ['$serviceCom.commissionAmount', -1] }, false] //return value 'false' if null\r\n                            },\r\n                            {\r\n                                $subtract: [\r\n                                    { $arrayElemAt: ['$serviceCom.commissionAmount', -1] },\r\n                                    '$payAmount'\r\n                                ],\r\n                            },\r\n                            'Unknown', // if 'false'\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                $sort: {\r\n                    staffName: 1\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n    getDeleted(sDate, eDate) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const dateRangeFilter = {\r\n                $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n            };\r\n            let deleted = [];\r\n            deleted = [...deleted, ...yield this.saleModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            'saleItems.deleted': true,\r\n                            'saleItems.deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$saleItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'saleItems.deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$saleItems._id',\r\n                            itemName: {\r\n                                $push: '$saleItems.itemName'\r\n                            },\r\n                            quantity: {\r\n                                $push: '$saleItems.quantity'\r\n                            },\r\n                            unitSellingPrice: {\r\n                                $push: '$saleItems.unitSellingPrice'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$saleItems.deletedAt'\r\n                            },\r\n                            deletionDate: {\r\n                                $push: '$saleItems.deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: { $arrayElemAt: ['$deletedAt', -1] },\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    {\r\n                                        $arrayElemAt: ['$itemName', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: { $arrayElemAt: ['$quantity', -1] }\r\n                                    },\r\n                                    \") @ N\",\r\n                                    {\r\n                                        $toString: { $arrayElemAt: ['$unitSellingPrice', -1] }\r\n                                    },\r\n                                    \"/1\",\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            desc: '$desc',\r\n                            deletedBy: '$deletedBy.firstName',\r\n                            deletedAt: '$deletedAt',\r\n                            deletionDate: '$deletionDate',\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.stockItemModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            'deleted': true,\r\n                            'deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$staff', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    '$itemName',\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$quantity',\r\n                                    },\r\n                                    \"qtty)\",\r\n                                    // {\r\n                                    //   $toString: '$unitSellingPrice'\r\n                                    // },\r\n                                    // \"/1\",\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            desc: '$desc',\r\n                            deletedBy: '$deletedBy.firstName',\r\n                            deletedAt: '$deletedAt',\r\n                            deletionDate: '$deletionDate',\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.saleModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$saleItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$_id',\r\n                            itemsCount: {\r\n                                $sum: 1\r\n                            },\r\n                            amount: {\r\n                                $sum: '$saleItems.amount',\r\n                            },\r\n                            invoiceId: {\r\n                                $push: '$invoiceId'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    \"#\",\r\n                                    {\r\n                                        $arrayElemAt: ['$invoiceId', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$itemsCount'\r\n                                    },\r\n                                    \"itms) @ N\",\r\n                                    {\r\n                                        $toString: '$amount'\r\n                                    },\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.serviceItemModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            'deleted': true,\r\n                            'deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$staff.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    '$serviceName',\r\n                                    \" (N\",\r\n                                    {\r\n                                        $toString: '$serviceCost',\r\n                                    },\r\n                                    \") @\",\r\n                                    {\r\n                                        $toString: '$serviceCommission',\r\n                                    },\r\n                                    \"%\",\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.serviceRenderedModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            'serviceItems.deleted': true,\r\n                            'serviceItems.deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$serviceItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'serviceItems.deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$serviceItems._id',\r\n                            serviceName: {\r\n                                $push: '$serviceItems.serviceName'\r\n                            },\r\n                            numOfTimes: {\r\n                                $sum: '$serviceItems.numOfTimes'\r\n                            },\r\n                            serviceCost: {\r\n                                $sum: '$serviceItems.serviceCost'\r\n                            },\r\n                            serviceCommission: {\r\n                                $sum: '$serviceItems.serviceCommission'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$serviceItems.deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff.firstName', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    {\r\n                                        $arrayElemAt: ['$serviceName', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$numOfTimes'\r\n                                    },\r\n                                    \"x) @ N\",\r\n                                    {\r\n                                        $toString: '$serviceCost'\r\n                                    },\r\n                                    \"/1 (\",\r\n                                    {\r\n                                        $toString: '$serviceCommission'\r\n                                    },\r\n                                    \"%)\",\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.serviceRenderedModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$serviceItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$_id',\r\n                            itemsCount: {\r\n                                $sum: 1\r\n                            },\r\n                            amount: {\r\n                                $sum: '$serviceItems.serviceCost',\r\n                            },\r\n                            invoiceId: {\r\n                                $push: '$invoiceId'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    \"#\",\r\n                                    {\r\n                                        $arrayElemAt: ['$invoiceId', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$itemsCount'\r\n                                    },\r\n                                    \"scs) @ N\",\r\n                                    {\r\n                                        $toString: '$amount'\r\n                                    },\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.gameModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            'deleted': true,\r\n                            'deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$staff.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    '$gameName',\r\n                                    \" (N\",\r\n                                    {\r\n                                        $toString: '$gameCost',\r\n                                    },\r\n                                    ')'\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.gamePlayedModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            'gameItems.deleted': true,\r\n                            'gameItems.deletedAt': dateRangeFilter,\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$gameItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'gameItems.deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$gameItems._id',\r\n                            gameName: {\r\n                                $push: '$gameItems.gameName'\r\n                            },\r\n                            numOfTimes: {\r\n                                $sum: '$gameItems.numOfTimes'\r\n                            },\r\n                            gameCost: {\r\n                                $sum: '$gameItems.gameCost'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$gameItems.deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff.firstName', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    {\r\n                                        $arrayElemAt: ['$gameName', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$numOfTimes'\r\n                                    },\r\n                                    \"x) @ N\",\r\n                                    {\r\n                                        $toString: '$gameCost'\r\n                                    },\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                ])];\r\n            deleted = [...deleted, ...yield this.gamePlayedModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $unwind: '$gameItems'\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$_id',\r\n                            itemsCount: {\r\n                                $sum: 1\r\n                            },\r\n                            amount: {\r\n                                $sum: '$gameItems.gameCost',\r\n                            },\r\n                            invoiceId: {\r\n                                $push: '$invoiceId'\r\n                            },\r\n                            deletedAt: {\r\n                                $push: '$deletedAt'\r\n                            },\r\n                            deletedBy: {\r\n                                $push: {\r\n                                    $arrayElemAt: ['$staff', -1]\r\n                                }\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: { $arrayElemAt: ['$deletedAt', -1] },\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: { $arrayElemAt: ['$deletedBy.firstName', -1] },\r\n                            desc: {\r\n                                $concat: [\r\n                                    \"#\",\r\n                                    {\r\n                                        $arrayElemAt: ['$invoiceId', -1]\r\n                                    },\r\n                                    \" (\",\r\n                                    {\r\n                                        $toString: '$itemsCount'\r\n                                    },\r\n                                    \"gms) @ N\",\r\n                                    {\r\n                                        $toString: '$amount'\r\n                                    },\r\n                                ]\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            deletedAt: -1\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.userAccountModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: '$deletedBy.firstName',\r\n                            desc: {\r\n                                $concat: [\r\n                                    '$email',\r\n                                    ' (',\r\n                                    '$firstName',\r\n                                    ') - ',\r\n                                    '$acctType'\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.expenditureModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: '$staff.firstName',\r\n                            desc: {\r\n                                $concat: [\r\n                                    'Exp - ',\r\n                                    '$expenseRemark',\r\n                                    ' (',\r\n                                    'N',\r\n                                    {\r\n                                        $toString: '$expenseAmount'\r\n                                    },\r\n                                    ')',\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.todoModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: '$staff.firstName',\r\n                            desc: {\r\n                                $concat: [\r\n                                    'Todo - ',\r\n                                    '$todoNote',\r\n                                    // ' (',\r\n                                    // 'N',\r\n                                    // {\r\n                                    //   $toString: '$expenseAmount'\r\n                                    // },\r\n                                    // ')',\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                ])];\r\n            deleted = [...deleted, ...yield this.staffPayModel.aggregateDeleted([\r\n                    {\r\n                        $match: {\r\n                            deletedAt: dateRangeFilter\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'staff',\r\n                            foreignField: '_id',\r\n                            as: 'toStaff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $lookup: {\r\n                            from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                            localField: 'deletedBy',\r\n                            foreignField: '_id', as: 'staff'\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            deletionDate: {\r\n                                $dateToString: {\r\n                                    format: '%Y-%m-%d - %H:%M',\r\n                                    date: '$deletedAt',\r\n                                    timezone: 'Africa/Lagos'\r\n                                },\r\n                            },\r\n                            deletedAt: '$deletedAt',\r\n                            deletedBy: '$staff.firstName',\r\n                            desc: {\r\n                                $concat: [\r\n                                    'Payout @ ',\r\n                                    { $arrayElemAt: ['$toStaff.firstName', -1] },\r\n                                    ' (',\r\n                                    'N',\r\n                                    {\r\n                                        $toString: '$payAmount'\r\n                                    },\r\n                                    ')',\r\n                                ]\r\n                            }\r\n                        }\r\n                    }\r\n                ])];\r\n            return (0, lib_xUtils_1.sortByAttribute)(deleted, '-deletedAt');\r\n        });\r\n    }\r\n};\r\nSettingsQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.systemConfigModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.expenditureModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.stockItemModel)),\r\n    tslib_1.__param(3, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.saleModel)),\r\n    tslib_1.__param(4, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.serviceItemModel)),\r\n    tslib_1.__param(5, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.serviceRenderedModel)),\r\n    tslib_1.__param(6, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.gameModel)),\r\n    tslib_1.__param(7, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.gamePlayedModel)),\r\n    tslib_1.__param(8, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.userAccountModel)),\r\n    tslib_1.__param(9, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.todoModel)),\r\n    tslib_1.__param(10, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.staffPayModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _d : Object, typeof (_e = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _e : Object, typeof (_f = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _f : Object, typeof (_g = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _g : Object, typeof (_h = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _h : Object, typeof (_j = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _j : Object, typeof (_k = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _k : Object, typeof (_l = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _l : Object])\r\n], SettingsQueryService);\r\nexports.SettingsQueryService = SettingsQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet SettingsStoreService = class SettingsStoreService {\r\n    constructor(systemConfigModel, expenditureModel, todoModel, staffPayModel, cls) {\r\n        // const fnc = async()=>{\r\n        // }\r\n        // dbConnection.db.listCollections().forEach((col)=>{\r\n        //   col.name\r\n        // })\r\n        // dbConnection.db.listCollections().toArray(function(err, names) {\r\n        //   if (err) {\r\n        //       console.log(err);\r\n        //   }\r\n        //   else {\r\n        //       names.forEach(function(e,i,a) {\r\n        //           // mongoose.connection.db.dropCollection(e.name);\r\n        //           console.log(\"--->>\", e.name);\r\n        //       });\r\n        //   }\r\n        // })\r\n        // console.log(dbConnection.db.collections().then((col)));\r\n        // dbConnection.db.collections().then((col)=>{\r\n        //   console.log(col.);\r\n        this.systemConfigModel = systemConfigModel;\r\n        this.expenditureModel = expenditureModel;\r\n        this.todoModel = todoModel;\r\n        this.staffPayModel = staffPayModel;\r\n        this.cls = cls;\r\n        // })\r\n        // const cols = Array.from(dbConnection.collections)\r\n        // console.log(dbConnection.collections, \" COLLECTIONS\");\r\n        // const cols = Object.entries(dbConnection.collections).forEach((col)=>{\r\n        // Object.entries(dbConnection.collections).forEach((col, i)=>{\r\n        //   console.log('Col '+i, col[0]);\r\n        // });\r\n        // // console.log(cols, \" COLLECTIONS\");\r\n        // console.log(dbConnection.c);\r\n    }\r\n    renameCollections() {\r\n    }\r\n    saveSettings(config) {\r\n        if (config === null || config === void 0 ? void 0 : config._id) {\r\n            return this.systemConfigModel.findByIdAndUpdate(config._id, config, {\r\n                new: true\r\n            });\r\n        }\r\n        else {\r\n            return this.systemConfigModel.create(config);\r\n        }\r\n    }\r\n    saveExpenditure(expense) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        expense.userAccount = userAccount;\r\n        return this.expenditureModel.create(expense);\r\n    }\r\n    deleteExpenditure(expenseId) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        return this.expenditureModel.deleteById(expenseId, userAccount);\r\n    }\r\n    saveTodo(todo) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        todo.userAccount = userAccount;\r\n        todo.todoDone = false;\r\n        return this.todoModel.create(todo);\r\n    }\r\n    markTodoDone(todo) {\r\n        todo.todoDoneBy = this.cls.get('contextUser._id');\r\n        ;\r\n        todo.todoDoneAt = new Date();\r\n        todo.todoDone = true;\r\n        return this.todoModel.findByIdAndUpdate(todo === null || todo === void 0 ? void 0 : todo._id, todo, { new: true });\r\n    }\r\n    deleteTodo(todoId) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        return this.todoModel.deleteById(todoId, userAccount);\r\n    }\r\n    saveStaffPay(pay) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        pay.userAccount = userAccount;\r\n        return this.staffPayModel.create(pay);\r\n    }\r\n    deleteStaffPay(payId) {\r\n        const userAccount = this.cls.get('contextUser._id');\r\n        return this.staffPayModel.deleteById(payId, userAccount);\r\n    }\r\n};\r\nSettingsStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.systemConfigModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.expenditureModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.todoModel)),\r\n    tslib_1.__param(3, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.staffPayModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _d : Object, typeof (_e = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _e : Object])\r\n], SettingsStoreService);\r\nexports.SettingsStoreService = SettingsStoreService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SettingsModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst settings_query_service_1 = require(\"./services/settings-query.service\");\r\nconst settings_store_service_1 = require(\"./services/settings-store.service\");\r\nconst settings_store_controller_1 = require(\"./controllers/settings-store.controller\");\r\nconst settings_query_controller_1 = require(\"./controllers/settings-query.controller\");\r\nconst rmd_db_model_1 = require(\"../../rmd-db.model\");\r\nconst settings_schema_1 = require(\"./settings.schema\");\r\nconst db_providers_1 = require(\"libs/lib-db-config/src/lib/db.providers\");\r\nconst account_schema_1 = require(\"../user-account/account.schema\");\r\nconst stocks_schema_1 = require(\"../stocks/stocks.schema\");\r\nconst services_schema_1 = require(\"../services/services.schema\");\r\nconst game_schema_1 = require(\"../game/game.schema\");\r\nlet SettingsModule = class SettingsModule {\r\n};\r\nSettingsModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [],\r\n        providers: [\r\n            settings_query_service_1.SettingsQueryService,\r\n            settings_store_service_1.SettingsStoreService,\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.systemConfigModel,\r\n                modelSchema: settings_schema_1.systemConfigSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.expenditureModel,\r\n                modelSchema: settings_schema_1.expenditureSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                modelSchema: account_schema_1.accountSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.purchaseModel,\r\n                modelSchema: stocks_schema_1.StockPurchaseSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.stockItemModel,\r\n                modelSchema: stocks_schema_1.stockItemSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.saleModel,\r\n                modelSchema: stocks_schema_1.stockSaleSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.saleItemModel,\r\n                modelSchema: stocks_schema_1.saleItemSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.serviceRenderedModel,\r\n                modelSchema: services_schema_1.serviceRenderedSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.serviceItemModel,\r\n                modelSchema: services_schema_1.serviceItemSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.gameModel,\r\n                modelSchema: game_schema_1.gameSchema\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.gamePlayedModel,\r\n                modelSchema: game_schema_1.gamePlayedSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.todoModel,\r\n                modelSchema: settings_schema_1.todoSchema,\r\n            }),\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.staffPayModel,\r\n                modelSchema: settings_schema_1.staffPaySchema,\r\n            }),\r\n        ],\r\n        controllers: [\r\n            settings_store_controller_1.SettingsStoreController,\r\n            settings_query_controller_1.SettingsQueryController\r\n        ]\r\n    })\r\n], SettingsModule);\r\nexports.SettingsModule = SettingsModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.staffPaySchema = exports.todoSchema = exports.expenditureSchema = exports.systemConfigSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst rmd_db_model_1 = require(\"../../rmd-db.model\");\r\nexports.systemConfigSchema = new mongoose_1.Schema({\r\n    commissionRange: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    serviceCommissions: {\r\n        type: [Number],\r\n        required: true,\r\n    },\r\n    printType: String\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.expenditureSchema = new mongoose_1.Schema({\r\n    expenseAmount: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    expenseRemark: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    expenseDate: {\r\n        type: Date,\r\n        required: true\r\n    },\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel\r\n    }\r\n}, { timestamps: true });\r\nexports.todoSchema = new mongoose_1.Schema({\r\n    todoNote: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    todoDone: {\r\n        type: Boolean,\r\n        required: true,\r\n        default: false\r\n    },\r\n    todoDoneAt: {\r\n        type: Date,\r\n        default: new Date(),\r\n    },\r\n    todoDoneBy: {\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n        type: mongoose_1.Types.ObjectId\r\n    },\r\n    userAccount: {\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n        type: mongoose_1.Types.ObjectId\r\n    }\r\n}, { timestamps: true });\r\nexports.staffPaySchema = new mongoose_1.Schema({\r\n    payAmount: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    staff: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n        required: true\r\n    },\r\n    payRemark: String,\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n    },\r\n}, { timestamps: true });\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst stocks_query_service_1 = require(\"./../services/stocks-query.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet StocksQueryController = class StocksQueryController {\r\n    constructor(stocksQueryService) {\r\n        this.stocksQueryService = stocksQueryService;\r\n    }\r\n    getOverview(sDate, eDate) {\r\n        return this.stocksQueryService.getOverview(sDate !== 'undefined' ? JSON.parse(sDate || '{}') : null, eDate !== 'undefined' ? JSON.parse(eDate || '{}') : null);\r\n    }\r\n    getPurchases(stockItemId) {\r\n        if (stockItemId)\r\n            return this.stocksQueryService.getStockItemPurchase(stockItemId);\r\n        return this.stocksQueryService.getPurchases();\r\n    }\r\n    getSaleItems() {\r\n        return this.stocksQueryService.getSaleItems();\r\n    }\r\n    // @Get(EInventoryStockQuery.allStocks)\r\n    // getAllStocks() {\r\n    //   return this.stocksQueryService.getAllStocks()\r\n    // }\r\n    getActiveStockItems(queryType) {\r\n        return this.stocksQueryService.getActiveStocks(queryType);\r\n    }\r\n    getDashboardSale(sDate, eDate) {\r\n        return this.stocksQueryService.getDashboardSale(sDate !== 'undefined' ? JSON.parse(sDate || '{}') : null, eDate !== 'undefined' ? JSON.parse(eDate || '{}') : null);\r\n    }\r\n    getOldStockItems() {\r\n        return this.stocksQueryService.getOldStockItems();\r\n    }\r\n    getOutOfStock(osType) {\r\n        return this.stocksQueryService.getOutOfStock(osType);\r\n    }\r\n    getPreviousVendors() {\r\n        return this.stocksQueryService.getPreviousVendors();\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getOverview\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Standard', 'Super'], '*'),\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.stockPurchase),\r\n    tslib_1.__param(0, (0, common_1.Query)('stockItemId')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getPurchases\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ERmdDispensaryQuery.saleItems),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getSaleItems\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Standard', 'Super'], '*'),\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.activeStocks),\r\n    tslib_1.__param(0, (0, common_1.Query)('query-type')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getActiveStockItems\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.ECinDispensaryQuery.dispenseHistory),\r\n    tslib_1.__param(0, (0, common_1.Query)('sDate')),\r\n    tslib_1.__param(1, (0, common_1.Query)('eDate')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getDashboardSale\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.oldStocks),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getOldStockItems\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.outOfStocks),\r\n    tslib_1.__param(0, (0, common_1.Query)('os-type')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getOutOfStock\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(lib_xUtils_1.EInventoryStockQuery.purchaseVendors),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksQueryController.prototype, \"getPreviousVendors\", null);\r\nStocksQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EInventoryStockQuery.stockQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof stocks_query_service_1.StocksQueryService !== \"undefined\" && stocks_query_service_1.StocksQueryService) === \"function\" ? _a : Object])\r\n], StocksQueryController);\r\nexports.StocksQueryController = StocksQueryController;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst stocks_store_service_1 = require(\"./../services/stocks-store.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet StocksStoreController = class StocksStoreController {\r\n    constructor(stocksStoreService) {\r\n        this.stocksStoreService = stocksStoreService;\r\n    }\r\n    savePurchase(purchase) {\r\n        return this.stocksStoreService.savePurchase(purchase);\r\n    }\r\n    deleteStock(stockId) {\r\n        return this.stocksStoreService.deleteStockItem(stockId);\r\n    }\r\n    sellStock(stock) {\r\n        return this.stocksStoreService.sellStock(stock);\r\n    }\r\n    deleteSoldStock(stockId, batchId, type) {\r\n        return this.stocksStoreService.deleteSoldStock(batchId, stockId, type);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.EInventoryStockStore.stockPurchase),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof lib_xUtils_1.IRmdStockPurchase !== \"undefined\" && lib_xUtils_1.IRmdStockPurchase) === \"function\" ? _b : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksStoreController.prototype, \"savePurchase\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.EInventoryStockStore.stockPurchase + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksStoreController.prototype, \"deleteStock\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super', 'Standard'], \"*\"),\r\n    (0, common_1.Post)(lib_xUtils_1.ECinDispensaryStore.dispenseOrder),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = typeof lib_xUtils_1.IRmdSale !== \"undefined\" && lib_xUtils_1.IRmdSale) === \"function\" ? _c : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksStoreController.prototype, \"sellStock\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], \"*\"),\r\n    (0, common_1.Delete)(lib_xUtils_1.ECinDispensaryStore.returnSaleItems + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__param(1, (0, common_1.Query)('batchId')),\r\n    tslib_1.__param(2, (0, common_1.Query)('type')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], StocksStoreController.prototype, \"deleteSoldStock\", null);\r\nStocksStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EInventoryStockStore.stockStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof stocks_store_service_1.StocksStoreService !== \"undefined\" && stocks_store_service_1.StocksStoreService) === \"function\" ? _a : Object])\r\n], StocksStoreController);\r\nexports.StocksStoreController = StocksStoreController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e, _f, _g, _h;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst date_fns_1 = require(\"date-fns\");\r\nlet StocksQueryService = class StocksQueryService {\r\n    constructor(stockItemModel, saleModel, systemConfigModel, purchaseModel, serviceRenderedModel, gamePlayedModel, expenditureModel, staffPayModel) {\r\n        this.stockItemModel = stockItemModel;\r\n        this.saleModel = saleModel;\r\n        this.systemConfigModel = systemConfigModel;\r\n        this.purchaseModel = purchaseModel;\r\n        this.serviceRenderedModel = serviceRenderedModel;\r\n        this.gamePlayedModel = gamePlayedModel;\r\n        this.expenditureModel = expenditureModel;\r\n        this.staffPayModel = staffPayModel;\r\n    }\r\n    getOverview(sDate, eDate) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            let dateRangeFilter = {};\r\n            if (!sDate || !eDate) {\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Daily') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                    };\r\n                }\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Weekly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                    };\r\n                }\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Monthly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n                };\r\n            }\r\n            const totalSaleAmount = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $or: [\r\n                            { 'saleItems.deleted': { $exists: false } },\r\n                            { 'saleItems.deleted': !true },\r\n                        ],\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: '$saleItems.amount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const totalRenderedAmount = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems',\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'serviceItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const totalGameAmount = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            // {'gameItems.deleted': false},\r\n                            {\r\n                                $or: [\r\n                                    { 'gameItems.deleted': { $exists: false } },\r\n                                    { 'gameItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const totalExpenseAmount = yield this.expenditureModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $match: {\r\n                        'deleted': false,\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: '$expenseAmount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const saleByPayMethod = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'saleItems.deleted': { $exists: false } },\r\n                                    { 'saleItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'saleItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$saleItems.payMethod',\r\n                        amount: {\r\n                            $sum: '$saleItems.amount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const serviceByPayMethod = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'serviceItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems.payMethod',\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            },\r\n                        },\r\n                    }\r\n                },\r\n            ]);\r\n            const gamesByPayMethod = yield this.gamePlayedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$gameItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            { 'gameItems.deleted': false },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$gameItems.payMethod',\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$gameItems.gameCost', '$gameItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const popularServices = yield this.serviceRenderedModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$serviceItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'serviceItems.deleted': { $exists: false } },\r\n                                    { 'serviceItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'serviceItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$serviceItems.serviceName',\r\n                        count: {\r\n                            $sum: '$serviceItems.numOfTimes'\r\n                        },\r\n                        amount: {\r\n                            $sum: {\r\n                                $multiply: ['$serviceItems.serviceCost', '$serviceItems.numOfTimes']\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        count: -1\r\n                    }\r\n                },\r\n                {\r\n                    $limit: 5\r\n                }\r\n            ]);\r\n            const totalPayoutAmount = yield this.staffPayModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $match: {\r\n                        'deleted': false,\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: '$payAmount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            return {\r\n                totalSaleAmount: (totalSaleAmount === null || totalSaleAmount === void 0 ? void 0 : totalSaleAmount.length) ? totalSaleAmount[0] : {},\r\n                totalRenderedAmount: (totalRenderedAmount === null || totalRenderedAmount === void 0 ? void 0 : totalRenderedAmount.length) ? totalRenderedAmount[0] : {},\r\n                totalGameAmount: (totalGameAmount === null || totalGameAmount === void 0 ? void 0 : totalGameAmount.length) ? totalGameAmount[0] : {},\r\n                totalExpenseAmount: (totalExpenseAmount === null || totalExpenseAmount === void 0 ? void 0 : totalExpenseAmount.length) ? totalExpenseAmount[0] : {},\r\n                totalPayoutAmount: (totalPayoutAmount === null || totalPayoutAmount === void 0 ? void 0 : totalPayoutAmount.length) ? totalPayoutAmount[0] : {},\r\n                saleByPayMethod,\r\n                serviceByPayMethod,\r\n                gamesByPayMethod,\r\n                // popularStaff,\r\n                popularServices\r\n            };\r\n        });\r\n    }\r\n    getPurchases() {\r\n        return this.purchaseModel.find({}).sort({ createdAt: -1 })\r\n            .populate([\r\n            {\r\n                path: 'itemsPurchased',\r\n                model: rmd_db_model_1.ERmdDbModels.stockItemModel,\r\n            },\r\n            {\r\n                path: 'userAccount',\r\n                model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                select: 'acctType email userName firstName surName appModule shopBranch',\r\n                options: { withDeleted: true },\r\n            },\r\n        ]);\r\n        ;\r\n    }\r\n    getSaleItems() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.stockItemModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        quantity: {\r\n                            $gte: 1\r\n                        },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$itemName',\r\n                        id: {\r\n                            $push: '$_id'\r\n                        },\r\n                        quantity: {\r\n                            $sum: '$quantity'\r\n                        },\r\n                        itemName: {\r\n                            $push: '$itemName'\r\n                        },\r\n                        unitCostPrice: {\r\n                            $push: '$unitCostPrice'\r\n                        },\r\n                        unitSellingPrice: {\r\n                            $push: '$unitSellingPrice'\r\n                        },\r\n                        createdAt: {\r\n                            $push: '$createdAt'\r\n                        },\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: {\r\n                            $arrayElemAt: ['$id', 0]\r\n                        },\r\n                        itemName: {\r\n                            $arrayElemAt: ['$itemName', 0]\r\n                        },\r\n                        quantity: '$quantity',\r\n                        unitCostPrice: {\r\n                            $arrayElemAt: ['$unitCostPrice', 0]\r\n                        },\r\n                        unitSellingPrice: {\r\n                            $arrayElemAt: ['$unitSellingPrice', 0]\r\n                        },\r\n                        createdAt: {\r\n                            $arrayElemAt: ['$createdAt', 0]\r\n                        },\r\n                        expiryDate: {\r\n                            $arrayElemAt: ['$expiryDate', 0]\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n        });\r\n    }\r\n    // getAllStocks() {\r\n    //   return this.stockItemModel.find({}).sort({itemName: 1})\r\n    // }\r\n    getActiveStocks(type = 'single') {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (type == 'multiple')\r\n                return this.stockItemModel.find({\r\n                    quantity: {\r\n                        $gte: 1\r\n                    }\r\n                }).sort({\r\n                    itemName: 1,\r\n                    createdAt: -1\r\n                });\r\n            else\r\n                return this.stockItemModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            quantity: {\r\n                                $gte: 1\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            createdAt: -1\r\n                        }\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$itemName',\r\n                            id: {\r\n                                $push: '$_id'\r\n                            },\r\n                            quantity: {\r\n                                $sum: '$quantity'\r\n                            },\r\n                            itemName: {\r\n                                $push: '$itemName'\r\n                            },\r\n                            unitCostPrice: {\r\n                                $push: '$unitCostPrice'\r\n                            },\r\n                            unitSellingPrice: {\r\n                                $push: '$unitSellingPrice'\r\n                            },\r\n                            createdAt: {\r\n                                $push: '$createdAt'\r\n                            },\r\n                            expiryDate: {\r\n                                $push: '$expiryDate'\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: {\r\n                                $arrayElemAt: ['$id', 0]\r\n                            },\r\n                            itemName: {\r\n                                $arrayElemAt: ['$itemName', 0]\r\n                            },\r\n                            quantity: '$quantity',\r\n                            unitCostPrice: {\r\n                                $arrayElemAt: ['$unitCostPrice', 0]\r\n                            },\r\n                            unitSellingPrice: {\r\n                                $arrayElemAt: ['$unitSellingPrice', 0]\r\n                            },\r\n                            createdAt: {\r\n                                $arrayElemAt: ['$createdAt', 0]\r\n                            },\r\n                            expiryDate: {\r\n                                $arrayElemAt: ['$expiryDate', 0]\r\n                            },\r\n                        }\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            itemName: 1\r\n                        }\r\n                    }\r\n                ]);\r\n        });\r\n    }\r\n    getStockItemPurchase(stockItemId) {\r\n        return this.purchaseModel.findOne({\r\n            itemsPurchased: stockItemId\r\n        })\r\n            .populate([\r\n            {\r\n                path: 'itemsPurchased',\r\n                model: rmd_db_model_1.ERmdDbModels.stockItemModel,\r\n            },\r\n            {\r\n                path: 'userAccount',\r\n                model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                select: 'acctType email userName firstName surName appModule shopBranch',\r\n                options: { withDeleted: true },\r\n            },\r\n        ]);\r\n    }\r\n    getOldStockItems() {\r\n        return this.stockItemModel.aggregate([\r\n            {\r\n                $sort: {\r\n                    createdAt: -1,\r\n                },\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: '$itemName',\r\n                    unitCostPrice: { $addToSet: '$unitCostPrice' },\r\n                    unitSellingPrice: { $addToSet: '$unitSellingPrice' },\r\n                },\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: '$_id',\r\n                    unitCostPrice: { $arrayElemAt: ['$unitCostPrice', 0] },\r\n                    unitSellingPrice: { $arrayElemAt: ['$unitSellingPrice', 0] },\r\n                },\r\n            },\r\n        ]);\r\n    }\r\n    getOutOfStock(osType) {\r\n        var _a, _b;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const outOfStocks = [];\r\n            const sales = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: {\r\n                            $gte: (0, date_fns_1.subWeeks)(new Date(), 6),\r\n                        },\r\n                    },\r\n                },\r\n                {\r\n                    $unwind: '$saleItems',\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$saleItems.itemName',\r\n                        quantity: { $push: '$saleItems.quantity' }\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        quantity: {\r\n                            $add: [{ $toInt: { $avg: '$quantity' } }, 1]\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            for (let i = 0; i < sales.length; i++) {\r\n                const stockItem = yield this.stockItemModel.aggregate([\r\n                    {\r\n                        $match: {\r\n                            itemName: (_a = sales[i]) === null || _a === void 0 ? void 0 : _a._id,\r\n                        },\r\n                    },\r\n                    {\r\n                        $sort: {\r\n                            createdAt: -1,\r\n                        },\r\n                    },\r\n                    {\r\n                        $group: {\r\n                            _id: '$itemName',\r\n                            quantity: { $sum: '$quantity' },\r\n                            createdAt: { $push: '$createdAt' },\r\n                            expiryDate: { $push: '$expiryDate' },\r\n                            unitCostPrice: { $push: '$unitCostPrice' },\r\n                        },\r\n                    },\r\n                    {\r\n                        $match: {\r\n                            quantity: osType == 'os'\r\n                                ? { $lte: 0 }\r\n                                : { $lte: (_b = sales[i]) === null || _b === void 0 ? void 0 : _b.quantity, $gt: 0 },\r\n                        },\r\n                    },\r\n                    {\r\n                        $project: {\r\n                            _id: '$_id',\r\n                            quantity: '$quantity',\r\n                            expiryDate: { $arrayElemAt: ['$expiryDate', 0] },\r\n                            createdAt: { $arrayElemAt: ['$createdAt', 0] },\r\n                            unitCostPrice: { $avg: '$unitCostPrice' },\r\n                        },\r\n                    },\r\n                ]);\r\n                if (stockItem && stockItem.length) {\r\n                    stockItem[0].avgCons = sales[0].quantity,\r\n                        stockItem[0].avgCost =\r\n                            stockItem[0].unitCostPrice * stockItem[0].avgCons;\r\n                    outOfStocks.push(stockItem[0]);\r\n                }\r\n            }\r\n            // console.log(osType, outOfStocks);\r\n            return outOfStocks;\r\n        });\r\n    }\r\n    getPreviousVendors() {\r\n        return this.purchaseModel.aggregate([\r\n            {\r\n                $group: {\r\n                    _id: '$vendor'\r\n                }\r\n            }\r\n        ]);\r\n    }\r\n    getDashboardSale(sDate, eDate) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const config = yield this.systemConfigModel.findOne({});\r\n            let dateRangeFilter = {};\r\n            if (!sDate || !eDate) {\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Daily') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date())\r\n                    };\r\n                }\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Weekly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfWeek)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfWeek)(new Date())\r\n                    };\r\n                }\r\n                if ((config === null || config === void 0 ? void 0 : config.commissionRange) == 'Monthly') {\r\n                    dateRangeFilter = {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfMonth)(new Date()),\r\n                        $lte: (0, lib_xUtils_1.getZonedEndOfMonth)(new Date())\r\n                    };\r\n                }\r\n            }\r\n            else {\r\n                dateRangeFilter = {\r\n                    $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date(sDate)),\r\n                    $lte: (0, lib_xUtils_1.getZonedEndOfDay)(new Date(eDate))\r\n                };\r\n            }\r\n            const saleByPayMethod = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'saleItems.deleted': { $exists: false } },\r\n                                    { 'saleItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'saleItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$saleItems.payMethod',\r\n                        amount: {\r\n                            $sum: '$saleItems.amount',\r\n                        },\r\n                    }\r\n                }\r\n            ]);\r\n            const saleTotal = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'saleItems.deleted': { $exists: false } },\r\n                                    { 'saleItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'saleItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: null,\r\n                        amount: {\r\n                            $sum: '$saleItems.amount',\r\n                        },\r\n                        profit: {\r\n                            $sum: {\r\n                                $subtract: [\r\n                                    '$saleItems.amount',\r\n                                    {\r\n                                        $multiply: [\r\n                                            '$saleItems.unitCostPrice',\r\n                                            '$saleItems.quantity',\r\n                                        ],\r\n                                    },\r\n                                ],\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            ]);\r\n            const sales = yield this.saleModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        createdAt: dateRangeFilter\r\n                    }\r\n                },\r\n                {\r\n                    $unwind: '$saleItems'\r\n                },\r\n                {\r\n                    $match: {\r\n                        $and: [\r\n                            { 'deleted': false },\r\n                            {\r\n                                $or: [\r\n                                    { 'saleItems.deleted': { $exists: false } },\r\n                                    { 'saleItems.deleted': !true },\r\n                                ],\r\n                            },\r\n                            // {'saleItems.deleted': false},\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    $lookup: {\r\n                        from: rmd_db_model_1.ERmdDbModels.userAccountModel.toLocaleLowerCase() + 's',\r\n                        localField: 'userAccount',\r\n                        foreignField: '_id', as: 'userAccount'\r\n                    }\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$saleItems._id',\r\n                        invoiceId: { $push: '$invoiceId' },\r\n                        batchId: { $push: '$_id' },\r\n                        itemName: { $push: '$saleItems.itemName' },\r\n                        itemId: { $push: '$saleItems.itemId' },\r\n                        quantity: { $push: '$saleItems.quantity' },\r\n                        payMethod: { $push: '$saleItems.payMethod' },\r\n                        unitCostPrice: { $push: '$saleItems.unitCostPrice' },\r\n                        unitSellingPrice: { $push: '$saleItems.unitSellingPrice' },\r\n                        amount: { $push: '$saleItems.amount' },\r\n                        userAccount: {\r\n                            $push: '$userAccount.firstName'\r\n                        },\r\n                        createdAt: { $push: '$createdAt' },\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        invoiceId: { $arrayElemAt: ['$invoiceId', -1] },\r\n                        batchId: { $arrayElemAt: ['$batchId', -1] },\r\n                        itemName: { $arrayElemAt: ['$itemName', -1] },\r\n                        itemId: { $arrayElemAt: ['$itemId', -1] },\r\n                        quantity: { $arrayElemAt: ['$quantity', -1] },\r\n                        unitCostPrice: { $arrayElemAt: ['$unitCostPrice', -1] },\r\n                        unitSellingPrice: { $arrayElemAt: ['$unitSellingPrice', -1] },\r\n                        amount: { $arrayElemAt: ['$amount', -1] },\r\n                        payMethod: { $arrayElemAt: ['$payMethod', -1] },\r\n                        userAccount: { $arrayElemAt: [{ $arrayElemAt: ['$userAccount', -1] }, -1] },\r\n                        createdAt: { $arrayElemAt: ['$createdAt', -1] },\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1\r\n                    }\r\n                }\r\n            ]);\r\n            return {\r\n                main: (saleTotal === null || saleTotal === void 0 ? void 0 : saleTotal.length) ? saleTotal[0] : {},\r\n                byPayMethod: saleByPayMethod,\r\n                sales\r\n            };\r\n        });\r\n    }\r\n};\r\nStocksQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.stockItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.saleModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.systemConfigModel)),\r\n    tslib_1.__param(3, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.purchaseModel)),\r\n    tslib_1.__param(4, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.serviceRenderedModel)),\r\n    tslib_1.__param(5, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.gamePlayedModel)),\r\n    tslib_1.__param(6, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.expenditureModel)),\r\n    tslib_1.__param(7, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.staffPayModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _d : Object, typeof (_e = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _e : Object, typeof (_f = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _f : Object, typeof (_g = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _g : Object, typeof (_h = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _h : Object])\r\n], StocksQueryService);\r\nexports.StocksQueryService = StocksQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nconst date_fns_1 = require(\"date-fns\");\r\nlet StocksStoreService = class StocksStoreService {\r\n    constructor(stockItemModel, purchaseModel, saleModel, cls) {\r\n        this.stockItemModel = stockItemModel;\r\n        this.purchaseModel = purchaseModel;\r\n        this.saleModel = saleModel;\r\n        this.cls = cls;\r\n    }\r\n    savePurchase(purchase) {\r\n        var _a, _b;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (purchase === null || purchase === void 0 ? void 0 : purchase.id) {\r\n                const items = [];\r\n                const stockItemsToEdit = purchase.itemsPurchased.filter((item) => item === null || item === void 0 ? void 0 : item.id);\r\n                const stockItemsToCreate = purchase.itemsPurchased.filter((item) => !(item === null || item === void 0 ? void 0 : item.id));\r\n                if (stockItemsToCreate === null || stockItemsToCreate === void 0 ? void 0 : stockItemsToCreate.length) {\r\n                    const itemsToCreate = yield this.stockItemModel.create(stockItemsToCreate);\r\n                    console.log(itemsToCreate);\r\n                    return;\r\n                    itemsToCreate === null || itemsToCreate === void 0 ? void 0 : itemsToCreate.forEach((item) => {\r\n                        delete item['id'];\r\n                        items.push(item._id);\r\n                    });\r\n                }\r\n                if (stockItemsToEdit === null || stockItemsToEdit === void 0 ? void 0 : stockItemsToEdit.length) {\r\n                    for (let i = 0; i < stockItemsToEdit.length; i++) {\r\n                        const itemToEdit = yield this.stockItemModel.findByIdAndUpdate((_a = stockItemsToEdit[i]) === null || _a === void 0 ? void 0 : _a.id, stockItemsToEdit[i], {\r\n                            new: true\r\n                        });\r\n                        itemToEdit ? items.push(itemToEdit === null || itemToEdit === void 0 ? void 0 : itemToEdit._id) : null;\r\n                    }\r\n                }\r\n                purchase.userAccount = this.cls.get('contextUser._id');\r\n                purchase.itemsPurchased = items;\r\n                return this.purchaseModel\r\n                    .findByIdAndUpdate(purchase.id, purchase, {\r\n                    new: true,\r\n                })\r\n                    .populate([\r\n                    {\r\n                        path: 'itemsPurchased',\r\n                        model: rmd_db_model_1.ERmdDbModels.stockItemModel,\r\n                    },\r\n                    {\r\n                        path: 'userAccount',\r\n                        model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                        select: 'acctType email userName firstName surName appModule shopBranch',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                ]);\r\n            }\r\n            else {\r\n                const purchaseExist = yield this.purchaseModel.find({\r\n                    vendor: purchase.vendor,\r\n                    itemsPurchased: { $size: purchase.itemsPurchased.length },\r\n                    createdAt: {\r\n                        $gte: (0, lib_xUtils_1.getZonedStartOfDay)(new Date())\r\n                    }\r\n                });\r\n                if (purchaseExist) {\r\n                    for (let i = 0; i < purchaseExist.length; i++) {\r\n                        const minuteDiff = (0, date_fns_1.differenceInMinutes)(new Date(), new Date(purchaseExist[i].createdAt));\r\n                        console.log(minuteDiff, purchaseExist[i].createdAt);\r\n                        if (minuteDiff < 10) {\r\n                            throw new common_1.BadRequestException(\"This is likely a duplicate, please try again in next \"\r\n                                + (10 - minuteDiff) + ' minutes.');\r\n                        }\r\n                    }\r\n                    // console.log(purchaseExist, timeNow);\r\n                }\r\n                (_b = purchase.itemsPurchased) === null || _b === void 0 ? void 0 : _b.forEach((item) => {\r\n                    delete item['id'];\r\n                });\r\n                const itemItems = yield this.stockItemModel.create(purchase.itemsPurchased);\r\n                // console.log(purchase.itemsPurchased);\r\n                // return purchase.itemsPurchased;\r\n                // console.log(itemItems);\r\n                // return purchase.itemsPurchased;\r\n                purchase.itemsPurchased = itemItems.map((item) => item === null || item === void 0 ? void 0 : item._id);\r\n                purchase.userAccount = this.cls.get('contextUser._id');\r\n                return (yield this.purchaseModel.create(purchase)).populate([\r\n                    {\r\n                        path: 'itemsPurchased',\r\n                        model: rmd_db_model_1.ERmdDbModels.stockItemModel,\r\n                    },\r\n                    {\r\n                        path: 'userAccount',\r\n                        model: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                        select: 'acctType email userName firstName surName appModule shopBranch',\r\n                        options: { withDeleted: true },\r\n                    },\r\n                ]);\r\n            }\r\n            ;\r\n        });\r\n    }\r\n    saveStockItem(stock) {\r\n        if (stock === null || stock === void 0 ? void 0 : stock._id) {\r\n            return this.stockItemModel.findByIdAndUpdate(stock._id, stock, { new: true });\r\n        }\r\n        else {\r\n            return this.stockItemModel.create(stock);\r\n        }\r\n    }\r\n    deleteStockItem(itemId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const stock = yield this.stockItemModel.deleteById(itemId, this.cls.get('contextUser._id'));\r\n            if (stock === null || stock === void 0 ? void 0 : stock.modifiedCount)\r\n                return this.stockItemModel.find({});\r\n        });\r\n    }\r\n    sellStock(stockSale) {\r\n        var _a, _b, _c;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const saleItemsNames = stockSale.saleItems.map((item) => item.itemName);\r\n            // console.log(stockSale);\r\n            // return\r\n            const items = yield this.stockItemModel.aggregate([\r\n                {\r\n                    $match: {\r\n                        quantity: { $gte: 1 },\r\n                        itemName: { $in: saleItemsNames },\r\n                    },\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1,\r\n                    },\r\n                },\r\n                {\r\n                    $group: {\r\n                        _id: '$_id',\r\n                        itemName: { $addToSet: '$itemName' },\r\n                        quantity: { $sum: '$quantity' },\r\n                        createdAt: { $addToSet: '$createdAt' },\r\n                    },\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: '$_id',\r\n                        itemName: {\r\n                            $arrayElemAt: ['$itemName', 0],\r\n                        },\r\n                        createdAt: {\r\n                            $arrayElemAt: ['$createdAt', 0],\r\n                        },\r\n                        quantity: '$quantity'\r\n                    }\r\n                },\r\n                {\r\n                    $sort: {\r\n                        createdAt: 1,\r\n                        itemName: 1,\r\n                    }\r\n                }\r\n            ]);\r\n            let stockItems = [];\r\n            stockSale.saleItems.forEach((item) => {\r\n                let qttyInputted = parseInt(item.quantity);\r\n                const totQttyAvail = items.filter((itm) => itm.itemName == item.itemName).reduce((tot, cur) => tot + cur.quantity, 0);\r\n                if (qttyInputted > totQttyAvail) {\r\n                    throw new common_1.ConflictException(item.itemName + 'remains ' + totQttyAvail);\r\n                }\r\n                const itemVariants = items.filter((itm) => itm.itemName == item.itemName)\r\n                    .sort((a, b) => new Date(a.createdAt).getTime() < new Date(b.createdAt).getTime() ? -1 : 1);\r\n                let qttyToDeduct = qttyInputted;\r\n                itemVariants.forEach((itm) => {\r\n                    if (itm.quantity >= qttyInputted) {\r\n                        qttyToDeduct = qttyInputted;\r\n                        qttyInputted -= qttyToDeduct;\r\n                    }\r\n                    else {\r\n                        qttyToDeduct = itm.quantity;\r\n                        qttyInputted -= qttyToDeduct;\r\n                    }\r\n                    if (qttyToDeduct > 0) {\r\n                        stockItems.push({\r\n                            itemId: itm._id,\r\n                            itemName: itm.itemName,\r\n                            quantity: qttyToDeduct,\r\n                            unitCostPrice: item.unitCostPrice,\r\n                            unitSellingPrice: item.unitSellingPrice,\r\n                            amount: qttyToDeduct * item.unitSellingPrice,\r\n                            payMethod: item.payMethod\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n            stockSale.invoiceId = (0, lib_xUtils_1.randomChars)('numbers', 4);\r\n            stockSale.userAccount = (_a = this.cls.get('contextUser')) === null || _a === void 0 ? void 0 : _a._id;\r\n            stockSale.saleItems = stockItems;\r\n            const sale = yield this.saleModel.create(stockSale);\r\n            if (sale._id) {\r\n                for (let i = 0; i < ((_b = sale.saleItems) === null || _b === void 0 ? void 0 : _b.length); i++) {\r\n                    yield this.stockItemModel.findByIdAndUpdate(sale.saleItems[i].itemId, {\r\n                        $inc: {\r\n                            quantity: -((_c = sale.saleItems[i]) === null || _c === void 0 ? void 0 : _c.quantity)\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            return sale;\r\n        });\r\n    }\r\n    deleteSoldStock(batchId, stockId, type) {\r\n        var _a;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (type == 'single') {\r\n                const deletion = yield this.saleModel.findOneAndUpdate({\r\n                    'saleItems._id': { $in: [stockId] }\r\n                }, {\r\n                    $set: {\r\n                        'saleItems.$.deleted': true,\r\n                        'saleItems.$.deletedBy': this.cls.get('contextUser._id'),\r\n                        'saleItems.$.deletedAt': new Date(),\r\n                    }\r\n                }, {\r\n                    new: true,\r\n                    strict: false,\r\n                    strictQuery: false\r\n                });\r\n                if (!deletion)\r\n                    throw new Error(\"Error, item can not be deleted.\");\r\n                const deleteItem = (_a = deletion === null || deletion === void 0 ? void 0 : deletion.saleItems) === null || _a === void 0 ? void 0 : _a.find((item) => item._id.toString() == stockId && new mongoose_1.Types.ObjectId(item.deleted));\r\n                // console.log(deleteItem);\r\n                let returnQtty;\r\n                if (deleteItem) {\r\n                    returnQtty = yield this.stockItemModel.findByIdAndUpdate(deleteItem.itemId, {\r\n                        $inc: {\r\n                            quantity: deleteItem.quantity\r\n                        }\r\n                    }, { new: true });\r\n                }\r\n                return returnQtty ? deleteItem : null;\r\n                // return this.saleModel.findByIdAndUpdate(batchId,\r\n                //   {\r\n                //     $pull: {saleItems: {_id: stockId}}\r\n                //   },\r\n                //   {\r\n                //     new: true\r\n                //   }\r\n                // )\r\n            }\r\n            else {\r\n                return this.saleModel.deleteById(batchId, this.cls.get('contextUser._id'));\r\n                //.findByIdAndDelete({_id: batchId}, {new: true});\r\n            }\r\n        });\r\n    }\r\n};\r\nStocksStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.stockItemModel)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.purchaseModel)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.saleModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _b : Object, typeof (_c = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _c : Object, typeof (_d = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _d : Object])\r\n], StocksStoreService);\r\nexports.StocksStoreService = StocksStoreService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StocksModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst stocks_store_controller_1 = require(\"./controllers/stocks-store.controller\");\r\nconst stocks_query_controller_1 = require(\"./controllers/stocks-query.controller\");\r\nconst stocks_store_service_1 = require(\"./services/stocks-store.service\");\r\nconst stocks_query_service_1 = require(\"./services/stocks-query.service\");\r\nconst lib_dbConfig_1 = require(\"@healmah-nest/lib-dbConfig\");\r\nconst rmd_db_model_1 = require(\"../../rmd-db.model\");\r\nconst stocks_schema_1 = require(\"./stocks.schema\");\r\nconst settings_schema_1 = require(\"../settings/settings.schema\");\r\nconst services_schema_1 = require(\"../services/services.schema\");\r\nconst game_schema_1 = require(\"../game/game.schema\");\r\nlet StocksModule = class StocksModule {\r\n};\r\nStocksModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        controllers: [stocks_store_controller_1.StocksStoreController, stocks_query_controller_1.StocksQueryController],\r\n        providers: [stocks_store_service_1.StocksStoreService, stocks_query_service_1.StocksQueryService,\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.purchaseModel,\r\n                modelSchema: stocks_schema_1.StockPurchaseSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.stockItemModel,\r\n                modelSchema: stocks_schema_1.stockItemSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.saleModel,\r\n                modelSchema: stocks_schema_1.stockSaleSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.saleItemModel,\r\n                modelSchema: stocks_schema_1.saleItemSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.systemConfigModel,\r\n                modelSchema: settings_schema_1.systemConfigSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.serviceRenderedModel,\r\n                modelSchema: services_schema_1.serviceRenderedSchema,\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.gamePlayedModel,\r\n                modelSchema: game_schema_1.gamePlayedSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.expenditureModel,\r\n                modelSchema: settings_schema_1.expenditureSchema\r\n            }),\r\n            (0, lib_dbConfig_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.staffPayModel,\r\n                modelSchema: settings_schema_1.staffPaySchema\r\n            }),\r\n        ],\r\n    })\r\n], StocksModule);\r\nexports.StocksModule = StocksModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.stockSaleSchema = exports.StockPurchaseSchema = exports.saleItemSchema = exports.stockItemSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nconst rmd_db_model_1 = require(\"../../rmd-db.model\");\r\nexports.stockItemSchema = new mongoose_1.Schema({\r\n    itemName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    quantity: {\r\n        type: Number,\r\n        required: true,\r\n        min: 0,\r\n    },\r\n    unitCostPrice: {\r\n        type: Number,\r\n        required: true\r\n    },\r\n    unitSellingPrice: {\r\n        type: Number,\r\n        required: true\r\n    }\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.saleItemSchema = new mongoose_1.Schema({\r\n    itemId: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    itemName: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    quantity: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    unitCostPrice: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    unitSellingPrice: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    amount: {\r\n        type: Number,\r\n        required: true,\r\n    },\r\n    payMethod: String,\r\n}, {\r\n    timestamps: true\r\n});\r\nexports.StockPurchaseSchema = new mongoose_1.Schema({\r\n    vendor: {\r\n        type: String,\r\n        required: true,\r\n    },\r\n    itemsPurchased: [\r\n        {\r\n            type: mongoose_1.Types.ObjectId,\r\n            ref: rmd_db_model_1.ERmdDbModels.stockItemModel\r\n        }\r\n    ],\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n    },\r\n}, { timestamps: true });\r\nexports.stockSaleSchema = new mongoose_1.Schema({\r\n    invoiceId: String,\r\n    saleItems: [exports.saleItemSchema],\r\n    userAccount: {\r\n        type: mongoose_1.Types.ObjectId,\r\n        ref: rmd_db_model_1.ERmdDbModels.userAccountModel\r\n    }\r\n}, {\r\n    timestamps: true\r\n});\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.accountSchema = void 0;\r\nconst mongoose_1 = require(\"mongoose\");\r\nexports.accountSchema = new mongoose_1.Schema({\r\n    acctType: {\r\n        type: String,\r\n        enum: ['Super', 'Standard', 'Basic']\r\n    },\r\n    firstName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    surName: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    email: {\r\n        type: String,\r\n        unique: true\r\n    },\r\n    passWord: {\r\n        type: String,\r\n    },\r\n    salt: String,\r\n}, {\r\n    timestamps: true\r\n});\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountQueryController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst user_account_query_service_1 = require(\"../services/user-account-query.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet UserAccountQueryController = class UserAccountQueryController {\r\n    constructor(accountQueryService) {\r\n        this.accountQueryService = accountQueryService;\r\n    }\r\n    login(body) {\r\n        return this.accountQueryService.loginStaffAccount(body);\r\n    }\r\n    getUserAccounts() {\r\n        return this.accountQueryService.getAccounts();\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(lib_xUtils_1.EAccountQuery.staffProfileLogin),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountQueryController.prototype, \"login\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)('*', '*'),\r\n    (0, common_1.Get)(lib_xUtils_1.EAccountQuery.staffProfiles),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", []),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountQueryController.prototype, \"getUserAccounts\", null);\r\nUserAccountQueryController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EAccountQuery.accountQuery),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof user_account_query_service_1.UserAccountQueryService !== \"undefined\" && user_account_query_service_1.UserAccountQueryService) === \"function\" ? _a : Object])\r\n], UserAccountQueryController);\r\nexports.UserAccountQueryController = UserAccountQueryController;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountStoreController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst user_account_store_service_1 = require(\"../services/user-account-store.service\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet UserAccountStoreController = class UserAccountStoreController {\r\n    constructor(accountStoreService) {\r\n        this.accountStoreService = accountStoreService;\r\n    }\r\n    saveAccount(body) {\r\n        return this.accountStoreService.saveAccount(body);\r\n    }\r\n    deleteAccount(accountId) {\r\n        return this.accountStoreService.deleteAccount(accountId);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Post)(lib_xUtils_1.EAccountStore.profile),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountStoreController.prototype, \"saveAccount\", null);\r\ntslib_1.__decorate([\r\n    (0, lib_nest_modules_1.Roles)(['Super'], '*'),\r\n    (0, common_1.Delete)(lib_xUtils_1.EAccountStore.profile + '/:id'),\r\n    tslib_1.__param(0, (0, common_1.Param)('id')),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], UserAccountStoreController.prototype, \"deleteAccount\", null);\r\nUserAccountStoreController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(lib_xUtils_1.EAccountStore.accountStore),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof user_account_store_service_1.UserAccountStoreService !== \"undefined\" && user_account_store_service_1.UserAccountStoreService) === \"function\" ? _a : Object])\r\n], UserAccountStoreController);\r\nexports.UserAccountStoreController = UserAccountStoreController;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountQueryService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet UserAccountQueryService = class UserAccountQueryService {\r\n    constructor(userAccountModel, accountService, jwtService, cls) {\r\n        this.userAccountModel = userAccountModel;\r\n        this.accountService = accountService;\r\n        this.jwtService = jwtService;\r\n        this.cls = cls;\r\n        this.accountService.accountModelRmd = this.userAccountModel;\r\n        this.accountService.accountUserKey = 'email';\r\n    }\r\n    loginStaffAccount(staff) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const user = yield this.userAccountModel.findOne({\r\n                email: staff.email,\r\n            });\r\n            if (!user)\r\n                throw new common_1.ForbiddenException('Invalid user credentials, please try again.');\r\n            const userInfo = yield this.userAccountModel.findOne({\r\n                _id: user === null || user === void 0 ? void 0 : user._id,\r\n            }, { salt: 0, passWord: 0 });\r\n            console.log(userInfo.email, ' Logged In!');\r\n            return {\r\n                token: this.jwtService.jwtSign(this.accountService.decryptAccountPassword(user, staff.passWord), 'email'),\r\n                staff: userInfo,\r\n            };\r\n        });\r\n    }\r\n    getAccounts() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const accounts = yield this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n            return accounts.filter((account) => account.email !== 'ibnadam.net@gmail.com');\r\n        });\r\n    }\r\n};\r\nUserAccountQueryService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.userAccountModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof lib_nest_modules_1.AccountService !== \"undefined\" && lib_nest_modules_1.AccountService) === \"function\" ? _b : Object, typeof (_c = typeof lib_serverConfig_1.JwtService !== \"undefined\" && lib_serverConfig_1.JwtService) === \"function\" ? _c : Object, typeof (_d = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _d : Object])\r\n], UserAccountQueryService);\r\nexports.UserAccountQueryService = UserAccountQueryService;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountStoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rmd_db_model_1 = require(\"../../../rmd-db.model\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nconst mongoose_delete_1 = require(\"mongoose-delete\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet UserAccountStoreService = class UserAccountStoreService {\r\n    constructor(userAccountModel, accountService, cls) {\r\n        this.userAccountModel = userAccountModel;\r\n        this.accountService = accountService;\r\n        this.cls = cls;\r\n        this.accountService.accountModelRmd = this.userAccountModel;\r\n    }\r\n    saveAccount(accountForm) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (accountForm === null || accountForm === void 0 ? void 0 : accountForm._id) {\r\n                const account = yield this.userAccountModel.findByIdAndUpdate(accountForm._id, this.accountService.encryptAccountPassword(accountForm));\r\n                if (account === null || account === void 0 ? void 0 : account._id) {\r\n                    const accounts = yield this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n                    return accounts.filter((account) => account.email !== 'ibnadam.net@gmail.com');\r\n                    return this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n                }\r\n            }\r\n            else {\r\n                const account = yield this.userAccountModel.create(this.accountService.encryptAccountPassword(accountForm));\r\n                if (account === null || account === void 0 ? void 0 : account._id) {\r\n                    const accounts = yield this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n                    return accounts.filter((account) => account.email !== 'ibnadam.net@gmail.com');\r\n                }\r\n                // return this.userAccountModel.find({}, {salt: 0, passWord: 0});\r\n            }\r\n        });\r\n    }\r\n    deleteAccount(accountId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const accountToDelete = yield this.userAccountModel.findById(accountId);\r\n            if (accountToDelete.email == 'ibnadam.net@gmail.com')\r\n                return;\r\n            const account = yield this.userAccountModel.deleteById(accountId, this.cls.get('contextUser._id'));\r\n            if (account === null || account === void 0 ? void 0 : account.modifiedCount)\r\n                return this.userAccountModel.find({}, { salt: 0, passWord: 0 });\r\n            throw new common_1.NotFoundException(\"Error occured, account not deleted please try again.\");\r\n        });\r\n    }\r\n};\r\nUserAccountStoreService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(rmd_db_model_1.ERmdDbModels.userAccountModel)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof mongoose_delete_1.SoftDeleteModel !== \"undefined\" && mongoose_delete_1.SoftDeleteModel) === \"function\" ? _a : Object, typeof (_b = typeof lib_nest_modules_1.AccountService !== \"undefined\" && lib_nest_modules_1.AccountService) === \"function\" ? _b : Object, typeof (_c = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _c : Object])\r\n], UserAccountStoreService);\r\nexports.UserAccountStoreService = UserAccountStoreService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UserAccountModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst user_account_query_controller_1 = require(\"./controllers/user-account-query.controller\");\r\nconst user_account_store_controller_1 = require(\"./controllers/user-account-store.controller\");\r\nconst user_account_store_service_1 = require(\"./services/user-account-store.service\");\r\nconst user_account_query_service_1 = require(\"./services/user-account-query.service\");\r\nconst db_providers_1 = require(\"libs/lib-db-config/src/lib/db.providers\");\r\nconst rmd_db_model_1 = require(\"../../rmd-db.model\");\r\nconst account_schema_1 = require(\"./account.schema\");\r\nconst lib_nest_modules_1 = require(\"@healmah-nest/lib-nest-modules\");\r\nlet UserAccountModule = class UserAccountModule {\r\n};\r\nUserAccountModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [lib_nest_modules_1.AccountModule],\r\n        controllers: [user_account_query_controller_1.UserAccountQueryController, user_account_store_controller_1.UserAccountStoreController],\r\n        providers: [user_account_store_service_1.UserAccountStoreService, user_account_query_service_1.UserAccountQueryService,\r\n            (0, db_providers_1.modelProvider)({\r\n                modelName: rmd_db_model_1.ERmdDbModels.userAccountModel,\r\n                modelSchema: account_schema_1.accountSchema\r\n            })\r\n        ],\r\n    })\r\n], UserAccountModule);\r\nexports.UserAccountModule = UserAccountModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ERmdDbModels = void 0;\r\nvar ERmdDbModels;\r\n(function (ERmdDbModels) {\r\n    ERmdDbModels[\"userAccountModel\"] = \"SALON_UserAccount\";\r\n    ERmdDbModels[\"systemConfigModel\"] = \"SALON_SystemConfig\";\r\n    ERmdDbModels[\"stockItemModel\"] = \"SALON_StockItem\";\r\n    ERmdDbModels[\"purchaseModel\"] = \"SALON_Purchase\";\r\n    ERmdDbModels[\"saleModel\"] = \"SALON_Sale\";\r\n    ERmdDbModels[\"saleItemModel\"] = \"SALON_SaleItem\";\r\n    ERmdDbModels[\"serviceItemModel\"] = \"SALON_ServiceItem\";\r\n    ERmdDbModels[\"serviceRenderedModel\"] = \"SALON_ServiceRendered\";\r\n    ERmdDbModels[\"serviceRenderedItemModel\"] = \"SALON_ServiceRenderedItem\";\r\n    ERmdDbModels[\"expenditureModel\"] = \"SALON_EXPENDITURE\";\r\n    ERmdDbModels[\"gameModel\"] = \"SALON_GAME\";\r\n    ERmdDbModels[\"gamePlayedModel\"] = \"SALON_GAME_PLAYED\";\r\n    ERmdDbModels[\"todoModel\"] = \"SALON_TODO\";\r\n    ERmdDbModels[\"staffPayModel\"] = \"SALON_SAFF_PAY\";\r\n})(ERmdDbModels = exports.ERmdDbModels || (exports.ERmdDbModels = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RmdModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst user_account_module_1 = require(\"./common/user-account/user-account.module\");\r\nconst stocks_module_1 = require(\"./common/stocks/stocks.module\");\r\nconst settings_module_1 = require(\"./common/settings/settings-module\");\r\nconst services_module_1 = require(\"./common/services/services.module\");\r\nconst game_module_1 = require(\"./common/game/game.module\");\r\nlet RmdModule = class RmdModule {\r\n};\r\nRmdModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [\r\n            user_account_module_1.UserAccountModule,\r\n            stocks_module_1.StocksModule,\r\n            settings_module_1.SettingsModule,\r\n            services_module_1.ServicesModule,\r\n            game_module_1.GameModule,\r\n        ]\r\n    })\r\n], RmdModule);\r\nexports.RmdModule = RmdModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RmdModuleRoute = void 0;\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst rmd_module_1 = require(\"./rmd.module\");\r\nconst user_account_module_1 = require(\"./common/user-account/user-account.module\");\r\nconst stocks_module_1 = require(\"./common/stocks/stocks.module\");\r\nconst settings_module_1 = require(\"./common/settings/settings-module\");\r\nconst services_module_1 = require(\"./common/services/services.module\");\r\nconst game_module_1 = require(\"./common/game/game.module\");\r\nexports.RmdModuleRoute = [\r\n    {\r\n        path: 'rmd',\r\n        module: rmd_module_1.RmdModule,\r\n        children: [\r\n            {\r\n                path: lib_xUtils_1.EFeatureAppModule.GAME.toLowerCase(),\r\n                module: game_module_1.GameModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.EFeatureAppModule.SERVICE.toLowerCase(),\r\n                module: services_module_1.ServicesModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.ECommonAppModule.Account.toLowerCase(),\r\n                module: user_account_module_1.UserAccountModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.EFeatureAppModule.STOCK.toLowerCase(),\r\n                module: stocks_module_1.StocksModule\r\n            },\r\n            {\r\n                path: lib_xUtils_1.EFeatureAppModule.Setting.toLowerCase(),\r\n                module: settings_module_1.SettingsModule\r\n            }\r\n        ]\r\n    }\r\n];\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./lib/db-config.module\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/types/db-model.types\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/types/db-models.enum\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/db.providers\"), exports);\r\n","\"use strict\";\r\nvar DbConfigModule_1;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DbConfigModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst config_1 = require(\"@nestjs/config\");\r\nconst path_1 = require(\"path\");\r\nconst db_config_1 = tslib_1.__importDefault(require(\"./db-config\"));\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nconst db_config_service_1 = require(\"./services/db-config.service\");\r\nconst db_providers_1 = require(\"./db.providers\");\r\nconst configPath = (0, path_1.resolve)((0, path_1.join)(__dirname, lib_serverConfig_1.StoreService.appName, 'assets', '.db.env'));\r\nlet DbConfigModule = DbConfigModule_1 = class DbConfigModule {\r\n    static register(options) {\r\n        if (options.global == undefined || options.global == null)\r\n            options.global = false;\r\n        // console.log('CONFIG PATH', configPath);\r\n        const customProviders = [];\r\n        if (Array.isArray(options.dbIndex)) {\r\n            for (let i = 0; i < options.dbIndex.length; i++) {\r\n                customProviders.push((0, db_providers_1.dbProvider)(options.dbConnIndex, options.dbIndex[i]));\r\n            }\r\n        }\r\n        else {\r\n            customProviders.push((0, db_providers_1.dbProvider)(options.dbConnIndex, options.dbIndex));\r\n        }\r\n        return {\r\n            global: options.global,\r\n            imports: [],\r\n            module: DbConfigModule_1,\r\n            providers: customProviders,\r\n            exports: customProviders,\r\n        };\r\n    }\r\n    constructor() {\r\n        // console.log('CONFIG PATH', configPath);\r\n    }\r\n};\r\nDbConfigModule = DbConfigModule_1 = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [\r\n            config_1.ConfigModule.forRoot({\r\n                load: [db_config_1.default],\r\n                envFilePath: configPath,\r\n                cache: true,\r\n            }),\r\n        ],\r\n        providers: [lib_serverConfig_1.CmdService, db_config_service_1.DbConfigService],\r\n    }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [])\r\n], DbConfigModule);\r\nexports.DbConfigModule = DbConfigModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst config_1 = require(\"@nestjs/config\");\r\nexports.default = (0, config_1.registerAs)('db', () => ({\r\n    dbService: process.env['DB_SERVICE'],\r\n    dbUrl: process.env['DB_URL'],\r\n    dbPort: process.env['DB_PORT'],\r\n    dbConn1: process.env['DB_CONN_1'],\r\n    dbConn2: process.env['DB_CONN_2'],\r\n    dbConn3: process.env['DB_CONN_3'],\r\n    dbConn4: process.env['DB_CONN_4'],\r\n    dbConn5: process.env['DB_CONN_5'],\r\n    dbConn6: process.env['DB_CONN_6'],\r\n    dbConn7: process.env['DB_CONN_7'],\r\n    dbConn8: process.env['DB_CONN_8'],\r\n    dbConn9: process.env['DB_CONN_9'],\r\n    dbConn10: process.env['DB_CONN_10'],\r\n    db1: process.env['DB_1'],\r\n    db2: process.env['DB_2'],\r\n    db3: process.env['DB_3'],\r\n    db4: process.env['DB_4'],\r\n    db5: process.env['DB_5'],\r\n    db6: process.env['DB_6'],\r\n    db7: process.env['DB_7'],\r\n    db8: process.env['DB_8'],\r\n    db9: process.env['DB_9'],\r\n    db10: process.env['DB_10'],\r\n    dbUser: process.env['DB_USER'],\r\n    dbPass: process.env['DB_PASS'],\r\n}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.modelProvider = exports.dbProvider = exports.models = exports.dbConnection = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst mongoose_1 = tslib_1.__importDefault(require(\"mongoose\"));\r\nconst mongoose_delete_1 = tslib_1.__importDefault(require(\"mongoose-delete\"));\r\nconst db_config_service_1 = require(\"./services/db-config.service\");\r\nconst path_1 = require(\"path\");\r\nconst db_models_enum_1 = require(\"./types/db-models.enum\");\r\nconst electron_1 = require(\"electron\");\r\nexports.dbConnection = null;\r\nexports.models = [];\r\nconst dbProvider = (dbNameIndex, dbConnIndex, customDbConfig) => {\r\n    return {\r\n        provide: dbNameIndex,\r\n        useFactory: (dbConfigService) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\r\n            try {\r\n                if (!(0, path_1.resolve)('.').toLowerCase().includes('healma') &&\r\n                    !(0, path_1.resolve)('.').toLowerCase().includes('healmah') && !electron_1.app) {\r\n                    var config = JSON.parse(process.env['APP_CONFIG'] || '{}');\r\n                    const conn = yield mongoose_1.default.connect(\"mongodb://\" + config.mongo.user + \":\" + encodeURIComponent(dbConfigService.dbPass) + \"@\" +\r\n                        config.mongo.hostString);\r\n                    if (conn) {\r\n                        console.log(dbConfigService.dbName(dbNameIndex), ' successfully connected.');\r\n                        exports.dbConnection = conn.connection;\r\n                    }\r\n                    return conn;\r\n                }\r\n                const dbStatus = yield dbConfigService.ensureDbRunning();\r\n                if (!dbStatus) {\r\n                    console.log('DB STATUS', dbStatus);\r\n                    console.log(dbConfigService.dbUrl, ' - ', dbConfigService.dbPort, ' - ', dbConfigService.dbName(dbNameIndex));\r\n                    console.log(dbConfigService.dbName(dbNameIndex), ' not connected');\r\n                    return Promise.resolve(false);\r\n                }\r\n                ;\r\n                const conn = mongoose_1.default.createConnection(`${dbConfigService.dbUrl}:${dbConfigService.dbPort}/${dbConfigService.dbName(dbNameIndex)}`, { minPoolSize: 10 });\r\n                if (conn) {\r\n                    console.log(dbConfigService.dbName(dbNameIndex), ' successfully connected');\r\n                    exports.dbConnection = conn;\r\n                }\r\n                return conn;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n                console.log(dbConfigService.dbUrl, ' - ', dbConfigService.dbPort, ' - ', dbConfigService.dbName(dbNameIndex));\r\n                console.log(dbConfigService.dbName(dbNameIndex), ' not connected');\r\n            }\r\n        }),\r\n        inject: [db_config_service_1.DbConfigService],\r\n    };\r\n};\r\nexports.dbProvider = dbProvider;\r\nconst modelProvider = (config) => {\r\n    if (!config.dbConnModel)\r\n        config.dbConnModel = db_models_enum_1.EDbProvider.dbConn1;\r\n    if (!config.applyMongooseDeletePlugin)\r\n        config.applyMongooseDeletePlugin = true;\r\n    return {\r\n        provide: config.modelName,\r\n        useFactory: (connection) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {\r\n            try {\r\n                if ((0, path_1.resolve)('.').includes('healmah')) {\r\n                    if (!connection)\r\n                        return;\r\n                }\r\n                // console.log(' Db Connections ', connection?.id, connection?.modelNames())\r\n                if (config.applyMongooseDeletePlugin) {\r\n                    config.modelSchema.plugin(mongoose_delete_1.default, {\r\n                        deletedAt: true,\r\n                        deletedBy: true,\r\n                        overrideMethods: true,\r\n                    });\r\n                    config.modelSchema.pre('find', function () {\r\n                        const { withDeleted } = this.getOptions();\r\n                        if (withDeleted) {\r\n                            delete this.getFilter()['deleted'];\r\n                        }\r\n                    });\r\n                }\r\n                exports.models = [...Object.entries(connection.models)];\r\n                // Object.entries(connection.models).forEach((entry)=>models.push(entry))\r\n                // console.log(models);\r\n                // connection.models\r\n                let model;\r\n                for (let i = 0; i < (exports.models === null || exports.models === void 0 ? void 0 : exports.models.length); i++) {\r\n                    if (exports.models[i].includes(config.modelName)) {\r\n                        console.log(config.modelName, ' is registered');\r\n                        model = exports.models[i][1];\r\n                    }\r\n                }\r\n                if (!model)\r\n                    model = connection.model(config.modelName, config.modelSchema);\r\n                // else{\r\n                //   model\r\n                // }\r\n                if (model) {\r\n                    exports.models.push(model);\r\n                    // console.log(model.modelName, ' registered successfully!');\r\n                }\r\n                return model;\r\n            }\r\n            catch (error) {\r\n                console.log('No connection for ', config.modelName, ' model', error);\r\n            }\r\n            return;\r\n        }),\r\n        inject: [config.dbConnModel],\r\n    };\r\n};\r\nexports.modelProvider = modelProvider;\r\n// export const mProvider = <T>(config: {\r\n//   [K in keyof T]?: T[K];\r\n//   // modelName?: any;\r\n//   // modelSchema: Schema;\r\n//   // dbConnModel?: EDbProvider;\r\n//   // applyMongooseDeletePlugin?: boolean;\r\n// }) => {\r\n//   if (!config.dbConnModel) config.dbConnModel = EDbProvider.dbConn1;\r\n//   if (!config.applyMongooseDeletePlugin)\r\n//     config.applyMongooseDeletePlugin = true;\r\n//   return {\r\n//     provide: config.modelName,\r\n//     useFactory: async (connection: Connection) => {\r\n//       try {\r\n//         if(resolve('.').includes('healmah')) {\r\n//           if (!connection) return;\r\n//         }\r\n//         console.log(' Db Connections ', connection.id, connection.modelNames())\r\n//         if (config.applyMongooseDeletePlugin) {\r\n//           config.modelSchema.plugin(MongooseDelete, {\r\n//             deletedAt: true,\r\n//             deletedBy: true,\r\n//             overrideMethods: true,\r\n//           });\r\n//           config.modelSchema.pre('find', function () {\r\n//             const { withDeleted }: any = this.getOptions() as any;\r\n//             if (withDeleted) {\r\n//               delete this.getFilter()['deleted'];\r\n//             }\r\n//           });\r\n//         }\r\n//         const model = connection.model(config.modelName, config.modelSchema);\r\n//         if (model)\r\n//           console.log(config.modelName, ' model registered successfully!');\r\n//         return model;\r\n//       } catch (error) {\r\n//         console.log('No connection for ', config.modelName, ' model', error);\r\n//       }\r\n//       return;\r\n//     },\r\n//     inject: [config.dbConnModel],\r\n//   };\r\n// };\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DbConfigService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst schedule_1 = require(\"@nestjs/schedule\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst path_1 = require(\"path\");\r\nconst config_1 = require(\"@nestjs/config\");\r\n// import { Stor eService } from '../services/store.service';\r\n// import { CronJob } from 'cron';\r\nconst cron = require('cron');\r\nconst electron_1 = require(\"electron\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nlet DbConfigService = class DbConfigService {\r\n    constructor(_configService, cmdService) {\r\n        this._configService = _configService;\r\n        this.cmdService = cmdService;\r\n        this.retryCount = 3;\r\n        this.ensureDbRunning();\r\n        new cron.CronJob(schedule_1.CronExpression.EVERY_DAY_AT_8PM, () => {\r\n            this.backupDb();\r\n        }).start();\r\n        // console.log(Inject());\r\n    }\r\n    get dbService() {\r\n        return this._configService.get('db.dbService');\r\n    }\r\n    dbName(dbIndex) {\r\n        return this._configService.get('db.db' + dbIndex);\r\n    }\r\n    dbConn(connIndex) {\r\n        return this._configService.get('db.dbConn' + connIndex);\r\n    }\r\n    get dbUser() {\r\n        return this._configService.get('db.dbUser');\r\n    }\r\n    get dbPass() {\r\n        return this._configService.get('db.dbPass');\r\n    }\r\n    get dbUrl() {\r\n        return this._configService.get('db.dbUrl');\r\n    }\r\n    get dbPort() {\r\n        return this._configService.get('db.dbPort');\r\n    }\r\n    ensureModel(model) {\r\n        if (!model)\r\n            throw new common_1.BadGatewayException(\"Can't handle this request, model not properly configured\");\r\n    }\r\n    ensureDbRunning() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (!electron_1.app)\r\n                return true;\r\n            const isServicePresent = yield this.cmdService.isServiceAvailable(this.dbService);\r\n            if (!isServicePresent)\r\n                return false;\r\n            const isDbRunning = yield this.cmdService.isServiceRunning(this.dbService);\r\n            if (isDbRunning)\r\n                return isDbRunning;\r\n            const run = yield this.cmdService.runCmd(`net start ${this.dbService}`);\r\n            --this.retryCount;\r\n            if (!run.success && this.retryCount >= 0) {\r\n                yield this.ensureDbRunning();\r\n            }\r\n            if (this.retryCount >= 0) {\r\n                electron_1.app === null || electron_1.app === void 0 ? void 0 : electron_1.app.relaunch();\r\n                electron_1.app === null || electron_1.app === void 0 ? void 0 : electron_1.app.exit();\r\n            }\r\n            return isDbRunning;\r\n        });\r\n    }\r\n    backupDb() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (!electron_1.app)\r\n                return;\r\n            try {\r\n                const run = yield this.cmdService.runCmd(`mongodump --gzip --db ${this.dbName} --archive=${(0, path_1.join)(lib_serverConfig_1.StoreService.uploadRootDir, lib_xUtils_1.EFileUploadDir.setting, new Date().getTime() + '.archive')}`);\r\n                --this.retryCount;\r\n                if (!run.success && this.retryCount >= 1) {\r\n                    this.backupDb();\r\n                }\r\n                return run;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n            return;\r\n        });\r\n    }\r\n    restoreDb(fileName) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const run = yield this.cmdService.runCmd(`mongorestore --gzip --db ${this.dbName} --archive=${(0, path_1.join)(lib_serverConfig_1.StoreService.uploadRootDir, lib_xUtils_1.EFileUploadDir.setting, fileName + '.archive --drop')}`);\r\n                --this.retryCount;\r\n                if (!run.success && this.retryCount >= 1) {\r\n                    this.backupDb();\r\n                }\r\n                return run;\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n            return;\r\n        });\r\n    }\r\n};\r\nDbConfigService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _a : Object, typeof (_b = typeof lib_serverConfig_1.CmdService !== \"undefined\" && lib_serverConfig_1.CmdService) === \"function\" ? _b : Object])\r\n], DbConfigService);\r\nexports.DbConfigService = DbConfigService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EVetModelProvider = exports.ECinModelProvider = exports.EDbProvider = void 0;\r\n/* eslint-disable prettier/prettier */\r\nvar EDbProvider;\r\n(function (EDbProvider) {\r\n    EDbProvider[\"dbConn1\"] = \"1\";\r\n    EDbProvider[\"dbConn2\"] = \"2\";\r\n    EDbProvider[\"dbConn3\"] = \"3\";\r\n    EDbProvider[\"dbConn4\"] = \"4\";\r\n    EDbProvider[\"dbConn5\"] = \"5\";\r\n    EDbProvider[\"dbConn6\"] = \"6\";\r\n    EDbProvider[\"dbConn7\"] = \"7\";\r\n    EDbProvider[\"dbConn8\"] = \"8\";\r\n    EDbProvider[\"dbConn9\"] = \"9\";\r\n    EDbProvider[\"dbConn10\"] = \"10\";\r\n    EDbProvider[\"db1\"] = \"1\";\r\n    EDbProvider[\"db2\"] = \"2\";\r\n    EDbProvider[\"db3\"] = \"3\";\r\n    EDbProvider[\"db4\"] = \"4\";\r\n    EDbProvider[\"db5\"] = \"5\";\r\n    EDbProvider[\"db6\"] = \"6\";\r\n    EDbProvider[\"db7\"] = \"7\";\r\n    EDbProvider[\"db8\"] = \"8\";\r\n    EDbProvider[\"db9\"] = \"9\";\r\n    EDbProvider[\"db10\"] = \"10\";\r\n})(EDbProvider = exports.EDbProvider || (exports.EDbProvider = {}));\r\nvar ECinModelProvider;\r\n(function (ECinModelProvider) {\r\n    //////////// CORE MODULES  ////////////////////\r\n    /// Inventory\r\n    ECinModelProvider[\"stockItemModel\"] = \"StockItem\";\r\n    ECinModelProvider[\"purchaseModel\"] = \"Purchase\";\r\n    ECinModelProvider[\"vendorModel\"] = \"vendor\";\r\n    ECinModelProvider[\"unitModel\"] = \"unit\";\r\n    ECinModelProvider[\"stockLevelModeratorModel\"] = \"stockLevelModerator\";\r\n    //// Dispensary\r\n    ECinModelProvider[\"dispensedOrderModel\"] = \"DispensedOrder\";\r\n    ECinModelProvider[\"expenditureModel\"] = \"ExpenseRegister\";\r\n    //////////// FEATURE MODULES ////////////////////\r\n    /// Settings\r\n    ECinModelProvider[\"staffModel\"] = \"User\";\r\n    ECinModelProvider[\"systemSettingsModel\"] = \"SystemSettings\";\r\n})(ECinModelProvider = exports.ECinModelProvider || (exports.ECinModelProvider = {}));\r\nvar EVetModelProvider;\r\n(function (EVetModelProvider) {\r\n    EVetModelProvider[\"userAccountModel\"] = \"UserAccount\";\r\n    EVetModelProvider[\"stockItemModel\"] = \"StockItem\";\r\n    EVetModelProvider[\"purchaseModel\"] = \"Purchase\";\r\n    EVetModelProvider[\"saleModel\"] = \"Sale\";\r\n})(EVetModelProvider = exports.EVetModelProvider || (exports.EVetModelProvider = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./lib/lib-nest-modules.module\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/account/account.module\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/account/account.service\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/account/account.interface\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/account/account-jwt.service\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/account/account-auth.guard\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/auth/auth.index\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/file-manager/file-manager.module\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/file-manager/file-manager.routes\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/file-manager/file-manager.service\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/file-manager/services/printer.service\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/idempotency/idempotency.module\"), exports);\r\n","\"use strict\";\r\nvar _a, _b, _c, _d;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AccountAuthGuard = exports.Roles = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst account_service_1 = require(\"./account.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst core_1 = require(\"@nestjs/core\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nconst account_jwt_service_1 = require(\"./account-jwt.service\");\r\n// import { IHealmahClsStore } from '../types/nest.interface';\r\nconst Roles = (accountType, module) => (0, common_1.SetMetadata)('roles', [accountType, module]);\r\nexports.Roles = Roles;\r\nlet AccountAuthGuard = class AccountAuthGuard {\r\n    constructor(jwtService, reflector, accountService, cls) {\r\n        this.jwtService = jwtService;\r\n        this.reflector = reflector;\r\n        this.accountService = accountService;\r\n        this.cls = cls;\r\n    }\r\n    canActivate(context) {\r\n        const request = context.switchToHttp().getRequest();\r\n        const roles = this.reflector.getAllAndOverride('roles', [\r\n            context.getClass(),\r\n            context.getHandler(),\r\n        ]);\r\n        if (!roles)\r\n            return true;\r\n        const verified = this.jwtService.jwtVerify(request.headers['auth-token']);\r\n        const filter = {};\r\n        filter[this.accountService.accountUserKey] = verified[this.accountService.accountUserKey];\r\n        this.cls.set('contextUser', verified);\r\n        // console.log(request.originalUrl);\r\n        // console.log(verified);\r\n        // console.log(filter, this.accountService.accountUserKey);\r\n        // if(request.originalUrl.includes('dvt'))\r\n        //   this.accountService.accountModel = this.\r\n        let model = {};\r\n        if (request.originalUrl.includes('dvt')) {\r\n            model = this.accountService.accountModelDvt;\r\n        }\r\n        else if (request.originalUrl.includes('rmd')) {\r\n            model = this.accountService.accountModelRmd;\r\n        }\r\n        else if (request.originalUrl.includes('cpt')) {\r\n            model = this.accountService.accountModelCpt;\r\n        }\r\n        else\r\n            model = this.accountService.accountModel;\r\n        return this.contextUser(roles[0], roles[1], filter, model);\r\n    }\r\n    contextUser(contextAccountTypes, contextModule, filter, model) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const { appModule, acctType } = (yield model.findOne(filter)) || {};\r\n            if (contextModule !== '*' && contextAccountTypes !== '*') {\r\n                return (contextModule.includes(appModule) &&\r\n                    contextAccountTypes.includes(acctType));\r\n            }\r\n            // User module specified but not account type\r\n            if (contextModule !== '*' && contextAccountTypes === '*') {\r\n                return contextModule.includes(appModule);\r\n            }\r\n            // User module not specified but account type\r\n            if (contextModule === '*' && contextAccountTypes !== '*') {\r\n                return contextAccountTypes.includes(acctType);\r\n            }\r\n            // Both user module and account type not specified\r\n            if (contextModule === '*' && contextAccountTypes === '*') {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n};\r\nAccountAuthGuard = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof account_jwt_service_1.JwtService !== \"undefined\" && account_jwt_service_1.JwtService) === \"function\" ? _a : Object, typeof (_b = typeof core_1.Reflector !== \"undefined\" && core_1.Reflector) === \"function\" ? _b : Object, typeof (_c = typeof account_service_1.AccountService !== \"undefined\" && account_service_1.AccountService) === \"function\" ? _c : Object, typeof (_d = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _d : Object])\r\n], AccountAuthGuard);\r\nexports.AccountAuthGuard = AccountAuthGuard;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.JwtService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst jwt = tslib_1.__importStar(require(\"jsonwebtoken\"));\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst server_config_service_1 = require(\"../../../../lib-server-config/src/lib/services/server-config.service\");\r\nlet JwtService = class JwtService {\r\n    constructor(appConfigService) {\r\n        this.appConfigService = appConfigService;\r\n    }\r\n    jwtSign(user, ...props) {\r\n        const loginUser = {\r\n            _id: user['_id'],\r\n            acctType: user['acctType']\r\n        };\r\n        props.forEach((prop) => {\r\n            loginUser[prop] = user[prop];\r\n        });\r\n        return jwt.sign(loginUser, this.appConfigService.appCode, { expiresIn: '1d' });\r\n    }\r\n    jwtVerify(token) {\r\n        var _a;\r\n        token = (_a = JSON.parse(token || '{}')) === null || _a === void 0 ? void 0 : _a.token;\r\n        if (!token)\r\n            throw new common_1.UnauthorizedException(lib_xUtils_1.EErrorMessages.sessionExpired);\r\n        try {\r\n            return jwt.verify(token, this.appConfigService.appCode);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            if (error.message.includes('expired') == false)\r\n                throw new common_1.UnauthorizedException(lib_xUtils_1.EErrorMessages.unauthorized);\r\n            throw new common_1.UnauthorizedException(lib_xUtils_1.EErrorMessages.sessionExpired);\r\n        }\r\n    }\r\n};\r\nJwtService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof server_config_service_1.ServerConfigService !== \"undefined\" && server_config_service_1.ServerConfigService) === \"function\" ? _a : Object])\r\n], JwtService);\r\nexports.JwtService = JwtService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AccountModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst account_jwt_service_1 = require(\"./account-jwt.service\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nconst account_service_1 = require(\"./account.service\");\r\nconst core_1 = require(\"@nestjs/core\");\r\nconst account_auth_guard_1 = require(\"./account-auth.guard\");\r\nlet AccountModule = class AccountModule {\r\n};\r\nAccountModule = tslib_1.__decorate([\r\n    (0, common_1.Global)(),\r\n    (0, common_1.Module)({\r\n        imports: [lib_serverConfig_1.ServerConfigModule],\r\n        exports: [account_service_1.AccountService, account_jwt_service_1.JwtService],\r\n        providers: [\r\n            account_service_1.AccountService, account_jwt_service_1.JwtService,\r\n            {\r\n                provide: core_1.APP_GUARD,\r\n                useClass: account_auth_guard_1.AccountAuthGuard,\r\n            },\r\n        ],\r\n    })\r\n], AccountModule);\r\nexports.AccountModule = AccountModule;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AccountService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst crypto_1 = require(\"crypto\");\r\nconst crypto = tslib_1.__importStar(require(\"crypto\"));\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst account_jwt_service_1 = require(\"./account-jwt.service\");\r\nlet AccountService = class AccountService {\r\n    constructor(jwtService) {\r\n        this.jwtService = jwtService;\r\n    }\r\n    encryptAccountPassword(account) {\r\n        account.salt = (0, crypto_1.randomBytes)(16).toString('hex');\r\n        account.passWord = (0, crypto_1.pbkdf2Sync)(account.passWord, account.salt, 1000, 64, 'sha512').toString('hex');\r\n        return account;\r\n    }\r\n    decryptAccountPassword(account, password) {\r\n        const pass = crypto\r\n            .pbkdf2Sync(password, account.salt, 1000, 64, 'sha512')\r\n            .toString('hex');\r\n        if (pass === account.passWord)\r\n            return account;\r\n        else\r\n            throw new common_1.ForbiddenException('Invalid user credentials, please try again.');\r\n    }\r\n};\r\nAccountService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof account_jwt_service_1.JwtService !== \"undefined\" && account_jwt_service_1.JwtService) === \"function\" ? _a : Object])\r\n], AccountService);\r\nexports.AccountService = AccountService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.UNIQUE_PROP = exports.USER_SERVICE = exports.AUTH_SECRET = exports.AUTH_OPTIONS = void 0;\r\nexports.AUTH_OPTIONS = Symbol('AUTH_OPTIONS');\r\nexports.AUTH_SECRET = Symbol('AUTH_SECRET');\r\nexports.USER_SERVICE = Symbol('USER_SERVICE');\r\nexports.UNIQUE_PROP = Symbol('UNIQUE_PROP');\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AuthController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst auth_service_1 = require(\"./auth.service\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet AuthController = class AuthController {\r\n    constructor(authService) {\r\n        this.authService = authService;\r\n    }\r\n    signup(userData) {\r\n        return this.authService.signUp(userData);\r\n    }\r\n    signin(userData) {\r\n        return this.authService.signIn(userData);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)('sign-up'),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], AuthController.prototype, \"signup\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)('sign-in'),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], AuthController.prototype, \"signin\", null);\r\nAuthController = tslib_1.__decorate([\r\n    (0, common_1.Controller)('nix/settings/auth'),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof auth_service_1.AuthService !== \"undefined\" && auth_service_1.AuthService) === \"function\" ? _a : Object])\r\n], AuthController);\r\nexports.AuthController = AuthController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./auth.module\"), exports);\r\ntslib_1.__exportStar(require(\"./auth.interfaces\"), exports);\r\ntslib_1.__exportStar(require(\"./guard/accessToken.guard\"), exports);\r\ntslib_1.__exportStar(require(\"./guard/refreshToken.guard\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AuthModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst passport_1 = require(\"@nestjs/passport\");\r\nconst local_strategy_1 = require(\"./strategies/local.strategy\");\r\nconst jwt_token_strategy_1 = require(\"./strategies/jwt-token.strategy\");\r\nconst jwt_refresh_strategy_1 = require(\"./strategies/jwt-refresh.strategy\");\r\nconst nestjs_modules_1 = require(\"@golevelup/nestjs-modules\");\r\nconst auth_constants_1 = require(\"./auth.constants\");\r\nconst jwt_1 = require(\"@nestjs/jwt\");\r\nconst auth_controller_1 = require(\"./auth.controller\");\r\nconst auth_service_1 = require(\"./auth.service\");\r\nlet AuthModule = class AuthModule extends (0, nestjs_modules_1.createConfigurableDynamicRootModule)(auth_constants_1.AUTH_OPTIONS, {\r\n    providers: [\r\n        {\r\n            provide: auth_constants_1.AUTH_SECRET,\r\n            inject: [auth_constants_1.AUTH_OPTIONS],\r\n            useFactory: (options) => options.secret,\r\n        },\r\n        {\r\n            provide: auth_constants_1.USER_SERVICE,\r\n            inject: [auth_constants_1.AUTH_OPTIONS],\r\n            useFactory: (options) => options.userService,\r\n        },\r\n        {\r\n            provide: auth_constants_1.UNIQUE_PROP,\r\n            inject: [auth_constants_1.AUTH_OPTIONS],\r\n            useFactory: (options) => options.uniqueUserProp,\r\n        },\r\n    ],\r\n}) {\r\n};\r\nAuthModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [\r\n            passport_1.PassportModule,\r\n            jwt_1.JwtModule.register({}),\r\n        ],\r\n        providers: [\r\n            auth_service_1.AuthService,\r\n            local_strategy_1.LocalStrategy,\r\n            jwt_token_strategy_1.JwtTokenStrategy,\r\n            jwt_refresh_strategy_1.JwtRefreshStrategy,\r\n        ],\r\n        controllers: [auth_controller_1.AuthController],\r\n    })\r\n], AuthModule);\r\nexports.AuthModule = AuthModule;\r\n","\"use strict\";\r\nvar _a, _b, _c;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AuthService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst jsonwebtoken_1 = require(\"jsonwebtoken\");\r\nconst crypto_1 = require(\"crypto\");\r\nconst auth_constants_1 = require(\"./auth.constants\");\r\nconst auth_interfaces_1 = require(\"./auth.interfaces\");\r\nconst jwt_1 = require(\"@nestjs/jwt\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nlet AuthService = class AuthService {\r\n    constructor(secret, uniqueUserProp, userService, jwtService, serverConfigService) {\r\n        this.secret = secret;\r\n        this.uniqueUserProp = uniqueUserProp;\r\n        this.userService = userService;\r\n        this.jwtService = jwtService;\r\n        this.serverConfigService = serverConfigService;\r\n    }\r\n    signUp(userAccount) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const user = yield this.findUser(userAccount, 'signUp');\r\n            userAccount = user;\r\n            userAccount = this.hashAndSalt(userAccount);\r\n            // return\r\n            const newUser = yield this.userService.registerAccount(userAccount);\r\n            // console.log(userAccount, newUser);\r\n            const tokens = yield this.getTokens(newUser._id, newUser[this.uniqueUserProp]);\r\n            yield this.updateRefreshToken(newUser._id, tokens.refreshToken);\r\n            return tokens;\r\n        });\r\n    }\r\n    findUser(userAccount, type) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.userService.findAccount(userAccount, type);\r\n        });\r\n    }\r\n    signIn(userData) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const user = yield this.userService.findAccount(userData, 'signIn');\r\n            if (!user)\r\n                throw new common_1.BadRequestException('Invalid user credentials, please try again.');\r\n            this.disHashAndSalt(user, userData.passWord);\r\n            const tokens = yield this.getTokens(user._id, user[this.uniqueUserProp]);\r\n            yield this.updateRefreshToken(user._id, tokens.refreshToken);\r\n            return tokens;\r\n        });\r\n    }\r\n    hashAndSalt(account) {\r\n        var _a;\r\n        account.salt = (0, crypto_1.randomBytes)(16).toString('hex');\r\n        account.passWord = (0, crypto_1.pbkdf2Sync)((_a = account.passWord) === null || _a === void 0 ? void 0 : _a.toString(), account.salt, 1000, 64, 'sha512').toString('hex');\r\n        return account;\r\n    }\r\n    disHashAndSalt(account, password) {\r\n        const pass = (0, crypto_1.pbkdf2Sync)(password === null || password === void 0 ? void 0 : password.toString(), account.salt, 1000, 64, 'sha512')\r\n            .toString('hex');\r\n        if (pass === account.passWord)\r\n            return account;\r\n        else\r\n            throw new common_1.ForbiddenException('Invalid user credentials, please try again.');\r\n    }\r\n    getTokens(userId, userProp) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const [accessToken, refreshToken] = yield Promise.all([\r\n                this.jwtService.signAsync({\r\n                    sub: userId,\r\n                    [this.uniqueUserProp]: userProp,\r\n                }, {\r\n                    secret: this.serverConfigService.appCode,\r\n                    expiresIn: '1d',\r\n                }),\r\n                this.jwtService.signAsync({\r\n                    sub: userId,\r\n                    [this.uniqueUserProp]: userProp,\r\n                }, {\r\n                    secret: this.serverConfigService.name,\r\n                    expiresIn: '7d',\r\n                }),\r\n            ]);\r\n            return {\r\n                accessToken,\r\n                refreshToken,\r\n            };\r\n        });\r\n    }\r\n    updateRefreshToken(userId, refreshToken) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const hashedRefreshToken = refreshToken;\r\n            // const hashedRefreshToken = await this.hashData(refreshToken);\r\n            yield this.userService.updateRefressToken(userId, {\r\n                refreshToken: hashedRefreshToken,\r\n            });\r\n        });\r\n    }\r\n    hashData(data) {\r\n        // return argon2.hash(data);\r\n    }\r\n    signToken(payload) {\r\n        return (0, jsonwebtoken_1.sign)(payload, this.secret);\r\n    }\r\n    verifyToken(token) {\r\n        return (0, jsonwebtoken_1.verify)(token, this.secret);\r\n    }\r\n};\r\nAuthService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(auth_constants_1.AUTH_SECRET)),\r\n    tslib_1.__param(1, (0, common_1.Inject)(auth_constants_1.UNIQUE_PROP)),\r\n    tslib_1.__param(2, (0, common_1.Inject)(auth_constants_1.USER_SERVICE)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [String, String, typeof (_a = typeof auth_interfaces_1.UserService !== \"undefined\" && auth_interfaces_1.UserService) === \"function\" ? _a : Object, typeof (_b = typeof jwt_1.JwtService !== \"undefined\" && jwt_1.JwtService) === \"function\" ? _b : Object, typeof (_c = typeof lib_serverConfig_1.ServerConfigService !== \"undefined\" && lib_serverConfig_1.ServerConfigService) === \"function\" ? _c : Object])\r\n], AuthService);\r\nexports.AuthService = AuthService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AccessTokenGuard = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst passport_1 = require(\"@nestjs/passport\");\r\nlet AccessTokenGuard = class AccessTokenGuard extends (0, passport_1.AuthGuard)('jwt') {\r\n};\r\nAccessTokenGuard = tslib_1.__decorate([\r\n    (0, common_1.Injectable)()\r\n], AccessTokenGuard);\r\nexports.AccessTokenGuard = AccessTokenGuard;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RefreshTokenGuard = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst passport_1 = require(\"@nestjs/passport\");\r\nlet RefreshTokenGuard = class RefreshTokenGuard extends (0, passport_1.AuthGuard)('jwt-refresh') {\r\n};\r\nRefreshTokenGuard = tslib_1.__decorate([\r\n    (0, common_1.Injectable)()\r\n], RefreshTokenGuard);\r\nexports.RefreshTokenGuard = RefreshTokenGuard;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.JwtRefreshStrategy = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst passport_1 = require(\"@nestjs/passport\");\r\nconst passport_jwt_1 = require(\"passport-jwt\");\r\nlet JwtRefreshStrategy = class JwtRefreshStrategy extends (0, passport_1.PassportStrategy)(passport_jwt_1.Strategy, 'jwt-refresh') {\r\n    constructor() {\r\n        super({\r\n            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n            secretOrKey: 'JWT_REFRESH_SECRET',\r\n            passReqToCallback: true,\r\n        });\r\n        console.log('JWT_REFRESH_SECRET');\r\n    }\r\n    validate(req, payload) {\r\n        const refreshToken = req.get('Authorization').replace('Bearer', '').trim();\r\n        return Object.assign(Object.assign({}, payload), { refreshToken });\r\n    }\r\n};\r\nJwtRefreshStrategy = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [])\r\n], JwtRefreshStrategy);\r\nexports.JwtRefreshStrategy = JwtRefreshStrategy;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.JwtTokenStrategy = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst passport_1 = require(\"@nestjs/passport\");\r\nconst passport_jwt_1 = require(\"passport-jwt\");\r\nconst auth_interfaces_1 = require(\"../auth.interfaces\");\r\nconst auth_constants_1 = require(\"../auth.constants\");\r\nlet JwtTokenStrategy = class JwtTokenStrategy extends (0, passport_1.PassportStrategy)(passport_jwt_1.Strategy, 'jwt') {\r\n    constructor(UserService) {\r\n        super({\r\n            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n            secretOrKey: 'JWT_ACCESS_SECRET',\r\n        });\r\n        this.UserService = UserService;\r\n    }\r\n    validate(payload) {\r\n        console.log(payload);\r\n        return payload;\r\n    }\r\n};\r\nJwtTokenStrategy = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(auth_constants_1.USER_SERVICE)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof auth_interfaces_1.UserService !== \"undefined\" && auth_interfaces_1.UserService) === \"function\" ? _a : Object])\r\n], JwtTokenStrategy);\r\nexports.JwtTokenStrategy = JwtTokenStrategy;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LocalStrategy = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst passport_1 = require(\"@nestjs/passport\");\r\nconst passport_local_1 = require(\"passport-local\");\r\nlet LocalStrategy = class LocalStrategy extends (0, passport_1.PassportStrategy)(passport_local_1.Strategy, 'local') {\r\n    constructor() {\r\n        super();\r\n    }\r\n    validate(username, password) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            console.log('LOCAL');\r\n        });\r\n    }\r\n};\r\nLocalStrategy = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [])\r\n], LocalStrategy);\r\nexports.LocalStrategy = LocalStrategy;\r\n","\"use strict\";\r\nvar _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FileManagerController = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst multer_1 = require(\"multer\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst file_manager_service_1 = require(\"./file-manager.service\");\r\n// import {\r\n//   EnumFileRoutes,\r\n//   EnumModuleRoutes,\r\n// } from './../../../../../shared/enums/routes.enum';\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst express_1 = require(\"express\");\r\nconst platform_express_1 = require(\"@nestjs/platform-express\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nconst printer_service_1 = require(\"./services/printer.service\");\r\nlet FileManagerController = class FileManagerController {\r\n    constructor(fileManagerService, printerService) {\r\n        this.fileManagerService = fileManagerService;\r\n        this.printerService = printerService;\r\n    }\r\n    jsonFile(filename, res) {\r\n        res.sendFile(filename, { root: this.fileManagerService.getJsonFile(filename) });\r\n    }\r\n    uploadFsFile(file, entity, req) {\r\n        return this.fileManagerService.uploadFsFile(entity.path, file.filename, entity);\r\n    }\r\n    printTest(data) {\r\n        return this.printerService.printTest(data);\r\n    }\r\n    uploadDbFile(file, entity, req) {\r\n        return this.fileManagerService.uploadDbFile(file, entity);\r\n    }\r\n};\r\ntslib_1.__decorate([\r\n    (0, common_1.Get)(`${lib_xUtils_1.EFileUplaodRoute.json}/:filename`),\r\n    tslib_1.__param(0, (0, common_1.Param)('filename')),\r\n    tslib_1.__param(1, (0, common_1.Res)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object, typeof (_c = typeof express_1.Response !== \"undefined\" && express_1.Response) === \"function\" ? _c : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], FileManagerController.prototype, \"jsonFile\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(lib_xUtils_1.EFileUplaodRoute.uploadFsFile),\r\n    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('file', {\r\n        storage: (0, multer_1.diskStorage)({\r\n            destination: lib_serverConfig_1.StoreService.setUploadDir,\r\n            filename: lib_serverConfig_1.StoreService.setFilename,\r\n        }),\r\n    })),\r\n    tslib_1.__param(0, (0, common_1.UploadedFile)()),\r\n    tslib_1.__param(1, (0, common_1.Query)()),\r\n    tslib_1.__param(2, (0, common_1.Req)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_e = typeof Express !== \"undefined\" && (_d = Express.Multer) !== void 0 && _d.File) === \"function\" ? _e : Object, typeof (_f = typeof lib_xUtils_1.IFileUploadEntity !== \"undefined\" && lib_xUtils_1.IFileUploadEntity) === \"function\" ? _f : Object, typeof (_g = typeof express_1.Request !== \"undefined\" && express_1.Request) === \"function\" ? _g : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], FileManagerController.prototype, \"uploadFsFile\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(lib_xUtils_1.EFileUplaodRoute.printTest),\r\n    tslib_1.__param(0, (0, common_1.Body)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], FileManagerController.prototype, \"printTest\", null);\r\ntslib_1.__decorate([\r\n    (0, common_1.Post)(lib_xUtils_1.EFileUplaodRoute.uploadDbFile),\r\n    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('file', {\r\n        storage: (0, multer_1.memoryStorage)(),\r\n    })),\r\n    tslib_1.__param(0, (0, common_1.UploadedFile)()),\r\n    tslib_1.__param(1, (0, common_1.Query)()),\r\n    tslib_1.__param(2, (0, common_1.Req)()),\r\n    tslib_1.__metadata(\"design:type\", Function),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_j = typeof Express !== \"undefined\" && (_h = Express.Multer) !== void 0 && _h.File) === \"function\" ? _j : Object, typeof (_k = typeof lib_xUtils_1.IFileUploadEntity !== \"undefined\" && lib_xUtils_1.IFileUploadEntity) === \"function\" ? _k : Object, typeof (_l = typeof express_1.Request !== \"undefined\" && express_1.Request) === \"function\" ? _l : Object]),\r\n    tslib_1.__metadata(\"design:returntype\", void 0)\r\n], FileManagerController.prototype, \"uploadDbFile\", null);\r\nFileManagerController = tslib_1.__decorate([\r\n    (0, common_1.Controller)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof file_manager_service_1.FileManagerService !== \"undefined\" && file_manager_service_1.FileManagerService) === \"function\" ? _a : Object, typeof (_b = typeof printer_service_1.PrinterService !== \"undefined\" && printer_service_1.PrinterService) === \"function\" ? _b : Object])\r\n], FileManagerController);\r\nexports.FileManagerController = FileManagerController;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FileManagerModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst file_manager_controller_1 = require(\"./file-manager.controller\");\r\nconst file_manager_service_1 = require(\"./file-manager.service\");\r\nconst printer_service_1 = require(\"./services/printer.service\");\r\nlet FileManagerModule = class FileManagerModule {\r\n};\r\nFileManagerModule = tslib_1.__decorate([\r\n    (0, common_1.Global)(),\r\n    (0, common_1.Module)({\r\n        controllers: [file_manager_controller_1.FileManagerController],\r\n        providers: [file_manager_service_1.FileManagerService, printer_service_1.PrinterService],\r\n        exports: [file_manager_service_1.FileManagerService, printer_service_1.PrinterService],\r\n    })\r\n], FileManagerModule);\r\nexports.FileManagerModule = FileManagerModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fileManagerRoutes = void 0;\r\nconst file_manager_module_1 = require(\"./file-manager.module\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nexports.fileManagerRoutes = [\r\n    {\r\n        path: lib_xUtils_1.EFileUplaodRoute.fileManager,\r\n        module: file_manager_module_1.FileManagerModule\r\n    }\r\n];\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FileManagerService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst fsx = tslib_1.__importStar(require(\"fs-extra\"));\r\nconst electron_1 = require(\"electron\");\r\nconst path_1 = require(\"path\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nlet FileManagerService = class FileManagerService {\r\n    constructor() {\r\n        this.modelPath = 'avatar';\r\n    }\r\n    getJsonFile(filename) {\r\n        if (electron_1.app && electron_1.app.isPackaged) {\r\n            if (fsx.existsSync((0, path_1.resolve)(lib_serverConfig_1.StoreService.assetsPath, filename)))\r\n                return (0, path_1.resolve)(lib_serverConfig_1.StoreService.assetsPath);\r\n        }\r\n        else {\r\n            if (fsx.existsSync((0, path_1.join)(lib_serverConfig_1.StoreService.assetsPath, filename)))\r\n                return (0, path_1.join)(lib_serverConfig_1.StoreService.assetsPath);\r\n        }\r\n    }\r\n    uploadFsFile(folder, fileName, entity) {\r\n        var _a;\r\n        const uploadEntity = {};\r\n        uploadEntity[this.modelPath] = (0, path_1.join)('/', folder, fileName);\r\n        return (_a = this.model) === null || _a === void 0 ? void 0 : _a.findByIdAndUpdate(entity.id, {\r\n            $set: uploadEntity\r\n        }, {\r\n            new: true,\r\n        });\r\n    }\r\n    uploadDbFile(file, entity) {\r\n        // console.log(file., entity);\r\n        var _a;\r\n        const uploadEntity = {};\r\n        uploadEntity[this.modelPath] = file;\r\n        // uploadEntity[this.modelPath] = join('/', folder, fileName);\r\n        return (_a = this.model) === null || _a === void 0 ? void 0 : _a.findByIdAndUpdate(entity.id, {\r\n            $set: uploadEntity\r\n        }, {\r\n            new: true,\r\n        });\r\n    }\r\n};\r\nFileManagerService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)()\r\n], FileManagerService);\r\nexports.FileManagerService = FileManagerService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PrinterService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst core_1 = require(\"@node-escpos/core\");\r\nconst usb_adapter_1 = tslib_1.__importDefault(require(\"@node-escpos/usb-adapter\"));\r\nlet PrinterService = class PrinterService {\r\n    printTest(data) {\r\n        const device = new usb_adapter_1.default();\r\n        device.open(function (err) {\r\n            return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n                if (err) {\r\n                    console.log(err);\r\n                    // handle error\r\n                    return;\r\n                }\r\n                const options = { encoding: \"GB18030\" /* default */ };\r\n                let printer = new core_1.Printer(device, options);\r\n                printer.setReverseColors(false);\r\n                printer\r\n                    .font(\"a\")\r\n                    .align(\"ct\")\r\n                    .style(\"b\")\r\n                    .size(1.5, 2)\r\n                    .spacing(1)\r\n                    .text(\"NIGER STATE GENERAL HOSPITAL MINNA\")\r\n                    // .text(\"恭喜发财\")\r\n                    // .barcode(112233445566, \"EAN13\", { width: 50, height: 50 })\r\n                    // .table([\"One\", \"Two\", \"Three\"])\r\n                    // .tableCustom(\r\n                    //   [\r\n                    //     { text: \"Left\", align: \"LEFT\", width: 0.33, style: \"B\" },\r\n                    //     { text: \"Center\", align: \"CENTER\", width: 0.33 },\r\n                    //     { text: \"Right\", align: \"RIGHT\", width: 0.33 },\r\n                    //   ],\r\n                    //   { encoding: \"cp857\", size: [1, 1] }, // Optional\r\n                    // )\r\n                    .feed(2);\r\n                // inject qrimage to printer\r\n                // printer = await printer.qrimage(\"https://github.com/node-escpos/driver\")\r\n                // // inject image to printer\r\n                // printer = await printer.image(\r\n                //   image,\r\n                //   \"s8\" // changing with image\r\n                // )\r\n                printer\r\n                    .cut()\r\n                    .close();\r\n            });\r\n        });\r\n    }\r\n};\r\nPrinterService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)()\r\n], PrinterService);\r\nexports.PrinterService = PrinterService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./idempotency.repository\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IdempotencyModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst redis_1 = require(\"./infra/redis/redis\");\r\nconst idempotency_repository_1 = require(\"./infra/repositories/idempotency.repository\");\r\nconst core_1 = require(\"@nestjs/core\");\r\nconst interceptors_1 = require(\"./infra/interceptors\");\r\nlet IdempotencyModule = class IdempotencyModule {\r\n};\r\nIdempotencyModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        providers: [\r\n            redis_1.Redis,\r\n            idempotency_repository_1.IdempotencyRepository,\r\n            {\r\n                provide: core_1.APP_INTERCEPTOR,\r\n                useClass: interceptors_1.IdempotencyKeyInterceptor,\r\n            },\r\n        ],\r\n        exports: [idempotency_repository_1.IdempotencyRepository],\r\n    })\r\n], IdempotencyModule);\r\nexports.IdempotencyModule = IdempotencyModule;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IdempotencyKeyInterceptor = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rxjs_1 = require(\"rxjs\");\r\nconst operators_1 = require(\"rxjs/operators\");\r\nconst repositories_1 = require(\"../repositories\");\r\nconst repositories_2 = require(\"../../domain/repositories\");\r\nlet IdempotencyKeyInterceptor = class IdempotencyKeyInterceptor {\r\n    constructor(idempotencyRepository) {\r\n        this.idempotencyRepository = idempotencyRepository;\r\n    }\r\n    intercept(context, next) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const ctx = context.switchToHttp();\r\n            const request = ctx.getRequest();\r\n            const idempotencyKey = request.headers['x-idempotency-key'];\r\n            // console.log(request.method);\r\n            // if(request.method)\r\n            if (idempotencyKey && request.method == 'POST') {\r\n                console.log(\"IDEMP \", idempotencyKey);\r\n                // if (!this.isValidUUID(idempotencyKey)) {\r\n                //   throw new BadRequestException(\r\n                //     \"Header 'x-idempotency-key' must be a UUID.\",\r\n                //   );\r\n                // }\r\n                const idempotencyModel = yield this.idempotencyRepository.find(idempotencyKey);\r\n                if (idempotencyModel) {\r\n                    console.log(\"IDEMP exist \", idempotencyKey);\r\n                    return (0, rxjs_1.of)(idempotencyModel.response);\r\n                }\r\n                yield this.idempotencyRepository.preSave(idempotencyKey);\r\n                return next.handle().pipe((0, operators_1.tap)((data) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n                    yield this.idempotencyRepository.update(idempotencyKey, data);\r\n                    return data;\r\n                })));\r\n            }\r\n            return next.handle();\r\n        });\r\n    }\r\n    isValidUUID(uuid) {\r\n        const uuidRegex = /(?:^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$)|(?:^0{8}-0{4}-0{4}-0{4}-0{12}$)/u;\r\n        return uuidRegex.test(uuid);\r\n    }\r\n};\r\nIdempotencyKeyInterceptor = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__param(0, (0, common_1.Inject)(repositories_1.IdempotencyRepository)),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof repositories_2.IIdempotencyRepository !== \"undefined\" && repositories_2.IIdempotencyRepository) === \"function\" ? _a : Object])\r\n], IdempotencyKeyInterceptor);\r\nexports.IdempotencyKeyInterceptor = IdempotencyKeyInterceptor;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./idempotency-key.interceptor\"), exports);\r\n","\"use strict\";\r\nvar Redis_1;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Redis = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet Redis = Redis_1 = class Redis {\r\n    get(key) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return Promise.resolve(Redis_1.data.get(key));\r\n        });\r\n    }\r\n    set(key, value) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            Promise.resolve(Redis_1.data.set(key, value));\r\n        });\r\n    }\r\n};\r\nRedis.data = new Map();\r\nRedis = Redis_1 = tslib_1.__decorate([\r\n    (0, common_1.Injectable)()\r\n], Redis);\r\nexports.Redis = Redis;\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IdempotencyRepository = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst redis_1 = require(\"../redis/redis\");\r\nlet IdempotencyRepository = class IdempotencyRepository {\r\n    constructor(redis) {\r\n        this.redis = redis;\r\n    }\r\n    find(key) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const data = yield this.redis.get(key);\r\n            if (data) {\r\n                return { key, response: data };\r\n            }\r\n        });\r\n    }\r\n    preSave(key) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            yield this.redis.set(key);\r\n        });\r\n    }\r\n    update(key, response) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            yield this.redis.set(key, response);\r\n        });\r\n    }\r\n};\r\nIdempotencyRepository = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof redis_1.Redis !== \"undefined\" && redis_1.Redis) === \"function\" ? _a : Object])\r\n], IdempotencyRepository);\r\nexports.IdempotencyRepository = IdempotencyRepository;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./idempotency.repository\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LibNestModulesModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nlet LibNestModulesModule = class LibNestModulesModule {\r\n};\r\nLibNestModulesModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        controllers: [],\r\n        providers: [],\r\n        exports: [],\r\n    })\r\n], LibNestModulesModule);\r\nexports.LibNestModulesModule = LibNestModulesModule;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./lib/server-config.module\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/server-config\"), exports);\r\n/// SERVICES\r\ntslib_1.__exportStar(require(\"./lib/services/cmd.service\"), exports);\r\ntslib_1.__exportStar(require(\"../../lib-nest-modules/src/lib/account/account-jwt.service\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/services/store.service\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/services/server-config.service\"), exports);\r\n/// TYPES & INTERFACES\r\ntslib_1.__exportStar(require(\"./lib/types/interfaces\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/types/types\"), exports);\r\n","\"use strict\";\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServerConfigModule = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst path_1 = require(\"path\");\r\nconst server_config_1 = tslib_1.__importDefault(require(\"./server-config\"));\r\nconst config_1 = require(\"@nestjs/config\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nconst server_config_service_1 = require(\"./services/server-config.service\");\r\nconst cmd_service_1 = require(\"./services/cmd.service\");\r\nconst account_jwt_service_1 = require(\"../../../lib-nest-modules/src/lib/account/account-jwt.service\");\r\nconst store_service_1 = require(\"./services/store.service\");\r\nconst core_1 = require(\"@nestjs/core\");\r\nconst server_interceptor_1 = require(\"./server.interceptor\");\r\nconst server_exception_filter_1 = require(\"./server-exception.filter\");\r\nconst configPath = (0, path_1.resolve)((0, path_1.join)(__dirname, store_service_1.StoreService.appName, 'assets', '.env'));\r\nlet ServerConfigModule = class ServerConfigModule {\r\n    constructor(storeService) {\r\n        this.storeService = storeService;\r\n    }\r\n};\r\nServerConfigModule = tslib_1.__decorate([\r\n    (0, common_1.Module)({\r\n        imports: [\r\n            nestjs_cls_1.ClsModule.forRoot({\r\n                global: true,\r\n                middleware: {\r\n                    mount: true,\r\n                },\r\n            }),\r\n            config_1.ConfigModule.forRoot({\r\n                load: [server_config_1.default],\r\n                envFilePath: configPath,\r\n                cache: true,\r\n            }),\r\n        ],\r\n        controllers: [],\r\n        providers: [\r\n            server_config_service_1.ServerConfigService,\r\n            cmd_service_1.CmdService,\r\n            account_jwt_service_1.JwtService,\r\n            store_service_1.StoreService,\r\n            {\r\n                provide: core_1.APP_INTERCEPTOR,\r\n                useClass: server_interceptor_1.ServerInterceptor,\r\n            },\r\n            {\r\n                provide: core_1.APP_FILTER,\r\n                useClass: server_exception_filter_1.ServerExceptionsFilter,\r\n            },\r\n            // SocketGateway,\r\n        ],\r\n        exports: [\r\n            config_1.ConfigModule,\r\n            server_config_service_1.ServerConfigService,\r\n            cmd_service_1.CmdService,\r\n            account_jwt_service_1.JwtService,\r\n            store_service_1.StoreService,\r\n        ],\r\n    }),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof store_service_1.StoreService !== \"undefined\" && store_service_1.StoreService) === \"function\" ? _a : Object])\r\n], ServerConfigModule);\r\nexports.ServerConfigModule = ServerConfigModule;\r\n// 9082762040\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.AppServer = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst config_1 = require(\"@nestjs/config\");\r\nconst node_turn_1 = tslib_1.__importDefault(require(\"node-turn\"));\r\nconst electron_log_1 = tslib_1.__importDefault(require(\"electron-log\"));\r\nconst core_1 = require(\"@nestjs/core\");\r\nconst helmet_1 = tslib_1.__importDefault(require(\"helmet\"));\r\nconst express_1 = tslib_1.__importDefault(require(\"express\"));\r\nconst server_config_service_1 = require(\"./services/server-config.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst path_1 = require(\"path\");\r\nconst os = tslib_1.__importStar(require(\"os\"));\r\nconst numCPUs = os.cpus().length;\r\nexports.default = (0, config_1.registerAs)('app', () => ({\r\n    env: process.env['APP_ENV'],\r\n    name: process.env['APP_NAME'],\r\n    protocol: process.env['APP_PROTOCOL'],\r\n    port: process.env['APP_PORT'],\r\n    code: process.env['APP_CODE'],\r\n    route: process.env['APP_ROUTE'],\r\n}));\r\nclass AppServer {\r\n    constructor(entryModule) {\r\n        this.entryModule = entryModule;\r\n        process.on('unhandledRejection', (reason, promise) => {\r\n            console.log(reason, 'Custom unhandledRejection HERE');\r\n        });\r\n        process.on('uncaughtException', (reason, promise) => {\r\n            console.log(reason, 'Custom uncaughtException');\r\n        });\r\n        process.on('SIGABRT', () => {\r\n            console.log('Server Process shutdown');\r\n        });\r\n    }\r\n    startNestApp() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            this.nestApp = yield core_1.NestFactory.create(this.entryModule);\r\n            this.serverConfigService = this.nestApp.get(server_config_service_1.ServerConfigService);\r\n            return this;\r\n        });\r\n    }\r\n    // cluster() {\r\n    //   if(cluster.isPrimary){\r\n    //     console.log(`Master server started on ${process.pid}`);\r\n    //     for (let i = 0; i < numCPUs; i++) {\r\n    //         cluster.fork();\r\n    //     }\r\n    //     cluster.on('exit', (worker, code, signal) => {\r\n    //         console.log(`Worker ${worker.process.pid} died. Restarting`);\r\n    //         cluster.fork();\r\n    //     })\r\n    //     // return this;\r\n    //   } else {\r\n    //       console.log(`Cluster server started on ${process.pid}`)\r\n    //       return this\r\n    //   }\r\n    // }\r\n    startServer(port) {\r\n        console.log('SERVER STAT: ', numCPUs);\r\n        // this.cluster();\r\n        // if(cluster.isPrimary){\r\n        //   console.log(`Master server started on ${process.pid}`);\r\n        //   for (let i = 0; i < numCPUs; i++) {\r\n        //     cluster.fork();\r\n        //   }\r\n        //   cluster.on('exit', (worker, code, signal) => {\r\n        //     console.log(`Worker ${worker.process.pid} died. Restarting`);\r\n        //     cluster.fork();\r\n        //   })\r\n        // }else{\r\n        //   console.log(`Cluster server started on ${process.pid}`)\r\n        //   this.nestApp\r\n        //     .listen(\r\n        //         (process.env['PORT'] || port || this.serverConfigService.port)\r\n        //     )\r\n        //     .then((server: any) => {\r\n        //       console.log(\r\n        //         'Server running on: ' +\r\n        //           this.serverConfigService.protocol +\r\n        //           '://localhost:' +\r\n        //           server.address().port,\r\n        //       );\r\n        //       this.serverConfigService._runningPort = server.address().port;\r\n        //       // this.enableTurnServer();\r\n        //       // this.enablePeerServer(server, '/pharmacin-peerjs');\r\n        //     })\r\n        //     .catch(async (error) => {\r\n        //       console.log(error);\r\n        //       if (error.code == 'EADDRINUSE') {\r\n        //         const pid = await this.serverConfigService.portUsedByPID(process.pid);\r\n        //         const kill = await this.serverConfigService.killPort(pid);\r\n        //         if (kill?.success) {\r\n        //           console.log('SERVER RESTAT');\r\n        //           this.startServer();\r\n        //         }\r\n        //       }\r\n        //     });\r\n        //   this.nestApp\r\n        //     .listen(\r\n        //         (process.env['PORT'] || port || this.serverConfigService.port)\r\n        //     )\r\n        //     .then((server: any) => {\r\n        //       console.log(\r\n        //         'Server running on: ' +\r\n        //           this.serverConfigService.protocol +\r\n        //           '://localhost:' +\r\n        //           server.address().port,\r\n        //       );\r\n        //       this.serverConfigService._runningPort = server.address().port;\r\n        //       // this.enableTurnServer();\r\n        //       // this.enablePeerServer(server, '/pharmacin-peerjs');\r\n        //     })\r\n        //     .catch(async (error) => {\r\n        //       console.log(error);\r\n        //       if (error.code == 'EADDRINUSE') {\r\n        //         const pid = await this.serverConfigService.portUsedByPID(process.pid);\r\n        //         const kill = await this.serverConfigService.killPort(pid);\r\n        //         if (kill?.success) {\r\n        //           console.log('SERVER RESTAT');\r\n        //           this.startServer();\r\n        //         }\r\n        //       }\r\n        //     });\r\n        // }\r\n        this.nestApp\r\n            .listen((process.env['PORT'] || port || this.serverConfigService.port))\r\n            .then((server) => {\r\n            console.log('Server running on: ' +\r\n                this.serverConfigService.protocol +\r\n                '://localhost:' +\r\n                server.address().port);\r\n            this.serverConfigService._runningPort = server.address().port;\r\n            // this.enableTurnServer();\r\n            // this.enablePeerServer(server, '/pharmacin-peerjs');\r\n        })\r\n            .catch((error) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            console.log(error);\r\n            if (error.code == 'EADDRINUSE') {\r\n                const pid = yield this.serverConfigService.portUsedByPID(process.pid);\r\n                const kill = yield this.serverConfigService.killPort(pid);\r\n                if (kill === null || kill === void 0 ? void 0 : kill.success) {\r\n                    console.log('SERVER RESTAT');\r\n                    this.startServer();\r\n                }\r\n            }\r\n        }));\r\n        return this;\r\n    }\r\n    enableHelmet(helmetOptions) {\r\n        this.nestApp.use((0, helmet_1.default)(helmetOptions));\r\n        return this;\r\n    }\r\n    enableExpress() {\r\n        this.nestApp.use(express_1.default.text({ limit: '50mb' }));\r\n        this.nestApp.use(express_1.default.json({ limit: '50mb' }));\r\n        this.nestApp.use(express_1.default.urlencoded({\r\n            limit: '50mb',\r\n            extended: true,\r\n            parameterLimit: 50000,\r\n        }));\r\n        return this;\r\n    }\r\n    serveUploads(assets) {\r\n        assets.forEach(asset => {\r\n            var _a, _b, _c, _d, _e, _f, _g, _h;\r\n            console.log((0, path_1.join)((_b = (_a = this.serverConfigService) === null || _a === void 0 ? void 0 : _a.appRoute) === null || _b === void 0 ? void 0 : _b.toLowerCase(), ((_d = (_c = this.serverConfigService) === null || _c === void 0 ? void 0 : _c.name) === null || _d === void 0 ? void 0 : _d.toLowerCase()) + '-' + lib_xUtils_1.EFileUploadDir.uploads.replace('/', ''), asset));\r\n            this.nestApp.use(((_f = (_e = this.serverConfigService) === null || _e === void 0 ? void 0 : _e.appRoute) === null || _f === void 0 ? void 0 : _f.toLowerCase()) + \"/\" +\r\n                ((_h = (_g = this.serverConfigService) === null || _g === void 0 ? void 0 : _g.name) === null || _h === void 0 ? void 0 : _h.toLowerCase()) + '-' + lib_xUtils_1.EFileUploadDir.uploads.replace('/', ''), express_1.default.static(asset));\r\n            // this.nestApp.use(\r\n            //   asset,\r\n            //   express.static(\r\n            //     this.serverConfigService?.appRoute?.toLowerCase() + \"/\"+\r\n            //     this.serverConfigService?.name?.toLowerCase() +'-' +EFileUploadDir.uploads.replace('/', '') as any\r\n            //   )\r\n            // )\r\n            // this.nestApp.useStaticAssets(\r\n            //   asset as any,\r\n            //   {\r\n            //     prefix:\r\n            //       this.serverConfigService?.appRoute?.toLowerCase() + \"/\"+\r\n            //       this.serverConfigService?.name?.toLowerCase() +'-' +EFileUploadDir.uploads.replace('/', '')\r\n            //   }\r\n            // )\r\n        });\r\n        return this;\r\n    }\r\n    enableGlobals(options = {\r\n        logger: true,\r\n        routePrefix: true,\r\n        cors: true,\r\n    }) {\r\n        options.logger ? this.nestApp.useLogger(electron_log_1.default) : null;\r\n        options.routePrefix\r\n            ? this.nestApp.setGlobalPrefix(this.serverConfigService.appRoute)\r\n            : null;\r\n        options.cors ? this.nestApp.enableCors() : null;\r\n        return this;\r\n    }\r\n    enableTurnServer() {\r\n        const turn = new node_turn_1.default({\r\n            authMech: 'long-term',\r\n            listeningPort: this.serverConfigService._runningPort,\r\n            debug(debugLevel, message) {\r\n                console.log(debugLevel, message);\r\n            },\r\n        });\r\n        turn.start();\r\n        return this;\r\n    }\r\n    enablePeerServer(server, peerPath) {\r\n        // const peerServer = ExpressPeerServer(server);\r\n        // this.nestApp.use(peerPath, peerServer);\r\n        return this;\r\n    }\r\n}\r\nexports.AppServer = AppServer;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServerExceptionsFilter = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nconst common_1 = require(\"@nestjs/common\");\r\n// Filter to catch All Http related Exceptions, format the errors and return them\r\n// IbnAdam - Sat 5th, Nov 2022 - 8:42 PM\r\nlet ServerExceptionsFilter = class ServerExceptionsFilter {\r\n    catch(exception, host) {\r\n        var _a;\r\n        const ctx = host.switchToHttp();\r\n        const response = ctx.getResponse();\r\n        const request = ctx.getRequest();\r\n        // Get error response status\r\n        const status = exception instanceof common_1.HttpException\r\n            ? exception.getStatus()\r\n            : common_1.HttpStatus.INTERNAL_SERVER_ERROR;\r\n        // Format the error\r\n        const responseMessage = (type, message) => {\r\n            if (type == 'MongooseServerSelectionError')\r\n                message = 'Database connection error, please contact Admin.';\r\n            else if (type == 'ValidationError')\r\n                message = lib_xUtils_1.EErrorMessages.invalidForm;\r\n            else if (status == 404 && request.method !== 'POST')\r\n                message = 'Requested resource not found';\r\n            // else if(message.includes('duplicate key'))\r\n            //   // message\r\n            //   console.log(type);\r\n            const msg = {\r\n                statusCode: status,\r\n                path: request.url,\r\n                errorType: type,\r\n                errorMessage: message,\r\n                timestamp: new Date().toISOString(),\r\n            };\r\n            // Send the error\r\n            console.error(exception);\r\n            response.status(status).json(msg);\r\n        };\r\n        // Mongoose VS regular error\r\n        if ((_a = exception === null || exception === void 0 ? void 0 : exception.message) === null || _a === void 0 ? void 0 : _a.error) {\r\n            return responseMessage('Error', exception.message.error);\r\n        }\r\n        else {\r\n            //////// Mongoose Error\r\n            if (exception.code == 11000) {\r\n                const value = Object.values(exception.keyValue)[0];\r\n                const key = Object.keys(exception.keyValue)[0];\r\n                return responseMessage(exception.name, 'Duplicate ' +\r\n                    (key === null || key === void 0 ? void 0 : key.toUpperCase()) +\r\n                    ' for value: ' +\r\n                    value +\r\n                    '. Please try another VALUE.');\r\n            }\r\n            if ((exception === null || exception === void 0 ? void 0 : exception.toString().includes('MongooseError')) && (exception === null || exception === void 0 ? void 0 : exception.toString().includes('buffering timed'))) {\r\n                return responseMessage('StoreError', \"Data store operation error, please contact Admin.\");\r\n            }\r\n            return responseMessage(exception.name, exception.message);\r\n        }\r\n    }\r\n};\r\nServerExceptionsFilter = tslib_1.__decorate([\r\n    (0, common_1.Catch)()\r\n], ServerExceptionsFilter);\r\nexports.ServerExceptionsFilter = ServerExceptionsFilter;\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServerInterceptor = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst rxjs_1 = require(\"rxjs\");\r\nconst server_config_service_1 = require(\"./services/server-config.service\");\r\nconst nestjs_cls_1 = require(\"nestjs-cls\");\r\nlet ServerInterceptor = class ServerInterceptor {\r\n    constructor(serverConfigService, cls) {\r\n        this.serverConfigService = serverConfigService;\r\n        this.cls = cls;\r\n    }\r\n    intercept(context, next) {\r\n        const request = context.switchToHttp().getRequest();\r\n        // Exclude file upload FormData from encryption and decryption\r\n        // console.log((request as Request).url);\r\n        this.cls.set('appName', 'salona');\r\n        let raw = request.header('raw');\r\n        // console.log(\r\n        //   Boolean(request.file) || Boolean(request.files) ?\r\n        //   'FILE PRESENT' : 'FILE NOT PRESENT', raw, typeof request.body, request.body, request.file\r\n        // );\r\n        Boolean(request.file) || Boolean(request.files) ? raw = true : raw = raw;\r\n        // let ip = request.header('x-forwarded-for') || request.connection.remoteAddress;\r\n        // console.log(request.headers['user-agent']);\r\n        // console.log(ip);\r\n        // console.log(raw ? 'NO ENCRYPT' : 'ENCRYPT', raw);\r\n        // // incoming\r\n        // return null as any;\r\n        request.body =\r\n            typeof request.body == 'string' && !raw\r\n                ? JSON.parse(this.serverConfigService.decryptClientRequest(request.body))\r\n                : request.body;\r\n        // // outgoing\r\n        return next.handle().pipe((0, rxjs_1.map)((res) => {\r\n            // Return null if server returns no response\r\n            res == null ? (res = null) : res;\r\n            if (request.url.includes('datastream'))\r\n                return JSON.stringify(res);\r\n            res = !raw\r\n                ? this.serverConfigService.encryptServerResponse(res)\r\n                : res;\r\n            return res;\r\n        }));\r\n    }\r\n};\r\nServerInterceptor = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof server_config_service_1.ServerConfigService !== \"undefined\" && server_config_service_1.ServerConfigService) === \"function\" ? _a : Object, typeof (_b = typeof nestjs_cls_1.ClsService !== \"undefined\" && nestjs_cls_1.ClsService) === \"function\" ? _b : Object])\r\n], ServerInterceptor);\r\nexports.ServerInterceptor = ServerInterceptor;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CmdService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst child_process_1 = require(\"child_process\");\r\nconst cmdPrompt = tslib_1.__importStar(require(\"@vscode/sudo-prompt\"));\r\nlet CmdService = class CmdService {\r\n    execCmd(cmd) {\r\n        return new Promise((resolve, reject) => {\r\n            (0, child_process_1.exec)(cmd, { maxBuffer: 1024 * 500 }, (error, stdout, stderr) => {\r\n                if (error) {\r\n                    console.warn(`Error could not execute the command \"${cmd}\" \\n`, error.message);\r\n                }\r\n                else if (stdout) {\r\n                    // console.log(stdout);\r\n                }\r\n                else {\r\n                    console.log(stderr);\r\n                }\r\n                resolve({\r\n                    success: stdout ? true : false,\r\n                    msg: stdout,\r\n                    accessDenied: stderr && stderr.includes('Access') ? true : false,\r\n                });\r\n            });\r\n        });\r\n    }\r\n    execCmdAdmin(cmd) {\r\n        return new Promise((resolve, reject) => {\r\n            const options = {\r\n                name: 'Admin User',\r\n            };\r\n            cmdPrompt.exec(cmd, options, (error, stdout, stderr) => {\r\n                if (error) {\r\n                    console.warn(`Error could not execute the command \"${cmd}\" \\n`, error.message);\r\n                }\r\n                else if (stdout)\r\n                    console.log('');\r\n                else {\r\n                    console.log('');\r\n                }\r\n                resolve({\r\n                    success: stdout ? true : false,\r\n                    accessDenied: error && (stderr === null || stderr === void 0 ? void 0 : stderr.includes('Access')) ? true : false,\r\n                    msg: stdout,\r\n                });\r\n            });\r\n        });\r\n    }\r\n    // Run a given command with Admin rights when necessary.\r\n    runCmd(cmd) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            let cmdRes = yield this.execCmd(cmd);\r\n            // console.log(cmdRes);\r\n            if (cmdRes.accessDenied)\r\n                return (cmdRes = yield this.execCmdAdmin(cmd));\r\n            return cmdRes;\r\n        });\r\n    }\r\n    isServiceRunning(serviceName) {\r\n        var _a, _b;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const cmdRes = yield this.runCmd(`WMIC Service WHERE \"Name = '${serviceName}'\" GET Started`);\r\n            return Boolean((_b = (_a = cmdRes.msg) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes('true'));\r\n        });\r\n    }\r\n    isServiceAvailable(serviceName) {\r\n        var _a, _b;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const cmdRes = yield this.runCmd(`WMIC Service WHERE \"Name = '${serviceName}'\"`);\r\n            return Boolean((_b = (_a = cmdRes.msg) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(serviceName === null || serviceName === void 0 ? void 0 : serviceName.toLowerCase()));\r\n        });\r\n    }\r\n};\r\nCmdService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)()\r\n], CmdService);\r\nexports.CmdService = CmdService;\r\n","\"use strict\";\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServerConfigService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst crypto_js_1 = require(\"crypto-js\");\r\nconst cmd_service_1 = require(\"../services/cmd.service\");\r\nconst config_1 = require(\"@nestjs/config\");\r\nlet ServerConfigService = class ServerConfigService {\r\n    constructor(_configService, cmdService) {\r\n        this._configService = _configService;\r\n        this.cmdService = cmdService;\r\n    }\r\n    get name() {\r\n        return this._configService.get('app.name');\r\n    }\r\n    get env() {\r\n        return this._configService.get('app.env');\r\n    }\r\n    get protocol() {\r\n        return this._configService.get('app.protocol');\r\n    }\r\n    get port() {\r\n        return Number(this._configService.get('app.port'));\r\n        //this.realPort || format(new Date(), 'yyMM');\r\n    }\r\n    get appCode() {\r\n        return this._configService.get('app.code');\r\n    }\r\n    get appRoute() {\r\n        return this._configService.get('app.route');\r\n    }\r\n    encryptServerResponse(data) {\r\n        return crypto_js_1.AES.encrypt(JSON.stringify(data), this._runningPort.toString()).toString();\r\n    }\r\n    decryptClientRequest(data) {\r\n        return crypto_js_1.AES.decrypt(data, this._runningPort.toString()).toString(crypto_js_1.enc.Utf8);\r\n    }\r\n    portUsedByPID(currentPID) {\r\n        var _a, _b;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const cmd = yield this.cmdService.runCmd(`netstat -aon | findstr :${this.port}`);\r\n                const pid = (_b = (_a = cmd.msg\r\n                    .toString()) === null || _a === void 0 ? void 0 : _a.split('+')[0].match(/LISTENING\\s+\\d+/g)[0]) === null || _b === void 0 ? void 0 : _b.match(/\\d+/g)[0];\r\n                return Number(pid) || Number(currentPID);\r\n            }\r\n            catch (error) {\r\n                console.log(error);\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n    killPort(pid, force = true) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            if (!pid)\r\n                return;\r\n            if (isNaN(pid)) {\r\n                throw new Error('PID must be a number.');\r\n            }\r\n            return yield this.cmdService.runCmd('taskkill /PID ' + pid + (force == true ? ' /f' : ''));\r\n        });\r\n    }\r\n};\r\nServerConfigService = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _a : Object, typeof (_b = typeof cmd_service_1.CmdService !== \"undefined\" && cmd_service_1.CmdService) === \"function\" ? _b : Object])\r\n], ServerConfigService);\r\nexports.ServerConfigService = ServerConfigService;\r\n","\"use strict\";\r\nvar StoreService_1;\r\nvar _a;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StoreService = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst common_1 = require(\"@nestjs/common\");\r\nconst crypto_1 = require(\"crypto\");\r\nconst electron_1 = require(\"electron\");\r\nconst path_1 = tslib_1.__importStar(require(\"path\"));\r\nconst fsx = tslib_1.__importStar(require(\"fs-extra\"));\r\nconst server_config_service_1 = require(\"./server-config.service\");\r\nconst lib_xUtils_1 = require(\"@healmah-node/lib-xUtils\");\r\nlet StoreService = StoreService_1 = class StoreService {\r\n    constructor(appConfigService) {\r\n        this.appConfigService = appConfigService;\r\n        StoreService_1.appConfig = this.appConfigService;\r\n        // try {\r\n        //   for (const [key, value] of Object.entries(EFileUploadDir)) {\r\n        //     if (key == 'public') continue;\r\n        //     fsx.ensureDirSync(\r\n        //       resolve(join(StoreService.uploadRootDir as any, value)),\r\n        //     );\r\n        //   }\r\n        // } catch (error) {\r\n        //   console.log(error);\r\n        // }\r\n    }\r\n    static setUploadDir(req, file, cb) {\r\n        if (!electron_1.app)\r\n            return '';\r\n        try {\r\n            const entity = req.query;\r\n            const uploadDir = (0, path_1.join)(StoreService_1.uploadRootDir, entity.path);\r\n            if (entity.oldRef && entity.oldRef !== 'null')\r\n                StoreService_1.removeFile((0, path_1.resolve)((0, path_1.join)(StoreService_1.uploadRootDir, entity.oldRef)));\r\n            try {\r\n                cb(null, uploadDir);\r\n            }\r\n            catch (error) {\r\n                console.log('ERROR Uppload DIr');\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    static setFilename(req, file, cb) {\r\n        try {\r\n            cb(null, `${(0, crypto_1.randomUUID)()}.${file.mimetype.split('/')[1]}`);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n            throw new Error(lib_xUtils_1.EErrorMessages.invalidUploadFilename);\r\n        }\r\n    }\r\n    static removeFile(fileLink) {\r\n        try {\r\n            if (fsx.existsSync(fileLink))\r\n                fsx.unlinkSync(fileLink);\r\n        }\r\n        catch (error) {\r\n            console.log(error, 'REMOVE ERROR');\r\n        }\r\n    }\r\n    get buildDir() {\r\n        return electron_1.app && electron_1.app.isPackaged\r\n            ? (0, path_1.resolve)((0, path_1.join)('.', 'resources', 'build'))\r\n            : (0, path_1.resolve)((0, path_1.join)('.', 'build'));\r\n    }\r\n    static staticSitePath(appName, anyPath = false) {\r\n        // console.log(resolve('.'));\r\n        const isDev = (0, path_1.resolve)('.').includes('healma') || (0, path_1.resolve)('.').includes('healmah');\r\n        // return ''\r\n        return !isDev ?\r\n            (0, path_1.resolve)(path_1.default.join('.', appName + '-ui')) :\r\n            anyPath ?\r\n                (0, path_1.resolve)((0, path_1.join)('.', 'dist', 'apps', appName + '-ui')) :\r\n                (0, path_1.resolve)((0, path_1.join)('.', 'dist', 'apps', appName, appName + '-ui'));\r\n    }\r\n    static get uploadRootDir() {\r\n        var _a, _b;\r\n        if (!electron_1.app)\r\n            return;\r\n        return (0, path_1.join)(electron_1.app === null || electron_1.app === void 0 ? void 0 : electron_1.app.getPath('appData'), ((_b = (_a = this.appConfig) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.toLowerCase()) + '-' + lib_xUtils_1.EFileUploadDir.uploads.replace('/', ''));\r\n        // return app\r\n        // ? join(app.getPath('appData'), EnumUploadDir.root)\r\n        // : join('./', '../', EnumUploadDir.root);\r\n    }\r\n    static get appName() {\r\n        var _a, _b;\r\n        let appName = electron_1.app === null || electron_1.app === void 0 ? void 0 : electron_1.app.getName();\r\n        if (appName === null || appName === void 0 ? void 0 : appName.includes('-')) {\r\n            appName = (_a = appName.split('-').at(0)) !== null && _a !== void 0 ? _a : appName;\r\n        }\r\n        else if (appName === null || appName === void 0 ? void 0 : appName.includes(' ')) {\r\n            appName = (_b = appName.split(' ').at(0)) !== null && _b !== void 0 ? _b : appName;\r\n        }\r\n        return electron_1.app && (electron_1.app === null || electron_1.app === void 0 ? void 0 : electron_1.app.isPackaged) ? appName : '';\r\n    }\r\n    static get assetsPath() {\r\n        const isDev = (0, path_1.resolve)('.').includes('healmah') || (0, path_1.resolve)('.').includes('healmah');\r\n        const path = isDev ?\r\n            (0, path_1.resolve)(electron_1.app.getAppPath(), 'assets') : (0, path_1.resolve)(__dirname, StoreService_1.appName, 'assets');\r\n        return path;\r\n    }\r\n};\r\nStoreService = StoreService_1 = tslib_1.__decorate([\r\n    (0, common_1.Injectable)(),\r\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof server_config_service_1.ServerConfigService !== \"undefined\" && server_config_service_1.ServerConfigService) === \"function\" ? _a : Object])\r\n], StoreService);\r\nexports.StoreService = StoreService;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\ntslib_1.__exportStar(require(\"./lib/enums/enum.account\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/enums/enum.inventory\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/enums/dispensary.enum\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/enums/enum.settings\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/enums/enum.services\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/enums/enum.health-program\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/enums/enum.record\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/enums/enum.x\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/enums/planix-routes\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/interfaces/interface.account\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/interfaces/interface.inventory\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/interfaces/dispensary.interface\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/interfaces/interface.settings\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/interfaces/interface.service\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/interfaces/interface.health-program\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/interfaces/record.interface\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/interfaces/interface.x\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/types/type.account\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/types/type.inventory\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/types/type.health-program\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/types/type.x\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/util-fns/arrays.util\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/util-fns/math.util\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/util-fns/date.util\"), exports);\r\ntslib_1.__exportStar(require(\"./lib/util-fns/node-printer.util\"), exports);\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ERmdDispensaryQuery = exports.ERmdStockStore = exports.EVetDispensaryStore = exports.EVetDispensaryQuery = exports.ECinDispensaryQuery = exports.ECinDispensaryConfig = exports.ECinDispensaryStore = void 0;\r\nvar ECinDispensaryStore;\r\n(function (ECinDispensaryStore) {\r\n    ECinDispensaryStore[\"dispensaryStore\"] = \"dispensary-store\";\r\n    ECinDispensaryStore[\"saleItems\"] = \"sale-items\";\r\n    ECinDispensaryStore[\"dispenseOrder\"] = \"dispense-order\";\r\n    ECinDispensaryStore[\"returnSaleItems\"] = \"return-sale-items\";\r\n})(ECinDispensaryStore = exports.ECinDispensaryStore || (exports.ECinDispensaryStore = {}));\r\nvar ECinDispensaryConfig;\r\n(function (ECinDispensaryConfig) {\r\n    ECinDispensaryConfig[\"dispensaryConfig\"] = \"dispensary-config\";\r\n    ECinDispensaryConfig[\"printSmallReceipt\"] = \"print-small-receipt\";\r\n})(ECinDispensaryConfig = exports.ECinDispensaryConfig || (exports.ECinDispensaryConfig = {}));\r\nvar ECinDispensaryQuery;\r\n(function (ECinDispensaryQuery) {\r\n    ECinDispensaryQuery[\"dispensaryQuery\"] = \"dispensary-query\";\r\n    ECinDispensaryQuery[\"dispenseHistory\"] = \"dispense-history\";\r\n    ECinDispensaryQuery[\"dispensaryReport\"] = \"dispensary-report\";\r\n})(ECinDispensaryQuery = exports.ECinDispensaryQuery || (exports.ECinDispensaryQuery = {}));\r\nvar EVetDispensaryQuery;\r\n(function (EVetDispensaryQuery) {\r\n    EVetDispensaryQuery[\"dispensaryQuery\"] = \"dispensary-query\";\r\n    EVetDispensaryQuery[\"saleItems\"] = \"sale-items\";\r\n    EVetDispensaryQuery[\"saleHistory\"] = \"sale-history\";\r\n    EVetDispensaryQuery[\"sales\"] = \"sales\";\r\n    EVetDispensaryQuery[\"returnSaleItems\"] = \"return-sale-items\";\r\n})(EVetDispensaryQuery = exports.EVetDispensaryQuery || (exports.EVetDispensaryQuery = {}));\r\nvar EVetDispensaryStore;\r\n(function (EVetDispensaryStore) {\r\n    EVetDispensaryStore[\"dispensaryStore\"] = \"dispensary-store\";\r\n    EVetDispensaryStore[\"sale\"] = \"sale\";\r\n    EVetDispensaryStore[\"returnSaleItems\"] = \"return-sale-items\";\r\n})(EVetDispensaryStore = exports.EVetDispensaryStore || (exports.EVetDispensaryStore = {}));\r\nvar ERmdStockStore;\r\n(function (ERmdStockStore) {\r\n    ERmdStockStore[\"stockStore\"] = \"stock-store\";\r\n})(ERmdStockStore = exports.ERmdStockStore || (exports.ERmdStockStore = {}));\r\nvar ERmdDispensaryQuery;\r\n(function (ERmdDispensaryQuery) {\r\n    ERmdDispensaryQuery[\"dispensaryQuery\"] = \"dispensary-query\";\r\n    ERmdDispensaryQuery[\"saleItems\"] = \"sale-items\";\r\n    ERmdDispensaryQuery[\"saleHistory\"] = \"sale-history\";\r\n    ERmdDispensaryQuery[\"sales\"] = \"sales\";\r\n    ERmdDispensaryQuery[\"returnSaleItems\"] = \"return-sale-items\";\r\n})(ERmdDispensaryQuery = exports.ERmdDispensaryQuery || (exports.ERmdDispensaryQuery = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EAccountQuery = exports.EAccountStore = void 0;\r\nvar EAccountStore;\r\n(function (EAccountStore) {\r\n    EAccountStore[\"accountStore\"] = \"account-store\";\r\n    EAccountStore[\"profile\"] = \"profile\";\r\n    EAccountStore[\"print\"] = \"print\";\r\n})(EAccountStore = exports.EAccountStore || (exports.EAccountStore = {}));\r\nvar EAccountQuery;\r\n(function (EAccountQuery) {\r\n    EAccountQuery[\"accountQuery\"] = \"account-query\";\r\n    EAccountQuery[\"staffProfile\"] = \"staffProfile\";\r\n    EAccountQuery[\"staffProfileLogin\"] = \"staff-login\";\r\n    EAccountQuery[\"staffProfiles\"] = \"staffProfiles\";\r\n})(EAccountQuery = exports.EAccountQuery || (exports.EAccountQuery = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EHealthProgramQuery = exports.EHealthProgramStore = void 0;\r\nvar EHealthProgramStore;\r\n(function (EHealthProgramStore) {\r\n    EHealthProgramStore[\"healthProgramStore\"] = \"health-program-store\";\r\n    EHealthProgramStore[\"saveHealthProgram\"] = \"save-health-program\";\r\n    EHealthProgramStore[\"deleteHealthProgram\"] = \"save-health-program\";\r\n})(EHealthProgramStore = exports.EHealthProgramStore || (exports.EHealthProgramStore = {}));\r\nvar EHealthProgramQuery;\r\n(function (EHealthProgramQuery) {\r\n    EHealthProgramQuery[\"healthProgramQuery\"] = \"health-program-query\";\r\n    EHealthProgramQuery[\"getHealthProgram\"] = \"get-health-program\";\r\n    EHealthProgramQuery[\"getHealthPrograms\"] = \"get-health-programs\";\r\n})(EHealthProgramQuery = exports.EHealthProgramQuery || (exports.EHealthProgramQuery = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EVetDashboardQuery = exports.EInventoryStockQuery = exports.EInventoryStockStore = exports.EInventoryStockConfig = void 0;\r\nvar EInventoryStockConfig;\r\n(function (EInventoryStockConfig) {\r\n    EInventoryStockConfig[\"stockConfig\"] = \"stock-config\";\r\n    EInventoryStockConfig[\"stockVendor\"] = \"stock-vendor\";\r\n    EInventoryStockConfig[\"stockUnit\"] = \"stock-unit\";\r\n    EInventoryStockConfig[\"expenditure\"] = \"expenditure\";\r\n    EInventoryStockConfig[\"expenditureRemarks\"] = \"expenditure-remarks\";\r\n})(EInventoryStockConfig = exports.EInventoryStockConfig || (exports.EInventoryStockConfig = {}));\r\nvar EInventoryStockStore;\r\n(function (EInventoryStockStore) {\r\n    EInventoryStockStore[\"stockStore\"] = \"stock-store\";\r\n    EInventoryStockStore[\"stockPurchase\"] = \"stock-purchase\";\r\n    EInventoryStockStore[\"changeStockName\"] = \"change-stock-name\";\r\n    EInventoryStockStore[\"stockLevelModerator\"] = \"stock-level-moderator\";\r\n})(EInventoryStockStore = exports.EInventoryStockStore || (exports.EInventoryStockStore = {}));\r\nvar EInventoryStockQuery;\r\n(function (EInventoryStockQuery) {\r\n    EInventoryStockQuery[\"stockPurchase\"] = \"stock-purchase\";\r\n    EInventoryStockQuery[\"stockQuery\"] = \"stock-query\";\r\n    EInventoryStockQuery[\"activeStocks\"] = \"active-stocks\";\r\n    EInventoryStockQuery[\"allStocks\"] = \"all-stocks\";\r\n    EInventoryStockQuery[\"oldStocks\"] = \"old-stocks\";\r\n    EInventoryStockQuery[\"expiryStocks\"] = \"expiry-stocks\";\r\n    EInventoryStockQuery[\"outOfStocks\"] = \"out-of-stocks\";\r\n    EInventoryStockQuery[\"purchaseVendors\"] = \"purchase-vendors\";\r\n})(EInventoryStockQuery = exports.EInventoryStockQuery || (exports.EInventoryStockQuery = {}));\r\nvar EVetDashboardQuery;\r\n(function (EVetDashboardQuery) {\r\n    EVetDashboardQuery[\"dashboardQuery\"] = \"dashboard-query\";\r\n    EVetDashboardQuery[\"overview\"] = \"overview\";\r\n    EVetDashboardQuery[\"income\"] = \"income\";\r\n    EVetDashboardQuery[\"dashboard\"] = \"dashboard\";\r\n})(EVetDashboardQuery = exports.EVetDashboardQuery || (exports.EVetDashboardQuery = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EHomasRecordQuery = exports.EHomasRecordStore = void 0;\r\nvar EHomasRecordStore;\r\n(function (EHomasRecordStore) {\r\n    EHomasRecordStore[\"recordStore\"] = \"record-store\";\r\n    EHomasRecordStore[\"patient\"] = \"patient\";\r\n    EHomasRecordStore[\"print\"] = \"print\";\r\n})(EHomasRecordStore = exports.EHomasRecordStore || (exports.EHomasRecordStore = {}));\r\nvar EHomasRecordQuery;\r\n(function (EHomasRecordQuery) {\r\n    EHomasRecordQuery[\"recordQuery\"] = \"record-query\";\r\n    EHomasRecordQuery[\"patient\"] = \"patient\";\r\n})(EHomasRecordQuery = exports.EHomasRecordQuery || (exports.EHomasRecordQuery = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EGameQuery = exports.EGameStore = exports.EServicesQuery = exports.EServicesStore = void 0;\r\nvar EServicesStore;\r\n(function (EServicesStore) {\r\n    EServicesStore[\"servicesStore\"] = \"services-store\";\r\n    EServicesStore[\"saveService\"] = \"save-services\";\r\n    EServicesStore[\"deleteService\"] = \"delete-service\";\r\n    EServicesStore[\"deleteRenderedService\"] = \"delete-rendered-service\";\r\n    EServicesStore[\"renderService\"] = \"render-service\";\r\n})(EServicesStore = exports.EServicesStore || (exports.EServicesStore = {}));\r\nvar EServicesQuery;\r\n(function (EServicesQuery) {\r\n    EServicesQuery[\"servicesQuery\"] = \"services-query\";\r\n    EServicesQuery[\"getServices\"] = \"get-services\";\r\n    EServicesQuery[\"getRenderedService\"] = \"get-rendered-services\";\r\n    EServicesQuery[\"getRenderedDashoardService\"] = \"get-rendered-dashboard-services\";\r\n})(EServicesQuery = exports.EServicesQuery || (exports.EServicesQuery = {}));\r\nvar EGameStore;\r\n(function (EGameStore) {\r\n    EGameStore[\"gameStore\"] = \"game-store\";\r\n    EGameStore[\"game\"] = \"game\";\r\n    EGameStore[\"gamePlay\"] = \"game-play\";\r\n    EGameStore[\"gameHistory\"] = \"game-history\";\r\n})(EGameStore = exports.EGameStore || (exports.EGameStore = {}));\r\nvar EGameQuery;\r\n(function (EGameQuery) {\r\n    EGameQuery[\"gameQuery\"] = \"game-query\";\r\n    EGameQuery[\"gameHistory\"] = \"game-history\";\r\n    EGameQuery[\"games\"] = \"games\";\r\n    EGameQuery[\"gameHome\"] = \"game-home\";\r\n})(EGameQuery = exports.EGameQuery || (exports.EGameQuery = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EHomasHospitalInfoQuery = exports.EHomasHospitalInfoStore = exports.EHomasHealthProgramQuery = exports.EHomasHealthProgramStore = exports.ESettingsQuery = exports.ESettingsStore = void 0;\r\nvar ESettingsStore;\r\n(function (ESettingsStore) {\r\n    ESettingsStore[\"settingsStore\"] = \"settings-store\";\r\n    ESettingsStore[\"saveSettings\"] = \"save-settings\";\r\n    ESettingsStore[\"shopBranch\"] = \"shop-branch\";\r\n    ESettingsStore[\"expenditure\"] = \"expenditure\";\r\n    ESettingsStore[\"expenditureAdmin\"] = \"expenditure\";\r\n    ESettingsStore[\"todo\"] = \"todo\";\r\n    ESettingsStore[\"staffPay\"] = \"staff-pay\";\r\n})(ESettingsStore = exports.ESettingsStore || (exports.ESettingsStore = {}));\r\nvar ESettingsQuery;\r\n(function (ESettingsQuery) {\r\n    ESettingsQuery[\"settingsQuery\"] = \"settings-query\";\r\n    ESettingsQuery[\"getSettings\"] = \"get-settings\";\r\n    ESettingsQuery[\"shopBranch\"] = \"shop-branch\";\r\n    ESettingsQuery[\"expenditure\"] = \"expenditure\";\r\n    ESettingsQuery[\"expenditureAdmin\"] = \"expenditure\";\r\n    ESettingsQuery[\"todo\"] = \"todo\";\r\n    ESettingsQuery[\"staffPay\"] = \"staff-pay\";\r\n})(ESettingsQuery = exports.ESettingsQuery || (exports.ESettingsQuery = {}));\r\n/////////////////////////////// HOMAS SETTINGS //////////////////////////////////////////////\r\nvar EHomasHealthProgramStore;\r\n(function (EHomasHealthProgramStore) {\r\n    EHomasHealthProgramStore[\"healthProgramStore\"] = \"health-program-store\";\r\n})(EHomasHealthProgramStore = exports.EHomasHealthProgramStore || (exports.EHomasHealthProgramStore = {}));\r\nvar EHomasHealthProgramQuery;\r\n(function (EHomasHealthProgramQuery) {\r\n    EHomasHealthProgramQuery[\"healthProgramQuery\"] = \"health-program-query\";\r\n})(EHomasHealthProgramQuery = exports.EHomasHealthProgramQuery || (exports.EHomasHealthProgramQuery = {}));\r\nvar EHomasHospitalInfoStore;\r\n(function (EHomasHospitalInfoStore) {\r\n    EHomasHospitalInfoStore[\"hospitalInfoStore\"] = \"hospital-info-store\";\r\n})(EHomasHospitalInfoStore = exports.EHomasHospitalInfoStore || (exports.EHomasHospitalInfoStore = {}));\r\nvar EHomasHospitalInfoQuery;\r\n(function (EHomasHospitalInfoQuery) {\r\n    EHomasHospitalInfoQuery[\"hospitalInfoQuery\"] = \"hospital-info-query\";\r\n})(EHomasHospitalInfoQuery = exports.EHomasHospitalInfoQuery || (exports.EHomasHospitalInfoQuery = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ESuccessMesssages = exports.EErrorMessages = exports.EFontTheme = exports.EIpcHandleChannels = exports.EIpcListenChannels = exports.EFileUplaodRoute = exports.EFileUploadDir = exports.EAccountType = exports.EHomasAppModules = exports.EDataStreamUrl = exports.ECommonAppModule = exports.EFeatureAppModule = exports.ECoreAppModule = void 0;\r\nvar ECoreAppModule;\r\n(function (ECoreAppModule) {\r\n    ECoreAppModule[\"Admin\"] = \"Admin\";\r\n    ECoreAppModule[\"Inventory\"] = \"Inventory\";\r\n    ECoreAppModule[\"Dispensary\"] = \"Dispensary\";\r\n    ECoreAppModule[\"Cashier\"] = \"Cashier\";\r\n    ECoreAppModule[\"Provision\"] = \"Provision\";\r\n    ECoreAppModule[\"Clinic\"] = \"Clinic\";\r\n})(ECoreAppModule = exports.ECoreAppModule || (exports.ECoreAppModule = {}));\r\nvar EFeatureAppModule;\r\n(function (EFeatureAppModule) {\r\n    EFeatureAppModule[\"SERVICE\"] = \"SERVICE\";\r\n    EFeatureAppModule[\"GAME\"] = \"GAME\";\r\n    EFeatureAppModule[\"STOCK\"] = \"STOCK\";\r\n    EFeatureAppModule[\"Setting\"] = \"Setting\";\r\n    EFeatureAppModule[\"DataChannel\"] = \"DataChannel\";\r\n})(EFeatureAppModule = exports.EFeatureAppModule || (exports.EFeatureAppModule = {}));\r\nvar ECommonAppModule;\r\n(function (ECommonAppModule) {\r\n    ECommonAppModule[\"Account\"] = \"Account\";\r\n    ECommonAppModule[\"Settings\"] = \"Settings\";\r\n})(ECommonAppModule = exports.ECommonAppModule || (exports.ECommonAppModule = {}));\r\nvar EDataStreamUrl;\r\n(function (EDataStreamUrl) {\r\n    EDataStreamUrl[\"serverTime\"] = \"server-time\";\r\n})(EDataStreamUrl = exports.EDataStreamUrl || (exports.EDataStreamUrl = {}));\r\nvar EHomasAppModules;\r\n(function (EHomasAppModules) {\r\n    EHomasAppModules[\"admin\"] = \"Admin\";\r\n    EHomasAppModules[\"doctor\"] = \"Doctor\";\r\n    EHomasAppModules[\"pharmacy\"] = \"Pharmacy\";\r\n    EHomasAppModules[\"laboratory\"] = \"Laboratory\";\r\n    EHomasAppModules[\"nurse\"] = \"Nurse\";\r\n    EHomasAppModules[\"record\"] = \"Record\";\r\n})(EHomasAppModules = exports.EHomasAppModules || (exports.EHomasAppModules = {}));\r\nvar EAccountType;\r\n(function (EAccountType) {\r\n    EAccountType[\"super\"] = \"Super\";\r\n    EAccountType[\"standard\"] = \"Standard\";\r\n    EAccountType[\"basic\"] = \"Basic\";\r\n})(EAccountType = exports.EAccountType || (exports.EAccountType = {}));\r\nvar EFileUploadDir;\r\n(function (EFileUploadDir) {\r\n    EFileUploadDir[\"public\"] = \"/public\";\r\n    EFileUploadDir[\"uploads\"] = \"/uploads\";\r\n    EFileUploadDir[\"temp\"] = \"/temp\";\r\n    EFileUploadDir[\"setting\"] = \"/setting-file\";\r\n    EFileUploadDir[\"staff\"] = \"/user-account\";\r\n    EFileUploadDir[\"patient\"] = \"/patient-account\";\r\n    EFileUploadDir[\"customer\"] = \"/customer-file\";\r\n    EFileUploadDir[\"chat\"] = \"/chat-file\";\r\n})(EFileUploadDir = exports.EFileUploadDir || (exports.EFileUploadDir = {}));\r\nvar EFileUplaodRoute;\r\n(function (EFileUplaodRoute) {\r\n    EFileUplaodRoute[\"fileManager\"] = \"file-manager\";\r\n    EFileUplaodRoute[\"uploadFsFile\"] = \"upload-fs-file\";\r\n    EFileUplaodRoute[\"uploadFsFiles\"] = \"upload-fs-files\";\r\n    EFileUplaodRoute[\"uploadDbFile\"] = \"upload-db-file\";\r\n    EFileUplaodRoute[\"uploadDbFiles\"] = \"upload-db-files\";\r\n    EFileUplaodRoute[\"fsFile\"] = \"fs-file\";\r\n    EFileUplaodRoute[\"fsFiles\"] = \"fs-files\";\r\n    EFileUplaodRoute[\"dbFile\"] = \"db-file\";\r\n    EFileUplaodRoute[\"dbFiles\"] = \"db-files\";\r\n    EFileUplaodRoute[\"json\"] = \"json\";\r\n    EFileUplaodRoute[\"printTest\"] = \"print-test\";\r\n})(EFileUplaodRoute = exports.EFileUplaodRoute || (exports.EFileUplaodRoute = {}));\r\nvar EIpcListenChannels;\r\n(function (EIpcListenChannels) {\r\n    EIpcListenChannels[\"min\"] = \"min\";\r\n    EIpcListenChannels[\"clo\"] = \"clo\";\r\n    EIpcListenChannels[\"restore\"] = \"restore\";\r\n    EIpcListenChannels[\"unMax\"] = \"unMax\";\r\n    EIpcListenChannels[\"relaunch\"] = \"relaunch\";\r\n    EIpcListenChannels[\"quit\"] = \"quit\";\r\n    EIpcListenChannels[\"titleBar\"] = \"titleBar\";\r\n    EIpcListenChannels[\"loginScreen\"] = \"loginScreen\";\r\n    EIpcListenChannels[\"loginWindow\"] = \"loginWindow\";\r\n    EIpcListenChannels[\"mainWindow\"] = \"mainWindow\";\r\n    EIpcListenChannels[\"loadMainUrl\"] = \"loadMainUrl\";\r\n    EIpcListenChannels[\"hide\"] = \"hide\";\r\n    EIpcListenChannels[\"dev\"] = \"dev\";\r\n    EIpcListenChannels[\"saveFile\"] = \"saveFile\";\r\n})(EIpcListenChannels = exports.EIpcListenChannels || (exports.EIpcListenChannels = {}));\r\nvar EIpcHandleChannels;\r\n(function (EIpcHandleChannels) {\r\n    EIpcHandleChannels[\"pdfjsPath\"] = \"pdfjsPath\";\r\n    EIpcHandleChannels[\"pdfOpen\"] = \"pdfOpen\";\r\n    EIpcHandleChannels[\"max\"] = \"max\";\r\n    EIpcHandleChannels[\"maxSlide\"] = \"maxSlide\";\r\n    EIpcHandleChannels[\"isMax\"] = \"isMax\";\r\n    EIpcHandleChannels[\"appVersion\"] = \"appVersion\";\r\n    EIpcHandleChannels[\"mainWindow\"] = \"mainWindow\";\r\n    EIpcHandleChannels[\"movingWindow\"] = \"movingWindow\";\r\n    EIpcHandleChannels[\"movedWindow\"] = \"movedWindow\";\r\n    EIpcHandleChannels[\"pdfFileExtract\"] = \"pdfFileExtract\";\r\n})(EIpcHandleChannels = exports.EIpcHandleChannels || (exports.EIpcHandleChannels = {}));\r\nvar EFontTheme;\r\n(function (EFontTheme) {\r\n    EFontTheme[\"Cambria\"] = \"Cambria\";\r\n    EFontTheme[\"Calibri\"] = \"Calibri\";\r\n    EFontTheme[\"Cursive\"] = \"cursive\";\r\n    EFontTheme[\"Monospace\"] = \"monospace\";\r\n    EFontTheme[\"Segoe\"] = \"Segoe UI\";\r\n    EFontTheme[\"Times\"] = \"Times\";\r\n})(EFontTheme = exports.EFontTheme || (exports.EFontTheme = {}));\r\nvar EErrorMessages;\r\n(function (EErrorMessages) {\r\n    EErrorMessages[\"invalidForm\"] = \"Please fill in all the required fields properly.\";\r\n    EErrorMessages[\"invalidFile\"] = \"No file selected, please do select a file.\";\r\n    EErrorMessages[\"invalidFileType\"] = \"Invalid file type, please choose the correct file type.\";\r\n    EErrorMessages[\"invalidUploadDir\"] = \"Error, could not set up upload folder.\";\r\n    EErrorMessages[\"invalidUploadFilename\"] = \"Error, could not set up upload file name.\";\r\n    EErrorMessages[\"unauthorized\"] = \"Unauthorized acess, please login, or contact Admin.\";\r\n    EErrorMessages[\"sessionExpired\"] = \"Session expired, please login again.\";\r\n})(EErrorMessages = exports.EErrorMessages || (exports.EErrorMessages = {}));\r\nvar ESuccessMesssages;\r\n(function (ESuccessMesssages) {\r\n    ESuccessMesssages[\"formSaved\"] = \"Data saved successfully.\";\r\n    ESuccessMesssages[\"itemDeleted\"] = \"successfully deleted.\";\r\n})(ESuccessMesssages = exports.ESuccessMesssages || (exports.ESuccessMesssages = {}));\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ePlanixModules = exports.ePlanixRoutes = exports.ePlanixSettingsStore = void 0;\r\nexports.ePlanixSettingsStore = {\r\n    auth: 'auth',\r\n    signUp: 'sign-up',\r\n    signIn: 'sign-in',\r\n    account: 'account',\r\n    code: 'codes',\r\n    settings: 'settings',\r\n    lga: 'lga'\r\n};\r\nexports.ePlanixRoutes = {\r\n    sector: 'sector',\r\n    dataTemplate: 'data-template',\r\n    dataEntry: 'data-entry',\r\n    dataEntryView: 'data-entry-view',\r\n    dashboard: 'dashboard-query',\r\n};\r\nexports.ePlanixModules = {\r\n    SECTORS: 'SECTORS',\r\n    DATATEMPLATE: 'DATATEMPLATE',\r\n    DATAENTRY: 'DATAENTRY',\r\n    ADMIN: 'ADMIN'\r\n};\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.uniqueObjectArrayByAttr = exports.ObjectAttrFromNotationString = exports.shuffleArray = exports.groupArrOfObjByKey = exports.groupByKeys = exports.mapObjUtil = exports.groupObjArrayByAttr = exports.sortByAttribute = void 0;\r\n// sort by one attribute\r\n// console.log(sortByAttribute(array, 'name'));\r\n// // sort by mupltiple attributes\r\n// console.log(sortByAttribute(array, '-rating', 'name'));\r\n/**\r\n * sort by one attribute: console.log(sortByAttribute(array, 'name'));\r\n\r\n  * sort by mupltiple attributes asc or desc: console.log(sortByAttribute(array, '-rating', 'name'));\r\n * @param array\r\n * @param attrs\r\n * @returns\r\n */\r\nconst sortByAttribute = (array, ...attrs) => {\r\n    // generate an array of predicate-objects contains\r\n    // property getter, and descending indicator\r\n    let predicates = attrs.map((pred) => {\r\n        let descending = pred.charAt(0) === '-' ? -1 : 1;\r\n        pred = pred.replace(/^-/, '');\r\n        return {\r\n            getter: (o) => o[pred],\r\n            descend: descending\r\n        };\r\n    });\r\n    // schwartzian transform idiom implementation. aka: \"decorate-sort-undecorate\"\r\n    return array.map(item => {\r\n        return {\r\n            src: item,\r\n            compareValues: predicates.map((predicate) => predicate.getter(item))\r\n        };\r\n    })\r\n        .sort((o1, o2) => {\r\n        let i = -1, result = 0;\r\n        while (++i < predicates.length) {\r\n            if (o1.compareValues[i] < o2.compareValues[i])\r\n                result = -1;\r\n            if (o1.compareValues[i] > o2.compareValues[i])\r\n                result = 1;\r\n            if (result *= predicates[i].descend)\r\n                break;\r\n        }\r\n        return result;\r\n    })\r\n        .map(item => item.src);\r\n};\r\nexports.sortByAttribute = sortByAttribute;\r\nconst groupObjArrayByAttr = (array, attr, k) => {\r\n    return array\r\n        .sort((a, b) => a.y - b.y)\r\n        .reduce((r, a) => {\r\n        const y = k ? a[attr][k] : a[attr];\r\n        r[y] = r[y] || [];\r\n        r[y].push(a);\r\n        return r;\r\n    }, Object.create(null));\r\n};\r\nexports.groupObjArrayByAttr = groupObjArrayByAttr;\r\nconst mapObjUtil = (func, obj) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, func(value)]));\r\nexports.mapObjUtil = mapObjUtil;\r\n/**\r\n  * Groups an array of objects with multiple properties.\r\n  *\r\n  * @param  {Array}  array: the array of objects to group\r\n  * @param  {Array|String} props: the properties to groupby\r\n  * @return {Array} an array of arrays with the grouped results\r\n  */\r\nconst groupByKeys = (array, props, propsConcString = ' - ') => {\r\n    if (!Array.isArray(props))\r\n        props = [props];\r\n    const getGroupedItems = (item) => {\r\n        const returnArray = [];\r\n        let i;\r\n        for (i = 0; i < props.length; i++) {\r\n            const objPropAvail = item[props[i]];\r\n            if (objPropAvail)\r\n                returnArray.push(objPropAvail);\r\n        }\r\n        return returnArray;\r\n    };\r\n    let groups = {};\r\n    let i;\r\n    for (i = 0; i < array.length; i++) {\r\n        const arrayRecord = array[i];\r\n        const group = getGroupedItems(arrayRecord).join(propsConcString);\r\n        // console.log(group);\r\n        groups[group] = groups[group] || [];\r\n        groups[group].push(arrayRecord);\r\n    }\r\n    return groups;\r\n    // return Object.keys(groups).map((group) => {\r\n    //   // console.log(groups, group, groups[group]);\r\n    //     return groups[group];\r\n    // });\r\n};\r\nexports.groupByKeys = groupByKeys;\r\n// export const groupArrOfObjByKey = (objArr: any[], key: string): any[]=>{\r\n//   return objArr\r\n//     .map(arrObj => [arrObj[key], arrObj])\r\n//     .reduce(\r\n//       (groups, [key, value]) => Object.assign(groups, { [key]: (groups[key] || []).concat([value]) })\r\n//     )\r\n// }\r\n// Utils\r\nconst mapObj = (f, obj) => Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, f(v)]));\r\nconst groupArrOfObjByKey = (arrOfObj, key) => arrOfObj\r\n    .map(x => [x[key], x])\r\n    .reduce((groups, [k, v]) => Object.assign(groups, { [k]: (groups[k] || []).concat([v]) }), {});\r\nexports.groupArrOfObjByKey = groupArrOfObjByKey;\r\n// const AllKey = Symbol();\r\n// export const groupByKeys = ([k, ...ks], xs) => k\r\n//   ? Object.assign(mapObj(\r\n//       ys => groupByKeys(ks as any, ys),\r\n//       groupArrOfObjByKey(xs, k)\r\n//     ), {})\r\n//   : xs;\r\nfunction shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\nexports.shuffleArray = shuffleArray;\r\nconst ObjectAttrFromNotationString = (obj, attr) => {\r\n    const attrs = attr === null || attr === void 0 ? void 0 : attr.split('.');\r\n    const objAttrs = [];\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        objAttrs.push([attrs[i]]);\r\n    }\r\n    // console.log(objobjAttrs, );\r\n};\r\nexports.ObjectAttrFromNotationString = ObjectAttrFromNotationString;\r\nconst uniqueObjectArrayByAttr = (array, attr) => {\r\n    const map = new Map();\r\n    for (let src of array) {\r\n        map.set(src[attr], src);\r\n    }\r\n    return [...map.values()];\r\n};\r\nexports.uniqueObjectArrayByAttr = uniqueObjectArrayByAttr;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getZonedEndOfYear = exports.getZonedStartOfYear = exports.getZonedEndOfMonth = exports.getZonedStartOfMonth = exports.getZonedEndOfWeek = exports.getZonedStartOfWeek = exports.getZonedEndOfDay = exports.getZonedStartOfDay = void 0;\r\nconst date_fns_1 = require(\"date-fns\");\r\nconst date_fns_tz_1 = require(\"date-fns-tz\");\r\nconst calcZonedDate = (date, tz, fn, options = null) => {\r\n    const inputZoned = (0, date_fns_tz_1.utcToZonedTime)(date, tz);\r\n    const fnZoned = (options) ? fn(inputZoned, options) : fn(inputZoned);\r\n    return (0, date_fns_tz_1.zonedTimeToUtc)(fnZoned, tz);\r\n};\r\nconst getZonedStartOfDay = (date, timeZone = 'Africa/Lagos') => {\r\n    return calcZonedDate(date, timeZone, date_fns_1.startOfDay);\r\n};\r\nexports.getZonedStartOfDay = getZonedStartOfDay;\r\nconst getZonedEndOfDay = (date, timeZone = 'Africa/Lagos') => {\r\n    return calcZonedDate(date, timeZone, date_fns_1.endOfDay);\r\n};\r\nexports.getZonedEndOfDay = getZonedEndOfDay;\r\nconst getZonedStartOfWeek = (date, timeZone = 'Africa/Lagos') => {\r\n    return calcZonedDate(date, timeZone, date_fns_1.startOfWeek, { weekStartsOn: 1 });\r\n};\r\nexports.getZonedStartOfWeek = getZonedStartOfWeek;\r\nconst getZonedEndOfWeek = (date, timeZone = 'Africa/Lagos') => {\r\n    return calcZonedDate(date, timeZone, date_fns_1.endOfWeek, { weekStartsOn: 1 });\r\n};\r\nexports.getZonedEndOfWeek = getZonedEndOfWeek;\r\nconst getZonedStartOfMonth = (date, timeZone = 'Africa/Lagos') => {\r\n    return calcZonedDate(date, timeZone, date_fns_1.startOfMonth);\r\n};\r\nexports.getZonedStartOfMonth = getZonedStartOfMonth;\r\nconst getZonedEndOfMonth = (date, timeZone = 'Africa/Lagos') => {\r\n    return calcZonedDate(date, timeZone, date_fns_1.endOfMonth);\r\n};\r\nexports.getZonedEndOfMonth = getZonedEndOfMonth;\r\nconst getZonedStartOfYear = (date, timeZone = 'Africa/Lagos') => {\r\n    return calcZonedDate(date, timeZone, date_fns_1.startOfYear);\r\n};\r\nexports.getZonedStartOfYear = getZonedStartOfYear;\r\nconst getZonedEndOfYear = (date, timeZone = 'Africa/Lagos') => {\r\n    return calcZonedDate(date, timeZone, date_fns_1.endOfYear);\r\n};\r\nexports.getZonedEndOfYear = getZonedEndOfYear;\r\n// Example Usage\r\nlet endOfDayZoned = (0, exports.getZonedEndOfDay)(new Date(), 'Africa/Lagos');\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.waitHereFor = exports.randomChars = exports.padNumber = exports.roundNumber = exports.formatToNumber = exports.isNumber = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst nanoid = tslib_1.__importStar(require(\"nanoid\"));\r\nconst isNumber = (value) => {\r\n    const isRegularNumber = ((typeof value === 'number' || value instanceof Number ||\r\n        (value && typeof value === 'string' && !isNaN(value))) &&\r\n        isFinite(value));\r\n    const localeNoRegExp = /\\b(\\d+[\\.,]?\\d+)+\\b/gi;\r\n    const isLocaleNumber = ((typeof value === 'string' || typeof value === 'number') &&\r\n        !isNaN(parseFloat(value)) &&\r\n        !value.toString().includes('/') &&\r\n        localeNoRegExp.test(value));\r\n    return isRegularNumber || isLocaleNumber;\r\n};\r\nexports.isNumber = isNumber;\r\nfunction formatToNumber(val) {\r\n    // val = roundNumber(val, 2);\r\n    if (!val)\r\n        return '';\r\n    if (!(0, exports.isNumber)(val))\r\n        return val === null || val === void 0 ? void 0 : val.toString();\r\n    let num = val.toString().includes('.')\r\n        ? val.toString().split('.')[0]\r\n        : val.toString();\r\n    while (/(\\d+)(\\d{3})/.test(num.toString())) {\r\n        // insert comma to 4th last position to the match number\r\n        num = num.toString().replace(/(\\d+)(\\d{3})/, '$1' + ',' + '$2');\r\n    }\r\n    // return the number with decimal point if it exists\r\n    const ans = val.toString().includes('.')\r\n        ? num + '.' + val.toString().split('.')[1]\r\n        : num;\r\n    return ans;\r\n}\r\nexports.formatToNumber = formatToNumber;\r\nfunction roundNumber(num, dec) {\r\n    let str = Math.round(parseFloat(num) * Math.pow(10, dec)).toString();\r\n    if (dec == 0) {\r\n        // eslint-disable-next-line no-self-assign\r\n        str = str;\r\n    }\r\n    else {\r\n        while (str.length <= dec) {\r\n            str = '0' + str;\r\n        }\r\n    }\r\n    const decpoint = str.length - dec;\r\n    if (dec == 0)\r\n        return str.substring(0, decpoint) + str.substring(decpoint, str.length);\r\n    else\r\n        return (str.substring(0, decpoint) + '.' + str.substring(decpoint, str.length));\r\n}\r\nexports.roundNumber = roundNumber;\r\nconst padNumber = (numberToPad, howManyTimesToPad, paddingString) => {\r\n    return (Array(howManyTimesToPad - String(numberToPad).length + 1).join(paddingString || '0') + numberToPad);\r\n};\r\nexports.padNumber = padNumber;\r\n/**\r\n *\r\n * @param type type of the gerated characters\r\n * @param length the length of the gerated charaters\r\n */\r\nconst randomChars = (type, length) => {\r\n    if (type == 'mixed') {\r\n        const nanoId = nanoid.customAlphabet('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\r\n        return nanoId(length);\r\n    }\r\n    else if (type == 'letters') {\r\n        const nanoId = nanoid.customAlphabet('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\r\n        return nanoId(length);\r\n    }\r\n    else {\r\n        const nanoId = nanoid.customAlphabet('123456789');\r\n        return nanoId(length);\r\n    }\r\n};\r\nexports.randomChars = randomChars;\r\nconst waitHereFor = (ms) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n};\r\nexports.waitHereFor = waitHereFor;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.printTest = void 0;\r\n// import * as escpos from 'escpos';\r\n// escpos.USB = require('escpos-usb');\r\nconst printTest = () => {\r\n    // const device = new USB();\r\n    // device.open(async function(err){\r\n    //   if(err){\r\n    //     // handle error\r\n    //     return\r\n    //   }\r\n    //   // encoding is optional\r\n    //   const options = { encoding: \"GB18030\" /* default */ }\r\n    //   let printer = new Printer(device, options);\r\n    //   // Path to png image\r\n    //   // const filePath = join(\"/PATH/TO/IMAGE\");\r\n    //   // const image = await Image.load(filePath);\r\n    //   printer\r\n    //     .font(\"a\")\r\n    //     .align(\"ct\")\r\n    //     .style(\"bu\")\r\n    //     .size(1, 1)\r\n    //     .text(\"May the gold fill your pocket\")\r\n    //     .text(\"恭喜发财\")\r\n    //     .barcode(112233445566, \"EAN13\", { width: 50, height: 50 })\r\n    //     .table([\"One\", \"Two\", \"Three\"])\r\n    //     .tableCustom(\r\n    //       [\r\n    //         { text: \"Left\", align: \"LEFT\", width: 0.33, style: \"B\" },\r\n    //         { text: \"Center\", align: \"CENTER\", width: 0.33 },\r\n    //         { text: \"Right\", align: \"RIGHT\", width: 0.33 },\r\n    //       ],\r\n    //       { encoding: \"cp857\", size: [1, 1] }, // Optional\r\n    //     )\r\n    //   // inject qrimage to printer\r\n    //   printer = await printer.qrimage(\"https://github.com/node-escpos/driver\")\r\n    //   // inject image to printer\r\n    //   // printer = await printer.image(\r\n    //   //   image,\r\n    //   //   \"s8\" // changing with image\r\n    //   // )\r\n    //   printer\r\n    //     .cut()\r\n    //     .close()\r\n    // });\r\n};\r\nexports.printTest = printTest;\r\n","module.exports = require(\"@golevelup/nestjs-modules\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/schedule\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"@node-escpos/core\");","module.exports = require(\"@node-escpos/usb-adapter\");","module.exports = require(\"@vscode/sudo-prompt\");","module.exports = require(\"cron\");","module.exports = require(\"crypto-js\");","module.exports = require(\"date-fns\");","module.exports = require(\"date-fns-tz\");","module.exports = require(\"electron\");","module.exports = require(\"electron-log\");","module.exports = require(\"express\");","module.exports = require(\"fs-extra\");","module.exports = require(\"helmet\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"mongoose-delete\");","module.exports = require(\"multer\");","module.exports = require(\"nanoid\");","module.exports = require(\"nestjs-cls\");","module.exports = require(\"node-turn\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"rxjs\");","module.exports = require(\"rxjs/operators\");","module.exports = require(\"tslib\");","module.exports = require(\"child_process\");","module.exports = require(\"crypto\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tslib_1 = require(\"tslib\");\r\nconst app_module_1 = require(\"./app/app.module\");\r\nconst lib_serverConfig_1 = require(\"@healmah-nest/lib-serverConfig\");\r\nfunction bootstrap() {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n        (yield new lib_serverConfig_1.AppServer(app_module_1.AppModule).startNestApp())\r\n            .enableExpress()\r\n            .enableHelmet({ contentSecurityPolicy: false })\r\n            .enableGlobals()\r\n            // .cluster()\r\n            .startServer();\r\n    });\r\n}\r\nbootstrap();\r\n"],"names":[],"sourceRoot":""}